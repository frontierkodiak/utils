<?xml version="1.0" encoding="utf-8"?>
<codebase_context>
  <dirtree root="/home/caleb/repo/utils/export_repo">|-- configs (1159 lines)
|   |-- autocrop.json (10)
|   |-- autocropper.json (12)
|   |-- bulk_dl.json (14)
|   |-- convnext.json (15)
|   |-- cosm-c360-data.json (12)
|   |-- cosm-c360-tools.json (12)
|   |-- export_repo.json (13)
|   |-- ezmd.json (11)
|   |-- ezprompt.json (11)
|   |-- flash-attn.json (22)
|   |-- h5merge-mini.json (12)
|   |-- h5merge.json (12)
|   |-- h5pull.json (11)
|   |-- hFormer0-serve.json (10)
|   |-- ibrida.json (13)
|   |-- ibridaDB_v0r1_export.json (13)
|   |-- ibridaDB_v0r1_ingest.json (10)
|   |-- ibridaDB_v0rX.json (12)
|   |-- ibrida_analysis.json (13)
|   |-- ibrida_autocrop.json (13)
|   |-- ladybird_data.json (13)
|   |-- metaformer.json (11)
|   |-- metaformer1.json (12)
|   |-- metaformer2.json (11)
|   |-- model-explorer.json (13)
|   |-- nextjs.json (8)
|   |-- polliFormer-COPAP.json (12)
|   |-- polliFormer-Dyn.json (18)
|   |-- polliFormer-DynSlim.json (13)
|   |-- polliFormer-J25_0e0.json (13)
|   |-- polliFormer-aug.json (11)
|   |-- polliFormer-autobatch.json (13)
|   |-- polliFormer-autoresume.json (15)
|   |-- polliFormer-autoscale.json (20)
|   |-- polliFormer-blade-angio-0.json (14)
|   |-- polliFormer-buildData.json (12)
|   |-- polliFormer-classification0.json (21)
|   |-- polliFormer-classification1.json (21)
|   |-- polliFormer-codeOnly.json (11)
|   |-- polliFormer-configData.json (12)
|   |-- polliFormer-configModel.json (14)
|   |-- polliFormer-configModelMini.json (13)
|   |-- polliFormer-data.json (12)
|   |-- polliFormer-debugCOPAP.json (13)
|   |-- polliFormer-deploymentXL.json (31)
|   |-- polliFormer-doxDyn.json (16)
|   |-- polliFormer-gradnorm.json (25)
|   |-- polliFormer-gradnorm2.json (27)
|   |-- polliFormer-gradnormSlim.json (16)
|   |-- polliFormer-gradnormSlim2.json (14)
|   |-- polliFormer-hierarchyMini.json (16)
|   |-- polliFormer-hierarchyXL.json (23)
|   |-- polliFormer-logging.json (14)
|   |-- polliFormer-loggingSlim.json (14)
|   |-- polliFormer-loss.json (26)
|   |-- polliFormer-loss2.json (21)
|   |-- polliFormer-loss3.json (18)
|   |-- polliFormer-mFormerV1.json (18)
|   |-- polliFormer-meta.json (18)
|   |-- polliFormer-metrics.json (14)
|   |-- polliFormer-models-codeOnly.json (11)
|   |-- polliFormer-models.json (15)
|   |-- polliFormer-modelsDyn.json (16)
|   |-- polliFormer-modelsPruned-codeOnly.json (11)
|   |-- polliFormer-modelsPrunedInv-codeOnly.json (11)
|   |-- polliFormer-modelsSlim.json (18)
|   |-- polliFormer-modelsSlim2.json (16)
|   |-- polliFormer-paramFilters.json (16)
|   |-- polliFormer-serve.json (10)
|   |-- polliFormer-tests.json (12)
|   |-- polliFormer-train.json (16)
|   |-- polliFormer-utils.json (11)
|   |-- polliFormer.json (13)
|   |-- polliOS-codeOnly.json (13)
|   |-- polliOS.json (13)
|   |-- rope-vit.json (15)
|   |-- sam2.json (12)
|   |-- sam2_demo.json (15)
|   |-- vggt.json (15)
|   \-- wandb_sweep.json (12)
\-- export_repo_to_txt.py (860)
</dirtree>
  <files>
    <file path="export_repo_to_txt.py">import platform
import os
import json
import sys
import nbformat
from nbconvert import MarkdownExporter
from nbconvert.preprocessors import ClearOutputPreprocessor
import xml.etree.ElementTree as ET
from xml.dom import minidom # For pretty printing XML

# Base paths for different operating systems
BASE_PATHS = {
    &quot;Darwin&quot;: &quot;/Users/carbon/repo&quot;,  # macOS
    &quot;Windows&quot;: r&quot;C:\Users\front\Documents\GitHub&quot;,
    &quot;Linux&quot;: &quot;/home/caleb/repo&quot;  # Linux default
}

# Known Unix-style paths to convert
UNIX_PATHS_TO_CONVERT = [
    &quot;/home/caleb/repo&quot;,
    &quot;/home/caleb/Documents/GitHub/&quot;,
    &quot;/Users/caleb/Documents/GitHub&quot;
]

def convert_absolute_path(path: str) -&gt; str:
    &quot;&quot;&quot;
    Convert an absolute path from one system's format to another.
    Handles known path patterns and converts them appropriately.
    &quot;&quot;&quot;
    if not isinstance(path, str) or not os.path.isabs(path):
        return path

    # Get the appropriate base path for the current system
    target_base = get_base_path()

    # Try to convert from known Unix paths
    for unix_path in UNIX_PATHS_TO_CONVERT:
        if path.startswith(unix_path):
            relative_path = path[len(unix_path):].lstrip(&quot;/&quot;)
            return os.path.join(target_base, relative_path)

    return path

class PathConverter:
    @staticmethod
    def to_system_path(path: str) -&gt; str:
        &quot;&quot;&quot;
        Convert the given path to the current system's native format.
        On Windows, forward slashes become backslashes, etc.
        &quot;&quot;&quot;
        if not isinstance(path, str):
             return path

        if platform.system() == &quot;Windows&quot;:
            if path.startswith(&quot;/&quot;):
                is_likely_unix_abs = len(path) &gt; 1 and path[1] != ':'
                if is_likely_unix_abs:
                    path = path.lstrip(&quot;/&quot;)
                    if &quot;:&quot; not in path:
                       if not os.path.splitdrive(path)[0]:
                           path = &quot;C:\\&quot; + path
            return path.replace(&quot;/&quot;, &quot;\\&quot;)
        else:
            return path.replace(&quot;\\&quot;, &quot;/&quot;)

    @staticmethod
    def normalize_config_paths(config: dict) -&gt; dict:
        &quot;&quot;&quot;
        Normalize all relevant paths in the config to the current system's format.
        Also normalizes paths within lists.
        &quot;&quot;&quot;
        if 'repo_root' in config and config['repo_root']:
            # First convert the absolute path to the current system's format
            config['repo_root'] = convert_absolute_path(config['repo_root'])
            # Then normalize the path format (slashes)
            config['repo_root'] = PathConverter.to_system_path(config['repo_root'])
            # Finally ensure it's absolute
            config['repo_root'] = os.path.abspath(config['repo_root'])

        # Convert path lists
        path_keys = ['dirs_to_traverse', 'subdirs_to_exclude', 'files_to_exclude',
                     'files_to_include', 'additional_dirs_to_traverse', 'dirs_for_tree']
        for key in path_keys:
            if key in config and isinstance(config[key], list):
                normalized_paths = []
                for p in config[key]:
                    if isinstance(p, str) and not p.startswith(('http:', 'https:')):
                        # Convert absolute paths first
                        if os.path.isabs(p):
                            p = convert_absolute_path(p)
                        # Then normalize the format
                        normalized_paths.append(PathConverter.to_system_path(p))
                    else:
                        normalized_paths.append(p)
                config[key] = normalized_paths

        # Ensure additional_dirs_to_traverse contains absolute paths
        if 'additional_dirs_to_traverse' in config:
            abs_additional_dirs = []
            for p in config.get('additional_dirs_to_traverse', []):
                if isinstance(p, str):
                    if os.path.isabs(p):
                        # Convert absolute paths to current system format
                        p = convert_absolute_path(p)
                        abs_additional_dirs.append(p)
                    else:
                        print(f&quot;Error: Path '{p}' in 'additional_dirs_to_traverse' is not absolute. Skipping.&quot;)
            config['additional_dirs_to_traverse'] = abs_additional_dirs

        return config

class RepoExporter:
    def __init__(self, config: dict, config_filename: str = None):
        &quot;&quot;&quot;
        Initialize the RepoExporter with the given config dictionary.
        :param config: The loaded or constructed configuration object.
        :param config_filename: Optional name of the config file used, for output labeling.
        &quot;&quot;&quot;
        config = PathConverter.normalize_config_paths(config) # Apply normalization early

        self.repo_root = config['repo_root']
        self.export_name = config['export_name']
        # self.delimiter = config['delimiter'] # No longer needed for XML
        self.dirs_to_traverse = config.get('dirs_to_traverse', [])
        self.include_top_level_files = config.get('include_top_level_files', 'none') # Default to none if missing
        self.included_extensions = config.get('included_extensions', []) # Default empty list
        self.subdirs_to_exclude = config.get('subdirs_to_exclude', [])
        self.files_to_exclude = config.get('files_to_exclude', [])
        self.depth = config.get('depth', -1)
        self.dump_config = config.get('dump_config', False)
        self.exhaustive_dir_tree = config.get('exhaustive_dir_tree', False)
        self.files_to_include = config.get('files_to_include', [])
        self.additional_dirs_to_traverse = config.get('additional_dirs_to_traverse', []) # New field
        self.always_exclude_patterns = config.get('always_exclude_patterns', ['export.txt'])
        self.dirs_for_tree = config.get('dirs_for_tree', [])

        # Hardcoded blacklists
        self.blacklisted_dirs = ['__pycache__', '.git', '.venv', '.vscode']
        self.blacklisted_files = ['uv.lock', 'LICENSE']

        # Runtime attributes
        self.config_filename = config_filename
        self.output_file = self.get_output_file_path()
        self.files_to_exclude.append(os.path.basename(self.output_file)) # Exclude self

        # --- Content Buffering ---
        # Store tuples: (display_path, absolute_path, content, is_ipynb_converted)
        # display_path is relative for files under repo_root, absolute otherwise
        self.buffered_files = []
        self.exported_files_count = {}
        self.total_lines = 0
        self.line_counts_by_file = {} # Uses display_path as key
        self.line_counts_by_dir = {}  # Uses display_path segments as keys

    def get_output_file_path(self) -&gt; str:
        &quot;&quot;&quot;
        Return the absolute path for the export file, handling relative/absolute export_name.
        &quot;&quot;&quot;
        path = PathConverter.to_system_path(self.export_name)
        if os.path.isabs(path):
            return path
        else:
            # Ensure repo_root is valid before joining
            if not self.repo_root or not os.path.isdir(self.repo_root):
                 raise ValueError(f&quot;Repo root '{self.repo_root}' is invalid or not specified.&quot;)
            return os.path.abspath(os.path.join(self.repo_root, path))

    def convert_ipynb_to_md(self, notebook_content: str) -&gt; str:
        &quot;&quot;&quot;
        Convert an IPython notebook JSON string to Markdown, clearing outputs.
        &quot;&quot;&quot;
        try:
            notebook = nbformat.reads(notebook_content, as_version=4)
            clear_output = ClearOutputPreprocessor()
            processed_notebook, _ = clear_output.preprocess(notebook, {})
            markdown_exporter = MarkdownExporter()
            markdown_content, _ = markdown_exporter.from_notebook_node(processed_notebook)
            return markdown_content
        except Exception as e:
            print(f&quot;Error converting ipynb: {e}&quot;)
            return f&quot;&lt;!-- Error converting notebook: {e} --&gt;\n{notebook_content}&quot; # Return original content with error comment

    def buffer_file_content(self, absolute_path: str):
        &quot;&quot;&quot;
        Reads, processes (ipynb), and stores file content in memory buffer.
        Updates line counts and statistics.
        Determines the display path (relative or absolute).
        &quot;&quot;&quot;
        if not os.path.isfile(absolute_path):
            print(f&quot;Warning: Skipping non-file path provided to buffer_file_content: {absolute_path}&quot;)
            return

        # Determine display path (relative if under repo_root, else absolute)
        display_path = absolute_path
        if absolute_path.startswith(self.repo_root + os.sep):
            display_path = os.path.relpath(absolute_path, self.repo_root)
        display_path = PathConverter.to_system_path(display_path) # Normalize for consistency

        # --- Apply Filters ---
        if self.should_exclude_file(absolute_path, display_path):
             # print(f&quot;Debug: Excluding file based on rules: {display_path}&quot;) # Debugging line
             return

        file_extension = os.path.splitext(absolute_path)[1]
        if self.included_extensions != 'all' and file_extension not in self.included_extensions:
             # print(f&quot;Debug: Excluding file based on extension: {display_path}&quot;) # Debugging line
             return
        # --- End Filters ---

        try:
            with open(absolute_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()

            is_ipynb_converted = False
            if file_extension == '.ipynb':
                content = self.convert_ipynb_to_md(content)
                is_ipynb_converted = True

            # Check if already buffered (can happen with files_to_include)
            if any(bf[1] == absolute_path for bf in self.buffered_files):
                 return # Already processed

            # Update stats
            extension = os.path.splitext(absolute_path)[1] or &quot;._no_extension_&quot;
            self.exported_files_count[extension] = self.exported_files_count.get(extension, 0) + 1
            line_count = content.count('\n') + 1
            self.total_lines += line_count
            self.line_counts_by_file[display_path] = line_count

            # Store
            self.buffered_files.append((display_path, absolute_path, content, is_ipynb_converted))
            # print(f&quot;Debug: Buffering file: {display_path}&quot;) # Debugging line

        except Exception as e:
            print(f&quot;Error reading file {absolute_path}: {e}&quot;)

    def should_exclude_file(self, absolute_path: str, display_path: str) -&gt; bool:
        &quot;&quot;&quot;
        Check if a file should be excluded based on various rules.
        Uses absolute_path for existence checks, display_path for pattern matching if relative.
        &quot;&quot;&quot;
        filename = os.path.basename(absolute_path)

        # 1. Hardcoded blacklist (basename)
        if filename in self.blacklisted_files:
            return True

        # 2. Always exclude patterns (basename suffix)
        if any(filename.endswith(pattern) for pattern in self.always_exclude_patterns):
            return True

        # 3. files_to_exclude (relative path suffix match *if* display_path is relative)
        # This rule is tricky for external files. Let's apply it only if the display_path looks relative.
        is_relative = not os.path.isabs(display_path)
        if is_relative and any(display_path.endswith(exclude) for exclude in self.files_to_exclude):
             return True

        # 4. Output file check (basename) - redundant? Added to files_to_exclude in init.
        if filename == os.path.basename(self.output_file):
             return True

        return False

    def should_exclude_dir(self, absolute_dir_path: str) -&gt; bool:
        &quot;&quot;&quot;
        Check if a directory should be excluded during traversal.
        Relies on paths relative to repo_root for subdirs_to_exclude.
        &quot;&quot;&quot;
        dir_name = os.path.basename(absolute_dir_path)

        # 1. Hardcoded blacklist (basename)
        if dir_name in self.blacklisted_dirs:
            return True

        # 2. subdirs_to_exclude (relative path prefix match *if* under repo_root)
        # This won't reliably exclude external dirs based on relative patterns.
        if absolute_dir_path.startswith(self.repo_root + os.sep):
            relative_path = os.path.relpath(absolute_dir_path, self.repo_root)
            relative_path = PathConverter.to_system_path(relative_path) # Normalize for comparison
            if any(relative_path.startswith(PathConverter.to_system_path(exclude.rstrip('*' + os.sep)))
                   for exclude in self.subdirs_to_exclude):
                return True

        return False

    def traverse_directory(self, relative_start_dir: str):
        &quot;&quot;&quot;
        Walk through a directory *relative* to repo_root, buffering eligible files.
        &quot;&quot;&quot;
        abs_start_dir = os.path.join(self.repo_root, relative_start_dir)
        abs_start_dir = os.path.abspath(abs_start_dir) # Ensure absolute

        if not os.path.isdir(abs_start_dir):
            print(f&quot;Warning: Directory '{relative_start_dir}' ({abs_start_dir}) does not exist relative to repo root. Skipping.&quot;)
            return

        print(f&quot;Traversing internal dir: {relative_start_dir}&quot;)
        initial_depth = abs_start_dir.count(os.sep)

        for root, dirs, files in os.walk(abs_start_dir, topdown=True):
            # Depth limiting
            current_depth = root.count(os.sep) - initial_depth
            if self.depth != -1 and current_depth &gt;= self.depth:
                dirs[:] = [] # Don't recurse further
                continue # Skip files at this level too if depth limit is strict

            # Directory exclusion
            # Must check based on absolute path for reliability
            dirs[:] = [d for d in dirs if not self.should_exclude_dir(os.path.join(root, d))]

            # Buffer eligible files
            for file in files:
                abs_file_path = os.path.join(root, file)
                self.buffer_file_content(abs_file_path)


    def traverse_external_directory(self, abs_start_dir: str):
        &quot;&quot;&quot;
        Walk through an *absolute* external directory path, buffering eligible files.
        &quot;&quot;&quot;
        abs_start_dir = os.path.abspath(PathConverter.to_system_path(abs_start_dir)) # Ensure absolute and normalized

        if not os.path.isdir(abs_start_dir):
            print(f&quot;Warning: External directory '{abs_start_dir}' does not exist or is not a directory. Skipping.&quot;)
            return

        print(f&quot;Traversing external dir: {abs_start_dir}&quot;)
        initial_depth = abs_start_dir.count(os.sep)

        for root, dirs, files in os.walk(abs_start_dir, topdown=True):
            # Depth limiting
            current_depth = root.count(os.sep) - initial_depth
            if self.depth != -1 and current_depth &gt;= self.depth:
                dirs[:] = []
                continue

            # Directory exclusion (using same logic, limited for external paths)
            dirs[:] = [d for d in dirs if not self.should_exclude_dir(os.path.join(root, d))]

            # Buffer eligible files
            for file in files:
                abs_file_path = os.path.join(root, file)
                self.buffer_file_content(abs_file_path)


    def include_specific_files(self):
        &quot;&quot;&quot;
        Process the `files_to_include` list, buffering eligible files.
        Supports absolute paths and paths relative to repo_root.
        &quot;&quot;&quot;
        if not self.files_to_include:
            return

        print(&quot;Processing specific files to include...&quot;)
        for file_path_config in self.files_to_include:
             # Handle potential normalization issues if path wasn't normalized correctly
             file_path_config = PathConverter.to_system_path(file_path_config)

             if os.path.isabs(file_path_config):
                 # Absolute path directly
                 abs_path = os.path.abspath(file_path_config)
                 if os.path.isfile(abs_path):
                     self.buffer_file_content(abs_path)
                 else:
                     print(f&quot;Warning: Specified absolute file to include not found or not a file: {abs_path}&quot;)
             else:
                 # Relative path (assume relative to repo_root)
                 abs_path = os.path.abspath(os.path.join(self.repo_root, file_path_config))
                 if os.path.isfile(abs_path):
                     self.buffer_file_content(abs_path)
                 else:
                     # Maybe it was intended as relative but is outside? The old walk logic was flawed.
                     # Let's just check if it exists relative to repo_root.
                     print(f&quot;Warning: Specified relative file to include not found relative to repo root: {file_path_config} (resolved to {abs_path})&quot;)


    def should_include_in_tree(self, abs_dir_path: str) -&gt; bool:
        &quot;&quot;&quot;
        Determine if a directory should appear in the directory tree output.
        Only considers directories under repo_root for now.
        &quot;&quot;&quot;
        # Only include dirs under repo_root in the tree for now
        if not abs_dir_path.startswith(self.repo_root + os.sep) and abs_dir_path != self.repo_root:
             return False

        dir_name = os.path.basename(abs_dir_path)

        # Basic exclusions
        if dir_name in self.blacklisted_dirs or dir_name.startswith('.'):
            return False

        # Apply filtering only if not exhaustive
        if not self.exhaustive_dir_tree:
            if self.should_exclude_dir(abs_dir_path):
                return False

            # Check if it's under a traversed path OR is a top-level dir containing included files
            is_under_traversed = False
            if self.dirs_to_traverse:
                 for d in self.dirs_to_traverse:
                      allowed_dir = os.path.abspath(os.path.join(self.repo_root, d))
                      if abs_dir_path == allowed_dir or abs_dir_path.startswith(allowed_dir + os.sep):
                           is_under_traversed = True
                           break
            else:
                 # If dirs_to_traverse is empty, maybe default to including all non-excluded? Or only top-level?
                 # Let's assume if dirs_to_traverse is empty, only top-level things explicitly included count.
                 # This behavior needs refinement. For now, let's require it to be under a traversed path if specified.
                 # If dirs_to_traverse is empty, maybe allow if files were included from it?
                 # Let's default to False if dirs_to_traverse is specified and it's not under one.
                 if self.dirs_to_traverse and not is_under_traversed:
                      # Check if top level files were included from this dir (only applies if abs_dir_path is repo_root)
                      if abs_dir_path == self.repo_root and self.include_top_level_files != 'none':
                           pass # Allow root if top level files are included
                      else:
                           return False


        # Specific tree filtering
        if self.dirs_for_tree:
            relative_path = os.path.relpath(abs_dir_path, self.repo_root)
            relative_path = PathConverter.to_system_path(relative_path)
            if not any(relative_path == d or relative_path.startswith(d + os.sep)
                       for d in self.dirs_for_tree):
                 # Check if it IS one of the dirs_for_tree exactly
                 if relative_path not in self.dirs_for_tree and relative_path != '.': # Allow root if '.' is not excluded
                      return False


        # Final check: Does this directory contain any exported files or subdirs that do?
        rel_dir_path = os.path.relpath(abs_dir_path, self.repo_root)
        rel_dir_path = PathConverter.to_system_path(rel_dir_path)
        if rel_dir_path == '.': rel_dir_path = '' # Root representation

        has_exported_content = False
        for display_path in self.line_counts_by_file.keys():
             if display_path.startswith(rel_dir_path + os.sep) or (rel_dir_path == '' and os.sep not in display_path):
                  has_exported_content = True
                  break
        if not has_exported_content:
             # Check subdirs recursively? This could be slow. Let's rely on line_counts_by_dir.
             if rel_dir_path not in self.line_counts_by_dir or self.line_counts_by_dir[rel_dir_path] == 0:
                  # If the dir itself has no lines counted, check if any *sub*dirs listed have counts
                  # This is getting complex. Let's simplify: A dir appears if it wasn't excluded AND
                  # it contains an exported file OR it's an ancestor of a dir that contains an exported file.
                  # The line count aggregation should capture this.
                  # A dir MUST have a line count &gt; 0 in self.line_counts_by_dir OR contain a file with count &gt; 0
                  # directly within it.
                  direct_file_count = sum(count for path, count in self.line_counts_by_file.items()
                                          if os.path.dirname(path) == rel_dir_path or (rel_dir_path == '' and os.sep not in path))

                  if self.line_counts_by_dir.get(rel_dir_path, 0) == 0 and direct_file_count == 0:
                       return False # No content ultimately included from here

        return True


    def compute_directory_line_counts(self):
        &quot;&quot;&quot;
        Compute aggregated line counts for directories based on buffered files.
        Uses display_path keys.
        &quot;&quot;&quot;
        self.line_counts_by_dir = {}
        # print(&quot;Computing line counts from buffered files:&quot;) # Debug
        # for display_path, _, _, _ in self.buffered_files: # Debug
        #      print(f&quot;- {display_path}: {self.line_counts_by_file.get(display_path, 0)}&quot;) # Debug

        for display_path, lines in self.line_counts_by_file.items():
            # Only compute for relative paths within the repo root for the tree
            if os.path.isabs(display_path):
                 continue

            parts = display_path.split(os.sep)
            # Aggregate counts up the directory chain
            for i in range(1, len(parts)):
                dir_path_key = os.sep.join(parts[:i])
                self.line_counts_by_dir[dir_path_key] = self.line_counts_by_dir.get(dir_path_key, 0) + lines

        # print(&quot;Computed directory line counts:&quot;, self.line_counts_by_dir) # Debug


    def get_line_count_for_path(self, display_path: str) -&gt; int:
        &quot;&quot;&quot;
        Return the line count for a file (from line_counts_by_file)
        or directory (from line_counts_by_dir) using its display_path.
        &quot;&quot;&quot;
        # Check if it's likely a directory path based on the structure or presence in line_counts_by_dir
        # This is heuristic. A file could have the same name as a directory key.
        # Let's prioritize file count if it exists, otherwise dir count.
        count = self.line_counts_by_file.get(display_path, 0)
        if count &gt; 0:
            return count
        return self.line_counts_by_dir.get(display_path, 0)


    def get_directory_tree(self, abs_directory: str, prefix: str = '', current_depth: int = 0, lines_word_used: bool = False):
        &quot;&quot;&quot;
        Generate the ASCII directory tree string, showing only included items.
        Operates on paths relative to repo_root for display.
        &quot;&quot;&quot;
        # Tree generation limited by self.depth relative to repo_root start
        if self.depth != -1 and current_depth &gt; self.depth:
            return f&quot;{prefix}   (...max depth reached...)\n&quot;, lines_word_used

        tree_str = ''
        try:
            items = sorted(os.listdir(abs_directory))
        except FileNotFoundError:
            return &quot;&quot;, lines_word_used # Directory doesn't exist

        visible_items = []
        for item in items:
            item_abs_path = os.path.join(abs_directory, item)
            if os.path.isdir(item_abs_path):
                if self.should_include_in_tree(item_abs_path):
                     visible_items.append(item)
            elif os.path.isfile(item_abs_path):
                 # Check if this file was actually buffered (meaning it passed all filters)
                 item_display_path = os.path.relpath(item_abs_path, self.repo_root)
                 item_display_path = PathConverter.to_system_path(item_display_path)
                 if item_display_path in self.line_counts_by_file:
                     visible_items.append(item)

        for i, item in enumerate(visible_items):
            item_abs_path = os.path.join(abs_directory, item)
            item_rel_path = os.path.relpath(item_abs_path, self.repo_root) # Path relative to repo root for display
            item_rel_path = PathConverter.to_system_path(item_rel_path)

            line_count = self.get_line_count_for_path(item_rel_path)

            # Use ASCII connectors
            connector = '|-- ' if i &lt; len(visible_items) - 1 else '\\-- '

            # Add line count info
            line_str = &quot;&quot;
            if line_count &gt; 0:
                 if not lines_word_used:
                     line_str = f&quot; ({line_count} lines)&quot;
                     lines_word_used = True
                 else:
                     line_str = f&quot; ({line_count})&quot;
            elif os.path.isdir(item_abs_path): # Show (0) for dirs known to be empty
                 line_str = &quot; (0)&quot;


            tree_str += f&quot;{prefix}{connector}{item}{line_str}\n&quot;

            if os.path.isdir(item_abs_path):
                sub_prefix = prefix + (&quot;|   &quot; if i &lt; len(visible_items) - 1 else &quot;    &quot;)
                subtree_str, lines_word_used = self.get_directory_tree(item_abs_path, sub_prefix, current_depth + 1, lines_word_used)
                tree_str += subtree_str

        return tree_str, lines_word_used

    def _build_files_xml_recursive(self, parent_element, path_prefix, files_in_dir):
        &quot;&quot;&quot;Helper to recursively build nested XML for files.&quot;&quot;&quot;
        # Separate files and directories at the current level
        current_level_files = {}
        subdirs = {}
        prefix_len = len(path_prefix) if path_prefix else -1

        for display_path, abs_path, content, is_ipynb in files_in_dir:
             # Check if file is directly in this directory or in a subdirectory
             if os.sep in display_path[prefix_len+1:]:
                 # Subdirectory file
                 subdir_name = display_path[prefix_len+1:].split(os.sep)[0]
                 subdir_key = os.path.join(path_prefix, subdir_name) if path_prefix else subdir_name
                 if subdir_key not in subdirs:
                     subdirs[subdir_key] = []
                 subdirs[subdir_key].append((display_path, abs_path, content, is_ipynb))
             else:
                 # File in current directory
                 current_level_files[display_path] = (abs_path, content, is_ipynb)

        # Add files at the current level
        for display_path, (abs_path, content, is_ipynb) in sorted(current_level_files.items()):
             file_elem = ET.SubElement(parent_element, &quot;file&quot;, path=display_path)
             if is_ipynb:
                 file_elem.set(&quot;converted_from_ipynb&quot;, &quot;true&quot;)
             file_elem.text = content # Consider CDATA if content has XML special chars

        # Recurse into subdirectories
        for subdir_key, files_list in sorted(subdirs.items()):
             subdir_name = os.path.basename(subdir_key)
             # Use 'dir' tag for directories within repo_root, maybe 'external_dir' otherwise?
             # For simplicity, let's just use 'dir' for now.
             dir_elem = ET.SubElement(parent_element, &quot;dir&quot;, path=subdir_key)
             self._build_files_xml_recursive(dir_elem, subdir_key, files_list)


    def export_repo(self):
        &quot;&quot;&quot;
        Main export routine: Gathers files, computes counts, generates XML output.
        &quot;&quot;&quot;
        print(f&quot;Starting export for repo: {self.repo_root}&quot;)

        # 1. Process top-level files if requested
        if self.include_top_level_files != 'none':
            print(&quot;Processing top-level files...&quot;)
            try:
                 items = os.listdir(self.repo_root)
                 for item in items:
                     abs_item_path = os.path.join(self.repo_root, item)
                     if os.path.isfile(abs_item_path):
                         # Check if specific files listed or 'all'
                         is_included_top_level = (
                             self.include_top_level_files == 'all' or
                             (isinstance(self.include_top_level_files, list) and item in self.include_top_level_files)
                         )
                         if is_included_top_level:
                             self.buffer_file_content(abs_item_path)
            except FileNotFoundError:
                 print(f&quot;Error: Repo root directory not found: {self.repo_root}&quot;)
                 return
            except Exception as e:
                 print(f&quot;Error processing top-level files: {e}&quot;)


        # 2. Traverse internal directories
        if self.dirs_to_traverse:
            for rel_dir in self.dirs_to_traverse:
                self.traverse_directory(rel_dir)

        # 3. Traverse additional external directories
        if self.additional_dirs_to_traverse:
            for abs_dir in self.additional_dirs_to_traverse:
                self.traverse_external_directory(abs_dir)

        # 4. Include specific files
        self.include_specific_files() # This now uses buffer_file_content

        # --- Post-Gathering Steps ---
        print(&quot;File gathering complete. Computing stats and generating output...&quot;)

        # 5. Compute directory line counts (based on buffered files)
        self.compute_directory_line_counts()

        # 6. Build the directory tree string (only for repo_root content)
        directory_tree_str, _ = self.get_directory_tree(self.repo_root, current_depth=0, lines_word_used=False)

        # 7. Generate XML Output
        root_xml = ET.Element(&quot;codebase_context&quot;)

        # Config (Optional)
        if self.dump_config:
            config_tag_label = self.config_filename if self.config_filename else &quot;dynamic-config&quot;
            config_elem = ET.SubElement(root_xml, &quot;config&quot;, source=config_tag_label)
            try:
                 # Create a serializable version of the config
                 config_data = {k: v for k, v in self.__dict__.items() if not k.startswith('_') and k not in ['buffered_files']}
                 config_elem.text = json.dumps(config_data, indent=2)
            except Exception as e:
                 config_elem.text = f&quot;Error serializing config: {e}&quot;


        # Directory Tree
        dirtree_elem = ET.SubElement(root_xml, &quot;dirtree&quot;, root=self.repo_root)
        dirtree_elem.text = directory_tree_str

        # Files (Nested Structure)
        files_root_elem = ET.SubElement(root_xml, &quot;files&quot;)

        # Separate files by origin for potential grouping
        repo_files = []
        external_files = []
        for bf in self.buffered_files:
             display_path, abs_path, _, _ = bf
             if abs_path.startswith(self.repo_root + os.sep) or abs_path == self.repo_root: # Should handle files in root itself
                 repo_files.append(bf)
             else:
                 external_files.append(bf)

        # Add repo files nested under repo_root structure
        self._build_files_xml_recursive(files_root_elem, &quot;&quot;, repo_files)

        # Add external files (maybe under a separate tag or just top-level in &lt;files&gt;?)
        if external_files:
             # Option 1: Flat list for external
             # for display_path, abs_path, content, is_ipynb in sorted(external_files):
             #     file_elem = ET.SubElement(files_root_elem, &quot;external_file&quot;, path=display_path) # Use display_path (which is absolute here)
             #     if is_ipynb:
             #         file_elem.set(&quot;converted_from_ipynb&quot;, &quot;true&quot;)
             #     file_elem.text = content

             # Option 2: Group by external root (more complex, requires tracking origin root)
             # Let's stick to flat list for external files for simplicity now.
             ext_group = ET.SubElement(files_root_elem, &quot;external_files&quot;)
             for display_path, abs_path, content, is_ipynb in sorted(external_files, key=lambda x: x[0]):
                  file_elem = ET.SubElement(ext_group, &quot;file&quot;, path=display_path) # display_path is absolute here
                  if is_ipynb:
                       file_elem.set(&quot;converted_from_ipynb&quot;, &quot;true&quot;)
                  file_elem.text = content


        # Pretty print XML
        try:
            rough_string = ET.tostring(root_xml, 'utf-8')
            reparsed = minidom.parseString(rough_string)
            pretty_xml_str = reparsed.toprettyxml(indent=&quot;  &quot;, encoding='utf-8')
            xml_content_to_write = pretty_xml_str.decode('utf-8')
        except Exception as e:
             print(f&quot;Warning: Could not pretty-print XML, writing raw. Error: {e}&quot;)
             xml_content_to_write = ET.tostring(root_xml, encoding='unicode')


        # Write to file
        try:
            with open(self.output_file, 'w', encoding='utf-8') as f:
                f.write(xml_content_to_write)
            print(f&quot;\nExported to: {self.output_file}&quot;)
        except Exception as e:
            print(f&quot;\nError writing output file {self.output_file}: {e}&quot;)


        # Final Summary
        print(f&quot;Total number of lines exported: {self.total_lines}&quot;)
        print(&quot;Exported file counts by extension:&quot;)
        if self.exported_files_count:
             for ext, count in sorted(self.exported_files_count.items()):
                 print(f&quot;  {ext}: {count}&quot;)
        else:
             print(&quot;  (No files exported)&quot;)


# --- Helper Functions ---

def get_base_path() -&gt; str:
    &quot;&quot;&quot;Determine the base path for resolving relative repo_root paths.&quot;&quot;&quot;
    if '--pop' in sys.argv:
        return PathConverter.to_system_path('/home/caleb/Documents/GitHub/')
    elif platform.system() == &quot;Darwin&quot;:
        return PathConverter.to_system_path(BASE_PATHS[&quot;Darwin&quot;])
    elif platform.system() == &quot;Windows&quot;:
        return PathConverter.to_system_path(BASE_PATHS[&quot;Windows&quot;])
    else: # Linux default
        return PathConverter.to_system_path(BASE_PATHS[&quot;Linux&quot;])

def load_config(config_filename: str) -&gt; dict:
    &quot;&quot;&quot;Load configuration from a JSON file.&quot;&quot;&quot;
    # Append .json if not present
    if not config_filename.lower().endswith('.json'):
        config_filename += '.json'

    # Assume config file is relative to the configs dir under the script's base util dir
    script_dir = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(script_dir, &quot;configs&quot;, config_filename)
    config_path = PathConverter.to_system_path(config_path)

    # Fallback: check relative to base_path if not found near script
    if not os.path.exists(config_path):
         base_path = get_base_path()
         # This assumes a structure like base_path/utils/export_repo/configs
         utils_path = os.path.join(base_path, &quot;utils&quot;) if base_path.endswith(&quot;GitHub&quot;) else base_path
         config_path_alt = os.path.join(utils_path, &quot;export_repo&quot;, &quot;configs&quot;, config_filename)
         config_path_alt = PathConverter.to_system_path(config_path_alt)
         if os.path.exists(config_path_alt):
              config_path = config_path_alt
         else:
              # Last try: relative to current working directory
              config_path_cwd = PathConverter.to_system_path(config_filename)
              if os.path.exists(config_path_cwd):
                    config_path = config_path_cwd
              else:
                   raise FileNotFoundError(f&quot;Config file not found: {config_filename} (checked near script, in base path structure, and CWD)&quot;)

    try:
        with open(config_path, 'r', encoding='utf-8') as config_file:
            config = json.load(config_file)
        return config
    except json.JSONDecodeError as e:
        print(f&quot;Error decoding JSON from {config_path}: {e}&quot;)
        raise
    except Exception as e:
        print(f&quot;Error loading config {config_path}: {e}&quot;)
        raise

def get_default_config(repo_root_path: str) -&gt; dict:
    &quot;&quot;&quot;Provide a default config for direct repository path usage.&quot;&quot;&quot;
    repo_root_path = PathConverter.to_system_path(os.path.abspath(repo_root_path))
    return {
        'repo_root': repo_root_path,
        'export_name': f&quot;{os.path.basename(repo_root_path)}_export.xml&quot;, # Default to xml
        'dirs_to_traverse': ['.'], # Traverse all from root by default
        'include_top_level_files': 'none', # Let dirs_to_traverse = ['.'] handle it
        'included_extensions': 'all',
        'subdirs_to_exclude': [], # Start minimal
        'files_to_exclude': [],
        'depth': 10, # Sensible default depth
        'exhaustive_dir_tree': False,
        'files_to_include': [],
        'additional_dirs_to_traverse': [],
        'always_exclude_patterns': ['export.xml', '.DS_Store', '*.pyc', '*.swp', '*.swo'], # Basic defaults
        'dump_config': False
    }

def main():
    args = sys.argv[1:]
    config_arg = None
    pop_flag = '--pop' in args
    dump_config_flag = '--dump-config' in args

    # Find the first non-flag argument
    for arg in args:
        if not arg.startswith('--'):
            config_arg = arg
            break

    if not config_arg:
        print(&quot;Usage: python export_repo_to_txt.py [--pop] [--dump-config] &lt;config_filename | repo_root_path&gt;&quot;)
        sys.exit(1)

    config = {}
    config_filename_label = None

    # Detect if arg is a directory or a config file name
    potential_path = PathConverter.to_system_path(config_arg)
    if os.path.isdir(potential_path):
        print(f&quot;Argument '{config_arg}' is a directory. Using default config.&quot;)
        config = get_default_config(potential_path)
        config_filename_label = f&quot;default_for_{os.path.basename(potential_path)}&quot;
    else:
        # Assume it's a config file name
        config_filename = config_arg
        if not config_filename.lower().endswith('.json'):
            config_filename += '.json'
        try:
            config = load_config(config_filename)
            config_filename_label = config_filename
            print(f&quot;Loaded config file: {config_filename}&quot;)
        except FileNotFoundError as e:
            print(f&quot;Error: {e}&quot;)
            sys.exit(1)
        except Exception as e:
            print(f&quot;Error loading or parsing config: {e}&quot;)
            sys.exit(1)

    # --pop flag is now handled internally by get_base_path, but we might need
    # to re-normalize if the repo_root was changed by it AFTER initial load/normalize.
    # Let's ensure repo_root is absolute and correct *before* RepoExporter init.
    # Normalization now happens inside RepoExporter.__init__

    # Set dump_config based on flag, potentially overriding config file value
    if dump_config_flag:
        config['dump_config'] = True

    try:
        exporter = RepoExporter(config, config_filename=config_filename_label)
        exporter.export_repo()
    except ValueError as e:
         print(f&quot;Configuration Error: {e}&quot;)
         sys.exit(1)
    except Exception as e:
        print(f&quot;An unexpected error occurred: {e}&quot;)
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == &quot;__main__&quot;:
    main()</file>
    <dir path="configs">
      <file path="configs/autocrop.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ibrida/ibrida/s3/postprocess/autocrop&quot;,
    &quot;export_name&quot;: &quot;autocrop_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;utils&quot;, &quot;configs&quot;, &quot;models&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;, &quot;.md&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/autocropper.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/autocropper/src/autocropper&quot;,
    &quot;export_name&quot;: &quot;autocropper_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;utils&quot;, &quot;evaluation&quot;, &quot;models&quot;, &quot;/home/caleb/repo/ibrida/deprecated/ibridaV1/s3/postprocess/autocrop&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/autocropper/pyproject.toml&quot;, &quot;/home/caleb/repo/autocropper/README.md&quot;],
    &quot;files_to_exclude&quot;: [],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/bulk_dl.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/ibrida/ibrida&quot;,
  &quot;export_name&quot;: &quot;ibrida_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;s3/download&quot;, &quot;s3/download/utils&quot;],
  &quot;files_to_include&quot;: [&quot;s3_bulk_dl_v6.py&quot;, &quot;b2.py&quot;, &quot;config.py&quot;, &quot;file.py&quot;, &quot;graceful_shutdown.py&quot;, &quot;init.py&quot;, 
  &quot;monitoring.py&quot;, &quot;processing.py&quot;, &quot;internet_connectivity_checker.py&quot;, &quot;csv_schema.py&quot;, &quot;paths.py&quot;, &quot;chunk_postprocessor.py&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;, &quot;.properties&quot;, &quot;.sh&quot;, &quot;.xml&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;pkgs&quot;, &quot;test&quot;, &quot;fo_dataset&quot;, &quot;utils&quot;],
  &quot;files_to_exclude&quot;: [&quot;convert_multitask_dataset_to_mmlab2.py&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;other_pattern.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: false
}</file>
      <file path="configs/convnext.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/ConvNeXt&quot;,
  &quot;export_name&quot;: &quot;convnext_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;models&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;, &quot;.txt&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;__pycache__&quot;, &quot;.git&quot;, &quot;.venv&quot;, &quot;.vscode&quot;],
  &quot;files_to_exclude&quot;: [],
  &quot;always_exclude_patterns&quot;: [&quot;*.pyc&quot;, &quot;*.pyo&quot;, &quot;*.pyd&quot;, &quot;*.so&quot;, &quot;*.dylib&quot;, &quot;*.dll&quot;, &quot;*.log&quot;, &quot;*.swp&quot;, &quot;*.swo&quot;, &quot;*.DS_Store&quot;],
  &quot;depth&quot;: -1,
  &quot;exhaustive_dir_tree&quot;: true,
  &quot;dump_config&quot;: false
}
</file>
      <file path="configs/cosm-c360-data.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/cosm-c360-tools&quot;,
    &quot;export_name&quot;: &quot;cosm-c360-data_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;/datasets/dataZoo/clients/ladybird/batch_0/raw/&quot;],
    &quot;files_to_include&quot;: [&quot;/datasets/dataZoo/clients/ladybird/batch_0/raw/LADYBIRD.xml&quot;, &quot;/datasets/dataZoo/clients/ladybird/batch_0/raw/0H/0M/0S/meta.json&quot;],
    &quot;files_to_exclude&quot;: [&quot;ts_to_mp4.py&quot;, &quot;TODO.md&quot;],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;, &quot;.toml&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/cosm-c360-tools.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/cosm-c360-tools&quot;,
    &quot;export_name&quot;: &quot;cosm-c360-tools_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;src&quot;, &quot;docs&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/cosm-c360-tools/tests/test_data/ladybird/LADYBIRD.xml&quot;, &quot;/home/caleb/repo/cosm-c360-tools/tests/test_data/ladybird/0H/0M/0S/meta.json&quot;],
    &quot;files_to_exclude&quot;: [&quot;ts_to_mp4.py&quot;, &quot;TODO.md&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;, &quot;.toml&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/export_repo.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/utils/export_repo&quot;,
    &quot;export_name&quot;: &quot;export_repo_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;configs&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;files_to_include&quot;: [
    &quot;/home/caleb/repo/utils/README.md&quot;
    ],
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.json&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/ezmd.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ezmd&quot;,
    &quot;export_name&quot;: &quot;ezmd_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;ezmd&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;dev&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.env&quot;, &quot;.toml&quot;, &quot;.md&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;uv.lock&quot;, &quot;export.txt&quot;, &quot;.log&quot;, &quot;.venv&quot;, &quot;.gitignore&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/ezprompt.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ezprompt&quot;,
    &quot;export_name&quot;: &quot;ezprompt_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;ezprompt&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;.dev&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.env&quot;, &quot;.toml&quot;, &quot;.md&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;uv.lock&quot;, &quot;export.txt&quot;, &quot;.log&quot;, &quot;.venv&quot;, &quot;.gitignore&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/flash-attn.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/flash-attention/&quot;,
  &quot;export_name&quot;: &quot;flash-attn_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;flash_attn/modules&quot;, &quot;flash_attn/layers&quot;],
  &quot;include_top_level_files&quot;: &quot;none&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;, &quot;.txt&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;__pycache__&quot;, &quot;.git&quot;, &quot;.venv&quot;, &quot;.vscode&quot;],
  &quot;files_to_exclude&quot;: [],
  &quot;files_to_include&quot;: [&quot;/home/caleb/repo/flash-attention/README.md&quot;,
    &quot;/home/caleb/repo/flash-attention/usage.md&quot;,
    &quot;/home/caleb/repo/flash-attention/flash_attn/flash_attn_interface.py&quot;,
    &quot;/home/caleb/repo/flash-attention/flash_attn/models/vit.py&quot;,
    &quot;flash_attn/utils/distributed.py&quot;,
    &quot;/home/caleb/repo/flash-attention/tests/test_rotary.py&quot;,
    &quot;/home/caleb/repo/flash-attention/tests/layers/test_rotary.py&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;*.pyc&quot;, &quot;*.pyo&quot;, &quot;*.pyd&quot;, &quot;*.so&quot;, &quot;*.dylib&quot;, &quot;*.dll&quot;, &quot;*.log&quot;, &quot;*.swp&quot;, &quot;*.swo&quot;, &quot;*.DS_Store&quot;],
  &quot;depth&quot;: -1,
  &quot;exhaustive_dir_tree&quot;: true,
  &quot;dump_config&quot;: false
}
</file>
      <file path="configs/h5merge-mini.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ibrida/ibrida/hdf5/merge&quot;,
    &quot;export_name&quot;: &quot;hdf5_merge_mini_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [],
    &quot;files_to_include&quot;: [],
    &quot;files_to_exclude&quot;: [&quot;cli.py&quot;, &quot;h5_utils.py&quot;,&quot;config.py&quot;,&quot;input_diagnostics.py&quot;, &quot;output_diagnostics.py&quot;, &quot;manual_verify.py&quot;, &quot;split_adjustment.tmp.md&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/h5merge.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ibrida/ibrida/hdf5/merge&quot;,
    &quot;export_name&quot;: &quot;hdf5_merge_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;validation&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/ibrida/ibrida/hdf5/merge_tmp/h5dump_first_train.txt&quot;, &quot;/home/caleb/stausee-report.txt&quot;],
    &quot;files_to_exclude&quot;: [&quot;manual_verify.py&quot;, &quot;split_adjustment.tmp.md&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/h5pull.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ibrida/ibrida/hdf5&quot;,
    &quot;export_name&quot;: &quot;h5pull_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [],
    &quot;files_to_include&quot;: [&quot;configs/angio_v0_pop.yaml&quot;, &quot;configs/fixer/split0_1.yaml&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/hFormer0-serve.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/torchserve/hFormer0&quot;,
    &quot;export_name&quot;: &quot;polliFormer_serve_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;.&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;, &quot;.properties&quot;, &quot;.sh&quot;, &quot;.xml&quot;, &quot;.txt&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;pkgs&quot;, &quot;test&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/ibrida.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ibrida/src/ibrida&quot;,
    &quot;export_name&quot;: &quot;ibrida_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;generator&quot;, &quot;types&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/ibrida/pyproject.toml&quot;, &quot;/home/caleb/repo/ibrida/README.md&quot;],
    &quot;files_to_exclude&quot;: [],
    &quot;include_top_level_files&quot;: [&quot;pyproject.toml&quot;, &quot;README.md&quot;],
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.json&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;additional_dirs_to_traverse&quot;: [&quot;/home/caleb/repo/ibrida/extra/generator/configs&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/ibridaDB_v0r1_export.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ibridaDB/dbTools/export/v0&quot;,
    &quot;export_name&quot;: &quot;ibridaDB_v0r1_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;common&quot;, &quot;/home/caleb/repo/ibridaDB/docs&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/ibridaDB/docker/Dockerfile&quot;, &quot;/home/caleb/repo/ibridaDB/docker/stausee/docker-compose.yml&quot;,
    &quot;r1/wrapper_amphibia_all_exc_nonrg_sp_inc_oor_fas_elev.sh&quot;, &quot;r1/wrapper_angiospermae_all_exc_nonrg_sp_inc_oor_fas_elev.sh&quot;, &quot;r1/wrapper_aves_all_exc_nonrg_sp_inc_oor_fas_elev.sh&quot;, &quot;r1/wrapper_mammalia_all_exc_nonrg_sp.sh&quot;],
    &quot;files_to_exclude&quot;: [&quot;wrapper_angiospermae_all_exc_nonrg_sp.sh&quot;, &quot;wrapper_aves_all_exc_nonrg_sp.sh&quot;, &quot;wrapper_mammalia_all_exc_nonrg_sp_inc_oor_fas_elev.sh&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.sh&quot;, &quot;.sql&quot;, &quot;.md&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;.log&quot;, &quot;wrapper_*&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/ibridaDB_v0r1_ingest.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ibridaDB/dbTools/ingest/v0&quot;,
    &quot;export_name&quot;: &quot;ibridaDB_v0r1_ingest.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;common&quot;, &quot;r1&quot;, &quot;utils&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.sh&quot;, &quot;.sql&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;.log&quot;, &quot;wrapper_*&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/ibridaDB_v0rX.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ibridaDB/dbTools&quot;,
    &quot;export_name&quot;: &quot;ibridaDB_v0rX_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;ingest/v0&quot;, &quot;export/v0&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/ibridaDB/docker/stausee/docker-compose.yml&quot;, &quot;/home/caleb/repo/ibridaDB/docker/stausee/entrypoint.sh&quot;,
    &quot;/home/caleb/repo/ibridaDB/dbTools/README.md&quot;, &quot;/home/caleb/repo/ibridaDB/dbTools/FLOW.md&quot;, &quot;/home/caleb/repo/ibridaDB/dbTools/schema.md&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.sh&quot;, &quot;.md&quot;, &quot;.sql&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/ibrida_analysis.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ibrida/src/ibrida&quot;,
    &quot;export_name&quot;: &quot;ibrida_analysis_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;generator&quot;, &quot;types&quot;, &quot;analysis&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/ibrida/pyproject.toml&quot;, &quot;/home/caleb/repo/ibrida/README.md&quot;,
    &quot;/home/caleb/repo/ibrida/extra/generator/configs/prod/pta_non_rg_v0r1_hybrid.json&quot;],
    &quot;files_to_exclude&quot;: [],
    &quot;include_top_level_files&quot;: [&quot;pyproject.toml&quot;, &quot;README.md&quot;],
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.ipynb&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/ibrida_autocrop.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/ibrida/src/ibrida&quot;,
    &quot;export_name&quot;: &quot;ibrida_autocrop_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;generator&quot;, &quot;types&quot;, &quot;/home/caleb/repo/ibrida/deprecated/ibridaV1/s3/postprocess/autocrop&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/ibrida/pyproject.toml&quot;, &quot;/home/caleb/repo/ibrida/README.md&quot;,
    &quot;/home/caleb/repo/ibrida/extra/autocrop/mmdet_context.txt&quot;],
    &quot;files_to_exclude&quot;: [],
    &quot;include_top_level_files&quot;: [&quot;pyproject.toml&quot;, &quot;README.md&quot;],
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/ladybird_data.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/ladybird_failed_copy&quot;,
    &quot;export_name&quot;: &quot;ladybird_data_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;0H&quot;],
    &quot;subdirs_to_exclude&quot;: [],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.json&quot;, &quot;.xml&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/ladybird_failed_copy/LADYBIRD.xml&quot;],
    &quot;files_to_exclude&quot;: [],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;.egg-info&quot;, &quot;__pycache__&quot;, &quot;.DS_Store&quot;, &quot;:Zone.Identifier&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/metaformer.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/Polli-Brain/metaformer&quot;,
  &quot;export_name&quot;: &quot;metaformer_repo_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;models&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;, &quot;.md&quot;],
  &quot;exhaustive_dir_tree&quot;: false
}

</file>
      <file path="configs/metaformer1.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/Polli-Brain/metaformer&quot;,
  &quot;export_name&quot;: &quot;metaformer_repo_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;models&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;, &quot;.md&quot;],
  &quot;exhaustive_dir_tree&quot;: false,
  &quot;files_to_include&quot;: [&quot;experiment_log.md&quot;, &quot;base2.yaml&quot;]
}

</file>
      <file path="configs/metaformer2.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/Polli-Brain/metaformer&quot;,
  &quot;export_name&quot;: &quot;metaformer_repo_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;models&quot;, &quot;data&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
  &quot;exhaustive_dir_tree&quot;: false
}

</file>
      <file path="configs/model-explorer.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/Polli-Brain/model-explorer&quot;,
    &quot;export_name&quot;: &quot;model-explorer-repo-export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;example_colabs&quot;, &quot;src&quot;, &quot;model-explorer.wiki&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;, &quot;.md&quot;],
    &quot;exhaustive_dir_tree&quot;: false,
    &quot;subdirs_to_exclude&quot;: [&quot;server&quot;],
    &quot;depth&quot;: 10
  }
  
  </file>
      <file path="configs/nextjs.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polli-labs-mantine/&quot;,
    &quot;export_name&quot;: &quot;polli_labs_nextjs_repo_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;components&quot;, &quot;content&quot;, &quot;pages&quot;, &quot;public&quot;, &quot;theme&quot;, &quot;types&quot;],
    &quot;include_top_level_files&quot;: [&quot;package.json&quot;, &quot;tsconfig.json&quot;],
    &quot;included_extensions&quot;: [&quot;.ts&quot;, &quot;.js&quot;, &quot;.tsx&quot;, &quot;.jsx&quot;, &quot;.json&quot;]
  }</file>
      <file path="configs/polliFormer-COPAP.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_copap_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;h5data&quot;, &quot;aug&quot;],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_include&quot;: [&quot;main.py&quot;, &quot;config.py&quot;, &quot;docs/data/copap.md&quot;],
    &quot;files_to_exclude&quot;: [&quot;main_v0.py&quot;, &quot;main_v1.py&quot;, &quot;completed_plans.md&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-Dyn.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_Dyn_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;loss&quot;,&quot;ops_schedule&quot;, &quot;utils/logging&quot;, &quot;utils/metrics&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;],
  &quot;files_to_include&quot;: [&quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid_ft_sm_19.yaml&quot;,
    &quot;style_guide/metrics.md&quot;, &quot;style_guide/schedule_parameters.md&quot;,
  &quot;utils/schedule_utils.py&quot;, 
&quot;/home/caleb/repo/polliFormer/docs/training/metrics.md&quot;,
&quot;/home/caleb/repo/polliFormer/docs/training/scheduling.md&quot;,
&quot;/home/caleb/repo/polliFormer/docs/evaluation/validation.md&quot;],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-DynSlim.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_DynSlim_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;components&quot;],
  &quot;include_top_level_files&quot;: &quot;none&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;],
  &quot;files_to_include&quot;: [&quot;lr_scheduler.py&quot;, &quot;optimizer.py&quot;],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-J25_0e0.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_buildData_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;polliFormer/h5data&quot;],
    &quot;dirs_for_tree&quot;: [&quot;polliFormer&quot;, &quot;configs/experiments&quot;],
    &quot;include_top_level_files&quot;: [&quot;config.py&quot;, &quot;main.py&quot;],
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_include&quot;: [&quot;polliFormer/utils/wandb.py&quot;, &quot;polliFormer/utils/config_utils.py&quot;, &quot;polliFormer/docs/data/copap.md&quot;, &quot;configs/models/mFormer/mFormerV0_0_heteroHA_TS.yaml&quot;,
&quot;configs/archs/mFormerV0/mFormerV0_0.yaml&quot;, &quot;configs/archs/mFormerV0/mFormerV0.yaml&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;224.yaml&quot;, &quot;.bak.py&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-aug.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer-aug_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;aug&quot;],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_exclude&quot;: [&quot;export.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-autobatch.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_autobatch_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;utils&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;],
  &quot;files_to_include&quot;: [&quot;utils/wandb.py&quot;, &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid.yaml&quot;],
  &quot;files_to_exclude&quot;: [&quot;dataset_processor.py&quot;, &quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-autoresume.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer-autoresume_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [],
    &quot;dirs_to_exclude&quot;: [],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_exclude&quot;: [&quot;export.py&quot;, &quot;console_ui.py&quot;],
    &quot;files_to_include&quot;: [&quot;utils/autobatch.py&quot;, &quot;utils/wandb.py&quot;, &quot;utils/checkpoint.py&quot;, &quot;utils/model_utils.py&quot;, &quot;utils/config_utils.py&quot;,
    &quot;utils/distributed.py&quot;, &quot;utils/metrics/tracker.py&quot;, &quot;utils/backblaze.py&quot;,
        &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid_ft_sm.yaml&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-autoscale.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_autoscale_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;loss&quot;,&quot;components&quot;, &quot;ops_schedule&quot;, &quot;utils/logging&quot;, &quot;utils/metrics&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;],
  &quot;files_to_include&quot;: [ &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid_ft_sm_14.yaml&quot;,
  &quot;/home/caleb/repo/polliFormer/polliFormer/h5data/grouped_batch_sampler.py&quot;,
  &quot;/home/caleb/repo/polliFormer/polliFormer/h5data/h5_dataloader.py&quot;,
    &quot;/home/caleb/repo/polliFormer/polliFormer/utils/schedule_utils.py&quot;,
&quot;utils/param_filters.py&quot;, &quot;utils/distributed.py&quot;, &quot;utils/checkpoint.py&quot;,
  &quot;/home/caleb/repo/polliFormer/style_guide/metrics.md&quot;, &quot;/home/caleb/repo/polliFormer/style_guide/model_metadata.md&quot;,
    &quot;/home/caleb/repo/polliFormer/style_guide/schedule_parameters.md&quot;,
    &quot;/home/caleb/repo/polliFormer/work/active/schedule_reform_PRD.md&quot;],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-blade-angio-0.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_blade_angio_0_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;, &quot;.md&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_angio_0.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/models/mFormer/mFormerV0_0_heteroHA_TS.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_0.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0.yaml&quot;,
&quot;/home/caleb/repo/polliFormer/configs/models/mFormer/mFormerV0_0_heteroHA_TS.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/model/components/classification_heads/L1020304050_linear.yaml&quot;],
    &quot;files_to_exclude&quot;: [],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;.egg-info&quot;, &quot;__pycache__&quot;, &quot;.DS_Store&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-buildData.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_buildData_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;h5data&quot;],
    &quot;dirs_for_tree&quot;: [&quot;polliFormer&quot;, &quot;configs/experiments&quot;],
    &quot;include_top_level_files&quot;: [&quot;config.py&quot;, &quot;main.py&quot;],
    &quot;files_to_exclude&quot;: [&quot;h5data/dataset_processor.py&quot;],
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;224.yaml&quot;, &quot;.bak.py&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-classification0.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_classification0_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;loss&quot;, &quot;models/heads&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_include&quot;: [
        &quot;utils/param_filters.py&quot;,
        &quot;h5data/build.py&quot;,
        &quot;h5data/vectorized_dataset_processor.py&quot;,
        &quot;h5data/prefetching_hybrid_dataset.py&quot;,
    &quot;models/mFormerV0.py&quot;, &quot;models/build.py&quot;, &quot;models/model_factory.py&quot;, &quot;models/base_model.py&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_mini_0_conditional.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_mini_0_hsoftmax.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_sm.yaml&quot;],
    &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;, &quot;optimizer.py&quot;, &quot;config.py&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-classification1.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_classification1_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;loss&quot;, &quot;models/heads&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_include&quot;: [
        &quot;h5data/build.py&quot;,
        &quot;h5data/vectorized_dataset_processor.py&quot;,
        &quot;h5data/prefetching_hybrid_dataset.py&quot;,
        &quot;utils/dataset_metadata.py&quot;,
    &quot;models/mFormerV0.py&quot;, &quot;models/build.py&quot;, &quot;models/model_factory.py&quot;, &quot;models/base_model.py&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_mini_0_conditional.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_mini_0_hsoftmax.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_sm.yaml&quot;],
    &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;, &quot;optimizer.py&quot;, &quot;config.py&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-codeOnly.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_codeOnly_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;aug&quot;, &quot;h5data&quot;, &quot;configs&quot;, &quot;models&quot;, &quot;loss&quot;, &quot;utils&quot;, &quot;components&quot;, &quot;ibrida&quot;, &quot;evaluation&quot;, &quot;serving&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_exclude&quot;: [&quot;main_v0.py&quot;, &quot;main_v1.py&quot;, &quot;completed_plans.md&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-configData.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_configData_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;h5data&quot;, &quot;ibrida&quot;, &quot;loss&quot;, &quot;utils&quot;],
    &quot;dirs_for_tree&quot;: [&quot;polliFormer&quot;, &quot;configs/experiments&quot;],
    &quot;include_top_level_files&quot;: [&quot;config.py&quot;, &quot;main.py&quot;],
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_include&quot;: [&quot;polliFormer/docs/data/copap.md&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;224.yaml&quot;, &quot;.bak.py&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-configModel.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_configModel_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;polliFormer&quot;, &quot;configs&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;polliFormer/tests&quot;, &quot;polliFormer/serving&quot;, &quot;polliFormer/evaluation&quot;, &quot;polliFormer/aug&quot;,
        &quot;polliFormer/h5data&quot;, &quot;polliFormer/logs&quot;, &quot;polliFormer/loss&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;, &quot;.md&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/polliFormer/polliFormer/h5data/h5dump_first_train.txt&quot;, &quot;/home/caleb/repo/polliFormer/.vscode/launch.json&quot;],
    &quot;files_to_exclude&quot;: [&quot;README.md&quot;, &quot;TODO.md&quot;, &quot;training.md&quot;, &quot;mFormerV1.py&quot;, &quot;mFormerV1.md&quot;, &quot;training.md&quot;, &quot;mFormerV1.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;.egg-info&quot;, &quot;__pycache__&quot;, &quot;.DS_Store&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-configModelMini.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_configModelMini_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;configs&quot;],
    &quot;subdirs_to_exclude&quot;: [],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/polliFormer/polliFormer/config.py&quot;, &quot;/home/caleb/repo/polliFormer/polliFormer/utils/config_utils.py&quot;],
    &quot;files_to_exclude&quot;: [],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;.egg-info&quot;, &quot;__pycache__&quot;, &quot;.DS_Store&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-data.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_data_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;h5data&quot;, &quot;aug&quot;],
    &quot;files_to_include&quot;: [&quot;utils/config_utils.py&quot;, &quot;main.py&quot;, &quot;config.py&quot;, &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid.yaml&quot;],
    &quot;files_to_exclude&quot;: [&quot;dataset_processor.py&quot;, &quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;224.yaml&quot;, &quot;.bak.py&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-debugCOPAP.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_debugCOPAP_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;h5data&quot;],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_include&quot;: [&quot;main.py&quot;, &quot;/home/caleb/repo/polliFormer/polliFormer/utils/config_utils.py&quot;,
     &quot;config.py&quot;, &quot;/home/caleb/repo/polliFormer/polliFormer/docs/data/copap.md&quot;],
    &quot;files_to_exclude&quot;: [&quot;dataset_processor.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-deploymentXL.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_deploymentXL_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;loss&quot;, &quot;models&quot;, &quot;h5data&quot;, &quot;aug&quot;, &quot;utils&quot;,
    &quot;ops_schedule&quot;, &quot;optimizers&quot;, &quot;lr_schedulers&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;, &quot;.txt&quot;, &quot;.yaml&quot;],
    &quot;files_to_include&quot;: [
    &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_mini_mFormerV1_sm_run2.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_aves_mFormerV1_md_run2.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/polliFormer/tools/inspect_checkpoints.py&quot;,
    &quot;/home/caleb/repo/ibrida/extra/generator/configs/prod/amphibia_v0r1_full_hybrid_384.json&quot;,
    &quot;/home/caleb/repo/ibrida/extra/generator/configs/prod/amphibia_v0r1_mini_hybrid_384.json&quot;,
    &quot;/home/caleb/repo/ibrida/extra/generator/configs/prod/angiospermae_v0r1_full_hybrid_384.json&quot;,
    &quot;/home/caleb/repo/ibrida/extra/generator/configs/prod/aves_v0r1_full_hybrid_384.json&quot;,
    &quot;/home/caleb/repo/ibrida/extra/generator/configs/prod/mammalia_v0r1_full_hybrid_384.json&quot;,
    &quot;/home/caleb/repo/ibrida/extra/generator/configs/prod/reptilia_v0r1_full_hybrid_384.json&quot;
    ],
    &quot;additional_dirs_to_traverse&quot;: [
      &quot;/home/caleb/repo/polliFormer/docs&quot;,
      &quot;/home/caleb/repo/polliFormer/configs/model/archs&quot;,
      &quot;/home/caleb/repo/polliFormer/extra/mFormerV1_ckpt_inspections&quot;,
      &quot;/home/caleb/repo/polliFormer/tools&quot;,
      &quot;/home/caleb/repo/ibrida/src/ibrida/utils&quot;
    ],
    &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-doxDyn.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_doxDyn_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;docs&quot;, &quot;style_guide&quot;, &quot;polliFormer/ops_schedule&quot;, &quot;polliFormer/loss&quot;, &quot;polliFormer/utils&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;],
  &quot;files_to_include&quot;: [&quot;polliFormer/main.py&quot;, &quot;polliFormer/config.py&quot;,
    &quot;h5data/build.py&quot;,&quot;h5data/h5dataloader.py&quot;, &quot;h5data/h5_dataloader.py&quot;, &quot;h5data/base_prefetching_dataset.py&quot;, &quot;h5data/prefetching_hybrid_dataset.py&quot;,
  &quot;utils/schedule_utils.py&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid_ft_sm_15.yaml&quot;],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;, &quot;hpc_utils.py&quot;, &quot;dataset_metadata.py&quot;, &quot;autobatch.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;polliFormer/utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: false
}</file>
      <file path="configs/polliFormer-gradnorm.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_gradnorm_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;loss&quot;, &quot;ops_schedule&quot;, &quot;lr_schedulers&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;],
  &quot;files_to_include&quot;: [
    &quot;optimizers/build.py&quot;,
    &quot;optimizers/multi_optimizer.py&quot;,
    &quot;utils/param_filters.py&quot;, &quot;utils/unified_filtering.py&quot;,
    &quot;utils/schedule_utils.py&quot;,
    &quot;models/mFormerV0.py&quot;,
    &quot;/home/caleb/repo/polliFormer/style_guide/metrics.md&quot;,
    &quot;/home/caleb/repo/polliFormer/style_guide/model_metadata.md&quot;,
    &quot;/home/caleb/repo/polliFormer/style_guide/schedule_parameters.md&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/training/scheduling.md&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/training/metrics.md&quot;

  ],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-gradnorm2.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_gradnorm2_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;loss&quot;, &quot;ops_schedule&quot;, &quot;lr_schedulers&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;],
  &quot;files_to_include&quot;: [
    &quot;optimizers/build.py&quot;,
    &quot;optimizers/multi_optimizer.py&quot;,
    &quot;utils/schedule_utils.py&quot;,
    &quot;utils/logging/wandb.py&quot;,
    &quot;utils/metrics/tracker.py&quot;,
    &quot;utils/metrics/metrics.py&quot;,
    &quot;utils/metrics/step_metrics_logger.py&quot;,
    &quot;/home/caleb/repo/polliFormer/style_guide/metrics.md&quot;,
    &quot;/home/caleb/repo/polliFormer/style_guide/schedule_parameters.md&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/training/scheduling.md&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/training/metrics.md&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/evaluation/validation.md&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/evaluation/metrics.md&quot;
  ],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-gradnormSlim.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_gradnormSlim_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;loss&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_include&quot;: [
        &quot;utils/param_filters.py&quot;,
    &quot;models/mFormerV0.py&quot;, &quot;models/heads/utils.py&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid_ft_sm_11.yaml&quot;],
    &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;, &quot;optimizer.py&quot;, &quot;config.py&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-gradnormSlim2.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_gradnormSlim2_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;loss&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_include&quot;: [
    &quot;models/mFormerV0.py&quot;, &quot;models/heads/utils.py&quot;],
    &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;, &quot;optimizer.py&quot;, &quot;config.py&quot;, &quot;lr_scheduler.py&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-hierarchyMini.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_classificationMini_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;loss&quot;, &quot;models/heads&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;],
    &quot;files_to_include&quot;: [
    &quot;models/mFormerV0.py&quot;, &quot;models/build.py&quot;, &quot;models/model_factory.py&quot;, &quot;models/base_model.py&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_sm.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/advanced_topics/hierarchical_approaches.md&quot;],
    &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;, &quot;optimizer.py&quot;, &quot;validation.py&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-hierarchyXL.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_classificationXL_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;loss&quot;, &quot;models&quot;, &quot;h5data&quot;, &quot;aug&quot;, &quot;utils&quot;,
    &quot;ops_schedule&quot;, &quot;optimizers&quot;, &quot;lr_schedulers&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;, &quot;.txt&quot;, &quot;.yaml&quot;],
    &quot;files_to_include&quot;: [
    &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_mini_mFormerV1_sm_run2.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/polliFormer/tools/inspect_checkpoints.py&quot;
    ],
    &quot;additional_dirs_to_traverse&quot;: [
      &quot;/home/caleb/repo/polliFormer/docs&quot;,
      &quot;/home/caleb/repo/polliFormer/configs/model/archs&quot;,
      &quot;/home/caleb/repo/polliFormer/extra/mFormerV1_ckpt_inspections&quot;,
      &quot;/home/caleb/repo/polliFormer/tools&quot;
    ],
    &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-logging.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_logging_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;utils/metrics&quot;],
  &quot;include_top_level_files&quot;: &quot;none&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;],
  &quot;files_to_include&quot;: [&quot;main.py&quot;, &quot;logger.py&quot;, &quot;config.py&quot;, &quot;ops_schedule.py&quot;,
  &quot;utils/wandb.py&quot;, &quot;utils/logging_utils.py&quot;, &quot;utils/distributed.py&quot;],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;, &quot;taxAlign.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-loggingSlim.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_loggingSlim_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [],
  &quot;include_top_level_files&quot;: &quot;none&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;],
  &quot;files_to_include&quot;: [&quot;main.py&quot;, &quot;ops_schedule.py&quot;,
  &quot;utils/wandb.py&quot;, &quot;utils/logging_utils.py&quot;, &quot;utils/metrics/tracker.py&quot;],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;, &quot;taxAlign.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-loss.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_loss_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;loss&quot;, &quot;models&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;],
  &quot;files_to_include&quot;: [
    &quot;utils/schedule_utils.py&quot;,
    &quot;utils/logging/wandb.py&quot;,
    &quot;utils/metrics/tracker.py&quot;,
    &quot;utils/metrics/metrics.py&quot;,
    &quot;utils/metrics/step_metrics_logger.py&quot;,
    &quot;/home/caleb/repo/polliFormer/style_guide/metrics.md&quot;,
    &quot;/home/caleb/repo/polliFormer/style_guide/schedule_parameters.md&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/training/scheduling.md&quot;,
    &quot;/home/caleb/repo/polliFormer/style_guide/model_metadata.md&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/training/metrics.md&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/evaluation/validation.md&quot;,
    &quot;/home/caleb/repo/polliFormer/docs/evaluation/metrics.md&quot;
  ],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-loss2.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_loss2_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;loss&quot;, &quot;models/heads&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;],
  &quot;files_to_include&quot;: [
    &quot;models/build.py&quot;,
    &quot;models/mFormerV0.py&quot;,
    &quot;utils/schedule_utils.py&quot;,
    &quot;utils/logging/wandb.py&quot;,
    &quot;utils/metrics/tracker.py&quot;,
    &quot;utils/metrics/metrics.py&quot;,
    &quot;utils/metrics/step_metrics_logger.py&quot;
  ],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-loss3.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_loss3_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;loss&quot;, &quot;models/heads&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;],
  &quot;files_to_include&quot;: [
    &quot;models/build.py&quot;,
    &quot;models/mFormerV0.py&quot;,
    &quot;h5data/vectorized_dataset_processor.py&quot;,
    &quot;/home/caleb/repo/polliFormer/work/active/Mar17_25/1_taxonomy_label_smoothing_plan.md&quot;
  ],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-mFormerV1.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer-mFormerV1_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_include&quot;: [&quot;models/mFormerV0.py&quot;, &quot;models/build.py&quot;, &quot;models/blocks/mb_conv.py&quot;, &quot;models/blocks/relative_mhsa.py&quot;, &quot;models/blocks/drop_path.py&quot;,
&quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_sm.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_md.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_lg.yaml&quot;,
    &quot;utils/checkpoint.py&quot;, &quot;utils/model_utils.py&quot;,
    &quot;/home/caleb/repo/polliFormer/dev/papers/Diao et al. - 2022 - MetaFormer A Unified Meta Framework for Fine-Grai.md&quot;,
    &quot;/home/caleb/repo/polliFormer/dev/papers/Heo et al. - 2024 - Rotary Position Embedding for Vision Transformer.md&quot;,
    &quot;/home/caleb/repo/polliFormer/dev/notes/model/mFormerV1/PRD.md&quot;],
    &quot;files_to_exclude&quot;: [&quot;export.py&quot;, &quot;enhanced_mb_conv.py&quot;, &quot;console_ui.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-meta.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_meta_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;ops_schedule&quot;, &quot;utils/metrics&quot;, &quot;utils/logging&quot;],
    &quot;files_to_include&quot;: [&quot;h5data/build.py&quot;, &quot;h5data/vectorized_dataset_processor.py&quot;,
        &quot;h5data/h5dataloader.py&quot;, &quot;h5data/base_prefetching_dataset.py&quot;, &quot;h5data/prefetching_hybrid_dataset.py&quot;,
        &quot;utils/meta_utils.py&quot;, &quot;utils/schedule_utils.py&quot;, &quot;utils/distributed.py&quot;,
        &quot;models/mFormerV0.py&quot;,
        &quot;/home/caleb/repo/polliFormer/style_guide/metrics.md&quot;,
        &quot;/home/caleb/repo/polliFormer/style_guide/model_metadata.md&quot;,
        &quot;/home/caleb/repo/polliFormer/style_guide/schedule_parameters.md&quot;],
    &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;, &quot;autobatch.py&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;, &quot;.sh&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;224.yaml&quot;, &quot;.bak.py&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-metrics.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_metrics_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;utils/metrics&quot;, &quot;utils/logging&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;polliFormer/evaluation&quot;, &quot;polliFormer/logs&quot;, &quot;polliFormer/serving&quot;, &quot;polliFormer/tests&quot;, &quot;polliFormer/utils/inference&quot;, &quot;polliFormer/aug&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_include&quot;: [&quot;utils/backblaze.py&quot;, &quot;utils/checkpoint.py&quot;],
    &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;.egg-info&quot;, &quot;__pycache__&quot;, &quot;.DS_Store&quot;],
    &quot;exhaustive_dir_tree&quot;: true,
    &quot;dump_config&quot;: true
  }</file>
      <file path="configs/polliFormer-models-codeOnly.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer-models-codeOnly_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;models&quot;],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_exclude&quot;: [&quot;export.py&quot;, &quot;mFormerV1.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-models.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer-models_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;models&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_sm.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_md.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_lg.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/dev/notes/model/mFormerV0/reference_MetaFG_meta_implementation.xml&quot;, &quot;/home/caleb/repo/polliFormer/dev/notes/model/mFormerV0/reference_methods.md&quot;,
    &quot;/home/caleb/repo/polliFormer/polliFormer/utils/checkpoint.py&quot;, &quot;/home/caleb/repo/polliFormer/polliFormer/utils/model_utils.py&quot;],
    &quot;files_to_exclude&quot;: [&quot;export.py&quot;, &quot;enhanced_mb_conv.py&quot;, &quot;console_ui.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-modelsDyn.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_modelsDyn_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;models&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;],
  &quot;files_to_include&quot;: [&quot;/home/caleb/repo/polliFormer/polliFormer/utils/config_utils.py&quot;, &quot;/home/caleb/repo/polliFormer/polliFormer/utils/autobatch.py&quot;,
  &quot;/home/caleb/repo/polliFormer/polliFormer/h5data/vectorized_dataset_processor.py&quot;, &quot;h5data/h5dataloader.py&quot;, &quot;h5data/prefetching_hybrid_dataset.py&quot;, &quot;aug/cpu/selective_mixup.py&quot;,
&quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_sm.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_md.yaml&quot;,
&quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_lg.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_xl.yaml&quot;],
  &quot;files_to_exclude&quot;: [],
  &quot;subdirs_to_exclude&quot;: [&quot;configs/legacy&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-modelsPruned-codeOnly.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer/models&quot;,
    &quot;export_name&quot;: &quot;polliFormer_modelsPruned_codeOnly_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;aggregation&quot;, &quot;attention&quot;, &quot;heads&quot;, &quot;utils&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_exclude&quot;: [&quot;export.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-modelsPrunedInv-codeOnly.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer/models&quot;,
    &quot;export_name&quot;: &quot;polliFormer_modelsPrunedInv_codeOnly_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;blocks&quot;, &quot;components&quot;, &quot;normalization&quot;, &quot;resolvers&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_exclude&quot;: [&quot;export.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-modelsSlim.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer-modelsSlim_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_include&quot;: [&quot;models/mFormerV0.py&quot;, &quot;models/build.py&quot;, &quot;models/blocks/mb_conv.py&quot;, &quot;models/blocks/relative_mhsa.py&quot;, &quot;models/blocks/drop_path.py&quot;,
&quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_sm.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid_ft_sm_2.yaml&quot;,
    &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_md.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_lg.yaml&quot;,
    &quot;utils/checkpoint.py&quot;, &quot;utils/model_utils.py&quot;,
    &quot;/home/caleb/repo/polliFormer/dev/papers/Diao et al. - 2022 - MetaFormer A Unified Meta Framework for Fine-Grai.md&quot;,
    &quot;/home/caleb/repo/polliFormer/dev/notes/model/mFormerV1/PRD.md&quot;],
    &quot;files_to_exclude&quot;: [&quot;export.py&quot;, &quot;enhanced_mb_conv.py&quot;, &quot;console_ui.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-modelsSlim2.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer-modelsSlim2_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_include&quot;: [&quot;models/mFormerV0.py&quot;, &quot;models/build.py&quot;, &quot;models/blocks/mb_conv.py&quot;, &quot;models/blocks/drop_path.py&quot;,
    &quot;models/utils/initialization.py&quot;, &quot;models/utils/conversion.py&quot;,
        &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid_ft_sm.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_sm.yaml&quot;,
        &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_md.yaml&quot;, &quot;/home/caleb/repo/polliFormer/configs/model/archs/mFormerV0/mFormerV0_lg.yaml&quot;,
    &quot;utils/checkpoint.py&quot;, &quot;utils/model_utils.py&quot;],
    &quot;files_to_exclude&quot;: [&quot;export.py&quot;, &quot;enhanced_mb_conv.py&quot;, &quot;console_ui.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer-paramFilters.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_paramFilters_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;loss&quot;,&quot;components&quot;, &quot;utils/logging&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;],
  &quot;files_to_include&quot;: [ &quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid_ft_sm_14.yaml&quot;, 
&quot;utils/param_filters.py&quot;, &quot;utils/distributed.py&quot;, &quot;utils/checkpoint.py&quot;, &quot;utils/model_utils.py&quot;,
&quot;models/mFormerV0.py&quot;, &quot;models/build.py&quot;, &quot;models/blocks/mb_conv.py&quot;, &quot;models/blocks/relative_mhsa.py&quot;, &quot;models/blocks/drop_path.py&quot;,
  &quot;/home/caleb/repo/polliFormer/style_guide/metrics.md&quot;],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;backblaze.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-serve.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/Polli-Brain/metaformer/torchserve/polliFormer0&quot;,
    &quot;export_name&quot;: &quot;polliFormer_serve_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;.&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;, &quot;.properties&quot;, &quot;.sh&quot;, &quot;.xml&quot;, &quot;.txt&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;pkgs&quot;, &quot;test&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-tests.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_tests_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;aug&quot;, &quot;h5data&quot;, &quot;models&quot;, &quot;loss&quot;, &quot;utils&quot;, &quot;components&quot;, &quot;ibrida&quot;, &quot;evaluation&quot;, &quot;serving&quot;, &quot;tests&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_include&quot;: [&quot;copap.md&quot;, &quot;inheritance.md&quot;, &quot;model.md&quot;, &quot;training.md&quot;],
    &quot;files_to_exclude&quot;: [&quot;main_v0.py&quot;, &quot;main_v1.py&quot;, &quot;completed_plans.md&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/polliFormer-train.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
  &quot;export_name&quot;: &quot;polliFormer_train_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;loss&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;],
  &quot;files_to_include&quot;: [&quot;/home/caleb/repo/polliFormer/configs/experiments/tests/blade_amphibia_hybrid_ft_sm_9.yaml&quot;,
  &quot;h5data/build.py&quot;, &quot;h5data/base_prefetching_dataset.py&quot;, &quot;h5data/prefetching_hybrid_dataset.py&quot;, &quot;h5data/h5dataloader.py&quot;, &quot;h5data/prefetching_h5_dataset.py&quot;, &quot;h5data/h5dataloader.py&quot;,
  &quot;aug/cpu/selective_mixup.py&quot;, &quot;aug/gpu/selective_mixup.py&quot;,
  &quot;models/mFormerV0.py&quot;],
  &quot;files_to_exclude&quot;: [&quot;console_ui.py&quot;, &quot;dataset_metadata.py&quot;, &quot;config_utils.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;configs/legacy&quot;, &quot;utils/inference&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
      <file path="configs/polliFormer-utils.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer-utils_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;utils&quot;],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yaml&quot;],
    &quot;files_to_exclude&quot;: [&quot;export.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliFormer.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliFormer/polliFormer&quot;,
    &quot;export_name&quot;: &quot;polliFormer_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;aug&quot;, &quot;evaluation&quot;, &quot;h5data&quot;, &quot;ibrida&quot;, &quot;loss&quot;, &quot;lr_schedulers&quot;, &quot;models&quot;, &quot;ops_schedule&quot;, &quot;utils&quot;,
        &quot;serving&quot;, &quot;tests&quot;, &quot;tools&quot;
    ],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;files_to_exclude&quot;: [&quot;README.md&quot;, &quot;TODO.md&quot;, &quot;mFormerV1.py&quot;, &quot;mFormerV1.md&quot;, &quot;training.md&quot;, &quot;mFormerV1.py&quot;, &quot;export.py&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;, &quot;.egg-info&quot;, &quot;__pycache__&quot;, &quot;.DS_Store&quot;],
    &quot;exhaustive_dir_tree&quot;: true
  }</file>
      <file path="configs/polliOS-codeOnly.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliOS-core/PolliOS&quot;,
    &quot;export_name&quot;: &quot;polliOS-core-codeOnly-export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;backend&quot;, &quot;brain&quot;, &quot;engine&quot;, &quot;logger&quot;, &quot;polliCLI&quot;, &quot;runner&quot;, &quot;swarm&quot;, &quot;updaters&quot;, &quot;utils&quot;],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;],
    &quot;exhaustive_dir_tree&quot;: false,
    &quot;subdirs_to_exclude&quot;: [&quot;updaters&quot;, &quot;utils&quot;, &quot;.git&quot;],
    &quot;depth&quot;: 10
  }
  
  </file>
      <file path="configs/polliOS.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/polliOS-core/PolliOS&quot;,
    &quot;export_name&quot;: &quot;polliOS-core-repo-export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;PolliOS&quot;],
    &quot;include_top_level_files&quot;: &quot;none&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.yml&quot;, &quot;.md&quot;],
    &quot;exhaustive_dir_tree&quot;: false,
    &quot;subdirs_to_exclude&quot;: [&quot;updaters&quot;, &quot;utils&quot;],
    &quot;depth&quot;: 10
  }
  
  </file>
      <file path="configs/rope-vit.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/rope-vit/&quot;,
  &quot;export_name&quot;: &quot;rope-vit_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;models&quot;, &quot;self-attn&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;, &quot;.txt&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;__pycache__&quot;, &quot;.git&quot;, &quot;.venv&quot;, &quot;.vscode&quot;],
  &quot;files_to_exclude&quot;: [],
  &quot;always_exclude_patterns&quot;: [&quot;*.pyc&quot;, &quot;*.pyo&quot;, &quot;*.pyd&quot;, &quot;*.so&quot;, &quot;*.dylib&quot;, &quot;*.dll&quot;, &quot;*.log&quot;, &quot;*.swp&quot;, &quot;*.swo&quot;, &quot;*.DS_Store&quot;],
  &quot;depth&quot;: -1,
  &quot;exhaustive_dir_tree&quot;: true,
  &quot;dump_config&quot;: false
}
</file>
      <file path="configs/sam2.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/sam2&quot;,
    &quot;export_name&quot;: &quot;sam2_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;notebooks&quot;, &quot;sam2&quot;, &quot;tools&quot;],
    &quot;files_to_include&quot;: [],
    &quot;files_to_exclude&quot;: [&quot;CONTRIBUTING.md&quot;, &quot;LICENSE&quot;, &quot;LICENSE_cctorch&quot;, &quot;CODE_OF_CONDUCT.md&quot;],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;, &quot;.ipynb&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/sam2_demo.json">{
    &quot;repo_root&quot;: &quot;/home/caleb/repo/sam2/demo&quot;,
    &quot;export_name&quot;: &quot;sam2_demo_export.txt&quot;,
    &quot;delimiter&quot;: &quot;----&quot;,
    &quot;dirs_to_traverse&quot;: [&quot;frontend&quot;],
    &quot;subdirs_to_exclude&quot;: [&quot;frontend/node_modules&quot;, &quot;frontend/dist&quot;, &quot;frontend/public&quot;, &quot;frontend/src/assets&quot;, &quot;frontend/src/components/ui/icons&quot;, &quot;frontend/src/components/ui/icons/icons&quot;,
    &quot;frontend/src/common/components/gallery&quot;, &quot;frontend/src/common/codecs&quot;, &quot;frontend/src/common/tracker&quot;, &quot;__generated__&quot;],
    &quot;files_to_include&quot;: [&quot;/home/caleb/repo/sam2/docker-compose.yaml&quot;, &quot;/home/caleb/repo/sam2/backend.Dockerfile&quot;, &quot;/home/caleb/repo/sam2/demo/frontend/frontend.Dockerfile&quot;,
    &quot;/home/caleb/repo/sam2/demo/backend/server/app_conf.py&quot;, &quot;/home/caleb/repo/sam2/demo/backend/server/app.py&quot;],
    &quot;files_to_exclude&quot;: [],
    &quot;include_top_level_files&quot;: &quot;all&quot;,
    &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;, &quot;.ts&quot;, &quot;.tsx&quot;, &quot;.json&quot;, &quot;.html&quot;, &quot;.css&quot;, &quot;.js&quot;, &quot;.yaml&quot;, &quot;.yml&quot;, &quot;.graphql&quot;, &quot;.dockerignore&quot;],
    &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
    &quot;exhaustive_dir_tree&quot;: false
  }</file>
      <file path="configs/vggt.json">{
  &quot;repo_root&quot;: &quot;/Users/carbon/repo/vggt&quot;,
  &quot;export_name&quot;: &quot;vggt_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;.&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.py&quot;, &quot;.md&quot;, &quot;.txt&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;__pycache__&quot;, &quot;.git&quot;, &quot;.venv&quot;, &quot;.vscode&quot;],
  &quot;files_to_exclude&quot;: [],
  &quot;always_exclude_patterns&quot;: [&quot;*.pyc&quot;, &quot;*.pyo&quot;, &quot;*.pyd&quot;, &quot;*.so&quot;, &quot;*.dylib&quot;, &quot;*.dll&quot;, &quot;*.log&quot;, &quot;*.swp&quot;, &quot;*.swo&quot;, &quot;*.DS_Store&quot;],
  &quot;depth&quot;: -1,
  &quot;exhaustive_dir_tree&quot;: true,
  &quot;dump_config&quot;: false
}
</file>
      <file path="configs/wandb_sweep.json">{
  &quot;repo_root&quot;: &quot;/home/caleb/repo/wandb_docs/content/guides/models/sweeps&quot;,
  &quot;export_name&quot;: &quot;wandb_sweep_export.txt&quot;,
  &quot;delimiter&quot;: &quot;----&quot;,
  &quot;dirs_to_traverse&quot;: [&quot;define-sweep-configuration&quot;],
  &quot;include_top_level_files&quot;: &quot;all&quot;,
  &quot;included_extensions&quot;: [&quot;.md&quot;],
  &quot;files_to_exclude&quot;: [&quot;logger.py&quot;],
  &quot;subdirs_to_exclude&quot;: [&quot;configs/legacy&quot;],
  &quot;always_exclude_patterns&quot;: [&quot;export.txt&quot;],
  &quot;exhaustive_dir_tree&quot;: true
}</file>
    </dir>
  </files>
</codebase_context>

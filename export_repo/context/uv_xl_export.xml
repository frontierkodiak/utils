<?xml version="1.0" encoding="utf-8"?>
<codebase_context>
  <dirtree root="/home/caleb/repo/uv">|-- README.md (320 lines)
\-- docs (24220)
    |-- concepts (3667)
    |   |-- cache.md (199)
    |   |-- projects (2299)
    |   |   |-- build.md (60)
    |   |   |-- config.md (471)
    |   |   |-- dependencies.md (821)
    |   |   |-- init.md (342)
    |   |   |-- layout.md (95)
    |   |   |-- run.md (100)
    |   |   |-- sync.md (210)
    |   |   \-- workspaces.md (200)
    |   |-- python-versions.md (374)
    |   |-- resolution.md (538)
    |   \-- tools.md (257)
    |-- configuration (1206)
    |   |-- authentication.md (105)
    |   |-- environment.md (657)
    |   |-- files.md (125)
    |   |-- indexes.md (265)
    |   \-- installer.md (54)
    |-- getting-started (477)
    |   |-- features.md (110)
    |   |-- first-steps.md (22)
    |   |-- help.md (67)
    |   \-- installation.md (278)
    |-- guides (3996)
    |   |-- install-python.md (129)
    |   |-- integration (2846)
    |   |   |-- alternative-indexes.md (374)
    |   |   |-- aws-lambda.md (601)
    |   |   |-- dependency-bots.md (65)
    |   |   |-- docker.md (559)
    |   |   |-- fastapi.md (137)
    |   |   |-- github.md (349)
    |   |   |-- gitlab.md (87)
    |   |   |-- jupyter.md (171)
    |   |   |-- pre-commit.md (80)
    |   |   \-- pytorch.md (423)
    |   |-- package.md (124)
    |   |-- projects.md (244)
    |   |-- scripts.md (359)
    |   \-- tools.md (294)
    |-- pip (1098)
    |   |-- compatibility.md (482)
    |   |-- compile.md (219)
    |   |-- dependencies.md (54)
    |   |-- environments.md (152)
    |   |-- inspection.md (43)
    |   \-- packages.md (148)
    \-- reference (13776)
        |-- cli.md (9765)
        |-- policies (90)
        |   |-- license.md (20)
        |   |-- platforms.md (35)
        |   \-- versioning.md (35)
        |-- settings.md (3432)
        \-- troubleshooting (489)
            |-- build-failures.md (337)
            \-- reproducible-examples.md (152)
</dirtree>
  <files>
    <file path="README.md"># uv

[![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
[![image](https://img.shields.io/pypi/v/uv.svg)](https://pypi.python.org/pypi/uv)
[![image](https://img.shields.io/pypi/l/uv.svg)](https://pypi.python.org/pypi/uv)
[![image](https://img.shields.io/pypi/pyversions/uv.svg)](https://pypi.python.org/pypi/uv)
[![Actions status](https://github.com/astral-sh/uv/actions/workflows/ci.yml/badge.svg)](https://github.com/astral-sh/uv/actions)
[![Discord](https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;logoColor=white)](https://discord.gg/astral-sh)

An extremely fast Python package and project manager, written in Rust.

&lt;p align=&quot;center&quot;&gt;
  &lt;picture align=&quot;center&quot;&gt;
    &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310&quot;&gt;
    &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d&quot;&gt;
    &lt;img alt=&quot;Shows a bar chart with benchmark results.&quot; src=&quot;https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d&quot;&gt;
  &lt;/picture&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;i&gt;Installing &lt;a href=&quot;https://trio.readthedocs.io/&quot;&gt;Trio&lt;/a&gt;'s dependencies with a warm cache.&lt;/i&gt;
&lt;/p&gt;

## Highlights

- üöÄ A single tool to replace `pip`, `pip-tools`, `pipx`, `poetry`, `pyenv`, `twine`, `virtualenv`,
  and more.
- ‚ö°Ô∏è [10-100x faster](https://github.com/astral-sh/uv/blob/main/BENCHMARKS.md) than `pip`.
- üóÇÔ∏è Provides [comprehensive project management](#projects), with a
  [universal lockfile](https://docs.astral.sh/uv/concepts/projects/layout#the-lockfile).
- ‚ùáÔ∏è [Runs scripts](#scripts), with support for
  [inline dependency metadata](https://docs.astral.sh/uv/guides/scripts#declaring-script-dependencies).
- üêç [Installs and manages](#python-versions) Python versions.
- üõ†Ô∏è [Runs and installs](#tools) tools published as Python packages.
- üî© Includes a [pip-compatible interface](#the-pip-interface) for a performance boost with a
  familiar CLI.
- üè¢ Supports Cargo-style [workspaces](https://docs.astral.sh/uv/concepts/projects/workspaces) for
  scalable projects.
- üíæ Disk-space efficient, with a [global cache](https://docs.astral.sh/uv/concepts/cache) for
  dependency deduplication.
- ‚è¨ Installable without Rust or Python via `curl` or `pip`.
- üñ•Ô∏è Supports macOS, Linux, and Windows.

uv is backed by [Astral](https://astral.sh), the creators of
[Ruff](https://github.com/astral-sh/ruff).

## Installation

Install uv with our standalone installers:

```bash
# On macOS and Linux.
curl -LsSf https://astral.sh/uv/install.sh | sh
```

```bash
# On Windows.
powershell -ExecutionPolicy ByPass -c &quot;irm https://astral.sh/uv/install.ps1 | iex&quot;
```

Or, from [PyPI](https://pypi.org/project/uv/):

```bash
# With pip.
pip install uv
```

```bash
# Or pipx.
pipx install uv
```

If installed via the standalone installer, uv can update itself to the latest version:

```bash
uv self update
```

See the [installation documentation](https://docs.astral.sh/uv/getting-started/installation/) for
details and alternative installation methods.

## Documentation

uv's documentation is available at [docs.astral.sh/uv](https://docs.astral.sh/uv).

Additionally, the command line reference documentation can be viewed with `uv help`.

## Features

### Projects

uv manages project dependencies and environments, with support for lockfiles, workspaces, and more,
similar to `rye` or `poetry`:

```console
$ uv init example
Initialized project `example` at `/home/user/example`

$ cd example

$ uv add ruff
Creating virtual environment at: .venv
Resolved 2 packages in 170ms
   Built example @ file:///home/user/example
Prepared 2 packages in 627ms
Installed 2 packages in 1ms
 + example==0.1.0 (from file:///home/user/example)
 + ruff==0.5.0

$ uv run ruff check
All checks passed!

$ uv lock
Resolved 2 packages in 0.33ms

$ uv sync
Resolved 2 packages in 0.70ms
Audited 1 package in 0.02ms
```

See the [project documentation](https://docs.astral.sh/uv/guides/projects/) to get started.

uv also supports building and publishing projects, even if they're not managed with uv. See the
[publish guide](https://docs.astral.sh/uv/guides/publish/) to learn more.

### Scripts

uv manages dependencies and environments for single-file scripts.

Create a new script and add inline metadata declaring its dependencies:

```console
$ echo 'import requests; print(requests.get(&quot;https://astral.sh&quot;))' &gt; example.py

$ uv add --script example.py requests
Updated `example.py`
```

Then, run the script in an isolated virtual environment:

```console
$ uv run example.py
Reading inline script metadata from: example.py
Installed 5 packages in 12ms
&lt;Response [200]&gt;
```

See the [scripts documentation](https://docs.astral.sh/uv/guides/scripts/) to get started.

### Tools

uv executes and installs command-line tools provided by Python packages, similar to `pipx`.

Run a tool in an ephemeral environment using `uvx` (an alias for `uv tool run`):

```console
$ uvx pycowsay 'hello world!'
Resolved 1 package in 167ms
Installed 1 package in 9ms
 + pycowsay==0.0.0.2
  &quot;&quot;&quot;

  ------------
&lt; hello world! &gt;
  ------------
   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||
```

Install a tool with `uv tool install`:

```console
$ uv tool install ruff
Resolved 1 package in 6ms
Installed 1 package in 2ms
 + ruff==0.5.0
Installed 1 executable: ruff

$ ruff --version
ruff 0.5.0
```

See the [tools documentation](https://docs.astral.sh/uv/guides/tools/) to get started.

### Python versions

uv installs Python and allows quickly switching between versions.

Install multiple Python versions:

```console
$ uv python install 3.10 3.11 3.12
Searching for Python versions matching: Python 3.10
Searching for Python versions matching: Python 3.11
Searching for Python versions matching: Python 3.12
Installed 3 versions in 3.42s
 + cpython-3.10.14-macos-aarch64-none
 + cpython-3.11.9-macos-aarch64-none
 + cpython-3.12.4-macos-aarch64-none
```

Download Python versions as needed:

```console
$ uv venv --python 3.12.0
Using Python 3.12.0
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate

$ uv run --python pypy@3.8 -- python --version
Python 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)
[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt;&gt;
```

Use a specific Python version in the current directory:

```console
$ uv python pin 3.11
Pinned `.python-version` to `3.11`
```

See the [Python installation documentation](https://docs.astral.sh/uv/guides/install-python/) to get
started.

### The pip interface

uv provides a drop-in replacement for common `pip`, `pip-tools`, and `virtualenv` commands.

uv extends their interfaces with advanced features, such as dependency version overrides,
platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and
more.

Migrate to uv without changing your existing workflows ‚Äî and experience a 10-100x speedup ‚Äî with the
`uv pip` interface.

Compile requirements into a platform-independent requirements file:

```console
$ uv pip compile docs/requirements.in \
   --universal \
   --output-file docs/requirements.txt
Resolved 43 packages in 12ms
```

Create a virtual environment:

```console
$ uv venv
Using Python 3.12.3
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate
```

Install the locked requirements:

```console
$ uv pip sync docs/requirements.txt
Resolved 43 packages in 11ms
Installed 43 packages in 208ms
 + babel==2.15.0
 + black==24.4.2
 + certifi==2024.7.4
 ...
```

See the [pip interface documentation](https://docs.astral.sh/uv/pip/index/) to get started.

## Platform support

See uv's [platform support](https://docs.astral.sh/uv/reference/platforms/) document.

## Versioning policy

See uv's [versioning policy](https://docs.astral.sh/uv/reference/versioning/) document.

## Contributing

We are passionate about supporting contributors of all levels of experience and would love to see
you get involved in the project. See the
[contributing guide](https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md) to get started.

## Acknowledgements

uv's dependency resolver uses [PubGrub](https://github.com/pubgrub-rs/pubgrub) under the hood. We're
grateful to the PubGrub maintainers, especially [Jacob Finkelman](https://github.com/Eh2406), for
their support.

uv's Git implementation is based on [Cargo](https://github.com/rust-lang/cargo).

Some of uv's optimizations are inspired by the great work we've seen in [pnpm](https://pnpm.io/),
[Orogene](https://github.com/orogene/orogene), and [Bun](https://github.com/oven-sh/bun). We've also
learned a lot from Nathaniel J. Smith's [Posy](https://github.com/njsmith/posy) and adapted its
[trampoline](https://github.com/njsmith/posy/tree/main/src/trampolines/windows-trampolines/posy-trampoline)
for Windows support.

## License

uv is licensed under either of

- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or
  &lt;https://www.apache.org/licenses/LICENSE-2.0&gt;)
- MIT license ([LICENSE-MIT](LICENSE-MIT) or &lt;https://opensource.org/licenses/MIT&gt;)

at your option.

Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv
by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any
additional terms or conditions.

&lt;div align=&quot;center&quot;&gt;
  &lt;a target=&quot;_blank&quot; href=&quot;https://astral.sh&quot; style=&quot;background:none&quot;&gt;
    &lt;img src=&quot;https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg&quot; alt=&quot;Made by Astral&quot;&gt;
  &lt;/a&gt;
&lt;/div&gt;
</file>
    <dir path="docs">
      <dir path="docs/concepts">
        <file path="docs/concepts/cache.md"># Caching

## Dependency caching

uv uses aggressive caching to avoid re-downloading (and re-building) dependencies that have already
been accessed in prior runs.

The specifics of uv's caching semantics vary based on the nature of the dependency:

- **For registry dependencies** (like those downloaded from PyPI), uv respects HTTP caching headers.
- **For direct URL dependencies**, uv respects HTTP caching headers, and also caches based on the
  URL itself.
- **For Git dependencies**, uv caches based on the fully-resolved Git commit hash. As such,
  `uv pip compile` will pin Git dependencies to a specific commit hash when writing the resolved
  dependency set.
- **For local dependencies**, uv caches based on the last-modified time of the source archive (i.e.,
  the local `.whl` or `.tar.gz` file). For directories, uv caches based on the last-modified time of
  the `pyproject.toml`, `setup.py`, or `setup.cfg` file.

If you're running into caching issues, uv includes a few escape hatches:

- To force uv to revalidate cached data for all dependencies, pass `--refresh` to any command (e.g.,
  `uv sync --refresh` or `uv pip install --refresh ...`).
- To force uv to revalidate cached data for a specific dependency pass `--refresh-package` to any
  command (e.g., `uv sync --refresh-package flask` or `uv pip install --refresh-package flask ...`).
- To force uv to ignore existing installed versions, pass `--reinstall` to any installation command
  (e.g., `uv sync --reinstall` or `uv pip install --reinstall ...`).

As a special case, uv will always rebuild and reinstall any local directory dependencies passed
explicitly on the command-line (e.g., `uv pip install .`).

## Dynamic metadata

By default, uv will _only_ rebuild and reinstall local directory dependencies (e.g., editables) if
the `pyproject.toml`, `setup.py`, or `setup.cfg` file in the directory root has changed, or if a
`src` directory is added or removed. This is a heuristic and, in some cases, may lead to fewer
re-installs than desired.

To incorporate additional information into the cache key for a given package, you can add cache key
entries under [`tool.uv.cache-keys`](https://docs.astral.sh/uv/reference/settings/#cache-keys),
which covers both file paths and Git commit hashes. Setting
[`tool.uv.cache-keys`](https://docs.astral.sh/uv/reference/settings/#cache-keys) will replace
defaults, so any necessary files (like `pyproject.toml`) should still be included in the
user-defined cache keys.

For example, if a project specifies dependencies in `pyproject.toml` but uses
[`setuptools-scm`](https://pypi.org/project/setuptools-scm/) to manage its version, and should thus
be rebuilt whenever the commit hash or dependencies change, you can add the following to the
project's `pyproject.toml`:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
cache-keys = [{ file = &quot;pyproject.toml&quot; }, { git = { commit = true } }]
```

If your dynamic metadata incorporates information from the set of Git tags, you can expand the cache
key to include the tags:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
cache-keys = [{ file = &quot;pyproject.toml&quot; }, { git = { commit = true, tags = true } }]
```

Similarly, if a project reads from a `requirements.txt` to populate its dependencies, you can add
the following to the project's `pyproject.toml`:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
cache-keys = [{ file = &quot;pyproject.toml&quot; }, { file = &quot;requirements.txt&quot; }]
```

Globs are supported for `file` keys, following the syntax of the
[`glob`](https://docs.rs/glob/0.3.1/glob/struct.Pattern.html) crate. For example, to invalidate the
cache whenever a `.toml` file in the project directory or any of its subdirectories is modified, use
the following:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
cache-keys = [{ file = &quot;**/*.toml&quot; }]
```

!!! note

    The use of globs can be expensive, as uv may need to walk the filesystem to determine whether any files have changed.
    This may, in turn, requiring traversal of large or deeply nested directories.

Similarly, if a project relies on an environment variable, you can add the following to the
project's `pyproject.toml` to invalidate the cache whenever the environment variable changes:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
cache-keys = [{ file = &quot;pyproject.toml&quot; }, { env = &quot;MY_ENV_VAR&quot; }]
```

Finally, to invalidate a project whenever a specific directory (like `src`) is created or removed,
add the following to the project's `pyproject.toml`:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
cache-keys = [{ file = &quot;pyproject.toml&quot; }, { dir = &quot;src&quot; }]
```

Note that the `dir` key will only track changes to the directory itself, and not arbitrary changes
within the directory.

As an escape hatch, if a project uses `dynamic` metadata that isn't covered by `tool.uv.cache-keys`,
you can instruct uv to _always_ rebuild and reinstall it by adding the project to the
`tool.uv.reinstall-package` list:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
reinstall-package = [&quot;my-package&quot;]
```

This will force uv to rebuild and reinstall `my-package` on every run, regardless of whether the
package's `pyproject.toml`, `setup.py`, or `setup.cfg` file has changed.

## Cache safety

It's safe to run multiple uv commands concurrently, even against the same virtual environment. uv's
cache is designed to be thread-safe and append-only, and thus robust to multiple concurrent readers
and writers. uv applies a file-based lock to the target virtual environment when installing, to
avoid concurrent modifications across processes.

Note that it's _not_ safe to modify the uv cache (e.g., `uv cache clean`) while other uv commands
are running, and _never_ safe to modify the cache directly (e.g., by removing a file or directory).

## Clearing the cache

uv provides a few different mechanisms for removing entries from the cache:

- `uv cache clean` removes _all_ cache entries from the cache directory, clearing it out entirely.
- `uv cache clean ruff` removes all cache entries for the `ruff` package, useful for invalidating
  the cache for a single or finite set of packages.
- `uv cache prune` removes all _unused_ cache entries. For example, the cache directory may contain
  entries created in previous uv versions that are no longer necessary and can be safely removed.
  `uv cache prune` is safe to run periodically, to keep the cache directory clean.

## Caching in continuous integration

It's common to cache package installation artifacts in continuous integration environments (like
GitHub Actions or GitLab CI) to speed up subsequent runs.

By default, uv caches both the wheels that it builds from source and the pre-built wheels that it
downloads directly, to enable high-performance package installation.

However, in continuous integration environments, persisting pre-built wheels may be undesirable.
With uv, it turns out that it's often faster to _omit_ pre-built wheels from the cache (and instead
re-download them from the registry on each run). On the other hand, caching wheels that are built
from source tends to be worthwhile, since the wheel building process can be expensive, especially
for extension modules.

To support this caching strategy, uv provides a `uv cache prune --ci` command, which removes all
pre-built wheels and unzipped source distributions from the cache, but retains any wheels that were
built from source. We recommend running `uv cache prune --ci` at the end of your continuous
integration job to ensure maximum cache efficiency. For an example, see the
[GitHub integration guide](../guides/integration/github.md#caching).

## Cache directory

uv determines the cache directory according to, in order:

1. A temporary cache directory, if `--no-cache` was requested.
2. The specific cache directory specified via `--cache-dir`, `UV_CACHE_DIR`, or
   [`tool.uv.cache-dir`](../reference/settings.md#cache-dir).
3. A system-appropriate cache directory, e.g., `$XDG_CACHE_HOME/uv` or `$HOME/.cache/uv` on Unix and
   `%LOCALAPPDATA%\uv\cache` on Windows

!!! note

    uv _always_ requires a cache directory. When `--no-cache` is requested, uv will still use
    a temporary cache for sharing data within that single invocation.

    In most cases, `--refresh` should be used instead of `--no-cache` ‚Äî as it will update the cache
    for subsequent operations but not read from the cache.

It is important for performance for the cache directory to be located on the same file system as the
Python environment uv is operating on. Otherwise, uv will not be able to link files from the cache
into the environment and will instead need to fallback to slow copy operations.

## Cache versioning

The uv cache is composed of a number of buckets (e.g., a bucket for wheels, a bucket for source
distributions, a bucket for Git repositories, and so on). Each bucket is versioned, such that if a
release contains a breaking change to the cache format, uv will not attempt to read from or write to
an incompatible cache bucket.

For example, uv 0.4.13 included a breaking change to the core metadata bucket. As such, the bucket
version was increased from v12 to v13. Within a cache version, changes are guaranteed to be both
forwards- and backwards-compatible.

Since changes in the cache format are accompanied by changes in the cache version, multiple versions
of uv can safely read and write to the same cache directory. However, if the cache version changed
between a given pair of uv releases, then those releases may not be able to share the same
underlying cache entries.

For example, it's safe to use a single shared cache for uv 0.4.12 and uv 0.4.13, though the cache
itself may contain duplicate entries in the core metadata bucket due to the change in cache version.
</file>
        <file path="docs/concepts/python-versions.md"># Python versions

A Python version is composed of a Python interpreter (i.e. the `python` executable), the standard
library, and other supporting files.

## Managed and system Python installations

Since it is common for a system to have an existing Python installation, uv supports
[discovering](#discovery-of-python-versions) Python versions. However, uv also supports
[installing Python versions](#installing-a-python-version) itself. To distinguish between these two
types of Python installations, uv refers to Python versions it installs as _managed_ Python
installations and all other Python installations as _system_ Python installations.

!!! note

    uv does not distinguish between Python versions installed by the operating system vs those
    installed and managed by other tools. For example, if a Python installation is managed with
    `pyenv`, it would still be considered a _system_ Python version in uv.

## Requesting a version

A specific Python version can be requested with the `--python` flag in most uv commands. For
example, when creating a virtual environment:

```console
$ uv venv --python 3.11.6
```

uv will ensure that Python 3.11.6 is available ‚Äî downloading and installing it if necessary ‚Äî then
create the virtual environment with it.

The following Python version request formats are supported:

- `&lt;version&gt;` (e.g., `3`, `3.12`, `3.12.3`)
- `&lt;version-specifier&gt;` (e.g., `&gt;=3.12,&lt;3.13`)
- `&lt;implementation&gt;` (e.g., `cpython` or `cp`)
- `&lt;implementation&gt;@&lt;version&gt;` (e.g., `cpython@3.12`)
- `&lt;implementation&gt;&lt;version&gt;` (e.g., `cpython3.12` or `cp312`)
- `&lt;implementation&gt;&lt;version-specifier&gt;` (e.g., `cpython&gt;=3.12,&lt;3.13`)
- `&lt;implementation&gt;-&lt;version&gt;-&lt;os&gt;-&lt;arch&gt;-&lt;libc&gt;` (e.g., `cpython-3.12.3-macos-aarch64-none`)

Additionally, a specific system Python interpreter can be requested with:

- `&lt;executable-path&gt;` (e.g., `/opt/homebrew/bin/python3`)
- `&lt;executable-name&gt;` (e.g., `mypython3`)
- `&lt;install-dir&gt;` (e.g., `/some/environment/`)

By default, uv will automatically download Python versions if they cannot be found on the system.
This behavior can be
[disabled with the `python-downloads` option](#disabling-automatic-python-downloads).

### Python version files

The `.python-version` file can be used to create a default Python version request. uv searches for a
`.python-version` file in the working directory and each of its parents. If none is found, uv will
check the user-level configuration directory. Any of the request formats described above can be
used, though use of a version number is recommended for interoperability with other tools.

A `.python-version` file can be created in the current directory with the
[`uv python pin`](../reference/cli.md/#uv-python-pin) command.

A global `.python-version` file can be created in the user configuration directory with the
[`uv python pin --global`](../reference/cli.md/#uv-python-pin) command.

Discovery of `.python-version` files can be disabled with `--no-config`.

uv will not search for `.python-version` files beyond project or workspace boundaries (with the
exception of the user configuration directory).

## Installing a Python version

uv bundles a list of downloadable CPython and PyPy distributions for macOS, Linux, and Windows.

!!! tip

    By default, Python versions are automatically downloaded as needed without using
    `uv python install`.

To install a Python version at a specific version:

```console
$ uv python install 3.12.3
```

To install the latest patch version:

```console
$ uv python install 3.12
```

To install a version that satisfies constraints:

```console
$ uv python install '&gt;=3.8,&lt;3.10'
```

To install multiple versions:

```console
$ uv python install 3.9 3.10 3.11
```

To install a specific implementation:

```console
$ uv python install pypy
```

All of the [Python version request](#requesting-a-version) formats are supported except those that
are used for requesting local interpreters such as a file path.

By default `uv python install` will verify that a managed Python version is installed or install the
latest version. If a `.python-version` file is present, uv will install the Python version listed in
the file. A project that requires multiple Python versions may define a `.python-versions` file. If
present, uv will install all of the Python versions listed in the file.

!!! important

    The available Python versions are frozen for each uv release. To install new Python versions,
    you may need upgrade uv.

### Installing Python executables

!!! important

    Support for installing Python executables is in _preview_, this means the behavior is experimental
    and subject to change.

To install Python executables into your `PATH`, provide the `--preview` option:

```console
$ uv python install 3.12 --preview
```

This will install a Python executable for the requested version into `~/.local/bin`, e.g., as
`python3.12`.

!!! tip

    If `~/.local/bin` is not in your `PATH`, you can add it with `uv tool update-shell`.

To install `python` and `python3` executables, include the `--default` option:

```console
$ uv python install 3.12 --default --preview
```

When installing Python executables, uv will only overwrite an existing executable if it is managed
by uv ‚Äî e.g., if `~/.local/bin/python3.12` exists already uv will not overwrite it without the
`--force` flag.

uv will update executables that it manages. However, it will prefer the latest patch version of each
Python minor version by default. For example:

```console
$ uv python install 3.12.7 --preview  # Adds `python3.12` to `~/.local/bin`
$ uv python install 3.12.6 --preview  # Does not update `python3.12`
$ uv python install 3.12.8 --preview  # Updates `python3.12` to point to 3.12.8
```

## Project Python versions

uv will respect Python requirements defined in `requires-python` in the `pyproject.toml` file during
project command invocations. The first Python version that is compatible with the requirement will
be used, unless a version is otherwise requested, e.g., via a `.python-version` file or the
`--python` flag.

## Viewing available Python versions

To list installed and available Python versions:

```console
$ uv python list
```

To filter the Python versions, provide a request, e.g., to show all Python 3.13 interpreters:

```console
$ uv python list 3.13
```

Or, to show all PyPy interpreters:

```console
$ uv python list pypy
```

By default, downloads for other platforms and old patch versions are hidden.

To view all versions:

```console
$ uv python list --all-versions
```

To view Python versions for other platforms:

```console
$ uv python list --all-platforms
```

To exclude downloads and only show installed Python versions:

```console
$ uv python list --only-installed
```

See the [`uv python list`](../reference/cli.md#uv-python-list) reference for more details.

## Finding a Python executable

To find a Python executable, use the `uv python find` command:

```console
$ uv python find
```

By default, this will display the path to the first available Python executable. See the
[discovery rules](#discovery-of-python-versions) for details about how executables are discovered.

This interface also supports many [request formats](#requesting-a-version), e.g., to find a Python
executable that has a version of 3.11 or newer:

```console
$ uv python find '&gt;=3.11'
```

By default, `uv python find` will include Python versions from virtual environments. If a `.venv`
directory is found in the working directory or any of the parent directories or the `VIRTUAL_ENV`
environment variable is set, it will take precedence over any Python executables on the `PATH`.

To ignore virtual environments, use the `--system` flag:

```console
$ uv python find --system
```

## Discovery of Python versions

When searching for a Python version, the following locations are checked:

- Managed Python installations in the `UV_PYTHON_INSTALL_DIR`.
- A Python interpreter on the `PATH` as `python`, `python3`, or `python3.x` on macOS and Linux, or
  `python.exe` on Windows.
- On Windows, the Python interpreters in the Windows registry and Microsoft Store Python
  interpreters (see `py --list-paths`) that match the requested version.

In some cases, uv allows using a Python version from a virtual environment. In this case, the
virtual environment's interpreter will be checked for compatibility with the request before
searching for an installation as described above. See the
[pip-compatible virtual environment discovery](../pip/environments.md#discovery-of-python-environments)
documentation for details.

When performing discovery, non-executable files will be ignored. Each discovered executable is
queried for metadata to ensure it meets the [requested Python version](#requesting-a-version). If
the query fails, the executable will be skipped. If the executable satisfies the request, it is used
without inspecting additional executables.

When searching for a managed Python version, uv will prefer newer versions first. When searching for
a system Python version, uv will use the first compatible version ‚Äî not the newest version.

If a Python version cannot be found on the system, uv will check for a compatible managed Python
version download.

### Python pre-releases

Python pre-releases will not be selected by default. Python pre-releases will be used if there is no
other available installation matching the request. For example, if only a pre-release version is
available it will be used but otherwise a stable release version will be used. Similarly, if the
path to a pre-release Python executable is provided then no other Python version matches the request
and the pre-release version will be used.

If a pre-release Python version is available and matches the request, uv will not download a stable
Python version instead.

## Disabling automatic Python downloads

By default, uv will automatically download Python versions when needed.

The [`python-downloads`](../reference/settings.md#python-downloads) option can be used to disable
this behavior. By default, it is set to `automatic`; set to `manual` to only allow Python downloads
during `uv python install`.

!!! tip

    The `python-downloads` setting can be set in a
    [persistent configuration file](../configuration/files.md) to change the default behavior, or
    the `--no-python-downloads` flag can be passed to any uv command.

## Requiring or disabling managed Python versions

By default, uv will attempt to use Python versions found on the system and only download managed
Python versions when necessary. To ignore system Python versions, and only use managed Python
versions, use the `--managed-python` flag:

```console
$ uv python list --managed-python
```

Similarly, to ignore managed Python versions and only use system Python versions, use the
`--no-managed-python` flag:

```console
$ uv python list --no-managed-python
```

To change uv's default behavior in a configuration file, use the
[`python-preference` setting](#adjusting-python-version-preferences).

## Adjusting Python version preferences

The [`python-preference`](../reference/settings.md#python-preference) setting determines whether to
prefer using Python installations that are already present on the system, or those that are
downloaded and installed by uv.

By default, the `python-preference` is set to `managed` which prefers managed Python installations
over system Python installations. However, system Python installations are still preferred over
downloading a managed Python version.

The following alternative options are available:

- `only-managed`: Only use managed Python installations; never use system Python installations.
  Equivalent to `--managed-python`.
- `system`: Prefer system Python installations over managed Python installations.
- `only-system`: Only use system Python installations; never use managed Python installations.
  Equivalent to `--no-managed-python`.

!!! note

    Automatic Python version downloads can be [disabled](#disabling-automatic-python-downloads)
    without changing the preference.

## Python implementation support

uv supports the CPython, PyPy, and GraalPy Python implementations. If a Python implementation is not
supported, uv will fail to discover its interpreter.

The implementations may be requested with either the long or short name:

- CPython: `cpython`, `cp`
- PyPy: `pypy`, `pp`
- GraalPy: `graalpy`, `gp`

Implementation name requests are not case sensitive.

See the [Python version request](#requesting-a-version) documentation for more details on the
supported formats.

## Managed Python distributions

uv supports downloading and installing CPython and PyPy distributions.

### CPython distributions

As Python does not publish official distributable CPython binaries, uv instead uses pre-built
distributions from the Astral
[`python-build-standalone`](https://github.com/astral-sh/python-build-standalone) project.
`python-build-standalone` is also is used in many other Python projects, like
[Rye](https://github.com/astral-sh/rye), [Mise](https://mise.jdx.dev/lang/python.html), and
[bazelbuild/rules_python](https://github.com/bazelbuild/rules_python).

The uv Python distributions are self-contained, highly-portable, and performant. While Python can be
built from source, as in tools like `pyenv`, doing so requires preinstalled system dependencies, and
creating optimized, performant builds (e.g., with PGO and LTO enabled) is very slow.

These distributions have some behavior quirks, generally as a consequence of portability; see the
[`python-build-standalone` quirks](https://gregoryszorc.com/docs/python-build-standalone/main/quirks.html)
documentation for details. Additionally, some platforms may not be supported (e.g., distributions
are not yet available for musl Linux on ARM).

### PyPy distributions

PyPy distributions are provided by the PyPy project.
</file>
        <file path="docs/concepts/resolution.md"># Resolution

Resolution is the process of taking a list of requirements and converting them to a list of package
versions that fulfill the requirements. Resolution requires recursively searching for compatible
versions of packages, ensuring that the requested requirements are fulfilled and that the
requirements of the requested packages are compatible.

## Dependencies

Most projects and packages have dependencies. Dependencies are other packages that are necessary in
order for the current package to work. A package defines its dependencies as _requirements_, roughly
a combination of a package name and acceptable versions. The dependencies defined by the current
project are called _direct dependencies_. The dependencies added by each dependency of the current
project are called _indirect_ or _transitive dependencies_.

!!! note

    See the [dependency specifiers
    page](https://packaging.python.org/en/latest/specifications/dependency-specifiers/)
    in the Python Packaging documentation for details about dependencies.

## Basic examples

To help demonstrate the resolution process, consider the following dependencies:

&lt;!-- prettier-ignore --&gt;
- The project depends on `foo` and `bar`.
- `foo` has one version, 1.0.0:
    - `foo 1.0.0` depends on `lib&gt;=1.0.0`.
- `bar` has one version, 1.0.0:
    - `bar 1.0.0` depends on `lib&gt;=2.0.0`.
- `lib` has two versions, 1.0.0 and 2.0.0. Both versions have no dependencies.

In this example, the resolver must find a set of package versions which satisfies the project
requirements. Since there is only one version of both `foo` and `bar`, those will be used. The
resolution must also include the transitive dependencies, so a version of `lib` must be chosen.
`foo 1.0.0` allows all available versions of `lib`, but `bar 1.0.0` requires `lib&gt;=2.0.0` so
`lib 2.0.0` must be used.

In some resolutions, there may be more than one valid solution. Consider the following dependencies:

&lt;!-- prettier-ignore --&gt;
- The project depends on `foo` and `bar`.
- `foo` has two versions, 1.0.0 and 2.0.0:
    - `foo 1.0.0` has no dependencies.
    - `foo 2.0.0` depends on `lib==2.0.0`.
- `bar` has two versions, 1.0.0 and 2.0.0:
    - `bar 1.0.0` has no dependencies.
    - `bar 2.0.0` depends on `lib==1.0.0`
- `lib` has two versions, 1.0.0 and 2.0.0. Both versions have no dependencies.

In this example, some version of both `foo` and `bar` must be selected; however, determining which
version requires considering the dependencies of each version of `foo` and `bar`. `foo 2.0.0` and
`bar 2.0.0` cannot be installed together as they conflict on their required version of `lib`, so the
resolver must select either `foo 1.0.0` (along with `bar 2.0.0`) or `bar 1.0.0` (along with
`foo 1.0.0`). Both are valid solutions, and different resolution algorithms may yield either result.

## Platform markers

Markers allow attaching an expression to requirements that indicate when the dependency should be
used. For example `bar ; python_version &lt; &quot;3.9&quot;` indicates that `bar` should only be installed on
Python 3.8 and earlier.

Markers are used to adjust a package's dependencies based on the current environment or platform.
For example, markers can be used to modify dependencies by operating system, CPU architecture,
Python version, Python implementation, and more.

!!! note

    See the [environment
    markers](https://packaging.python.org/en/latest/specifications/dependency-specifiers/#environment-markers)
    section in the Python Packaging documentation for more details about markers.

Markers are important for resolution because their values change the required dependencies.
Typically, Python package resolvers use the markers of the _current_ platform to determine which
dependencies to use since the package is often being _installed_ on the current platform. However,
for _locking_ dependencies this is problematic ‚Äî the lockfile would only work for developers using
the same platform the lockfile was created on. To solve this problem, platform-independent, or
&quot;universal&quot; resolvers exist.

uv supports both [platform-specific](#platform-specific-resolution) and
[universal](#universal-resolution) resolution.

## Platform-specific resolution

By default, uv's pip interface, i.e., [`uv pip compile`](../pip/compile.md), produces a resolution
that is platform-specific, like `pip-tools`. There is no way to use platform-specific resolution in
the uv's project interface.

uv also supports resolving for specific, alternate platforms and Python versions with the
`--python-platform` and `--python-version` options. For example, if using Python 3.12 on macOS,
`uv pip compile --python-platform linux --python-version 3.10 requirements.in` can be used to
produce a resolution for Python 3.10 on Linux instead. Unlike universal resolution, during
platform-specific resolution, the provided `--python-version` is the exact python version to use,
not a lower bound.

!!! note

    Python's environment markers expose far more information about the current machine
    than can be expressed by a simple `--python-platform` argument. For example, the `platform_version` marker
    on macOS includes the time at which the kernel was built, which can (in theory) be encoded in
    package requirements. uv's resolver makes a best-effort attempt to generate a resolution that is
    compatible with any machine running on the target `--python-platform`, which should be sufficient for
    most use cases, but may lose fidelity for complex package and platform combinations.

## Universal resolution

uv's lockfile (`uv.lock`) is created with a universal resolution and is portable across platforms.
This ensures that dependencies are locked for everyone working on the project, regardless of
operating system, architecture, and Python version. The uv lockfile is created and modified by
[project](../concepts/projects/index.md) commands such as `uv lock`, `uv sync`, and `uv add`.

Universal resolution is also available in uv's pip interface, i.e.,
[`uv pip compile`](../pip/compile.md), with the `--universal` flag. The resulting requirements file
will contain markers to indicate which platform each dependency is relevant for.

During universal resolution, a package may be listed multiple times with different versions or URLs
if different versions are needed for different platforms ‚Äî the markers determine which version will
be used. A universal resolution is often more constrained than a platform-specific resolution, since
we need to take the requirements for all markers into account.

During universal resolution, all required packages must be compatible with the _entire_ range of
`requires-python` declared in the `pyproject.toml`. For example, if a project's `requires-python` is
`&gt;=3.8`, resolution will fail if all versions of given dependency require Python 3.9 or later, since
the dependency lacks a usable version for (e.g.) Python 3.8, the lower bound of the project's
supported range. In other words, the project's `requires-python` must be a subset of the
`requires-python` of all its dependencies.

When selecting the compatible version for a given dependency, uv will
([by default](#multi-version-resolution)) attempt to choose the latest compatible version for each
supported Python version. For example, if a project's `requires-python` is `&gt;=3.8`, and the latest
version of a dependency requires Python 3.9 or later, while all prior versions supporting Python
3.8, the resolver will select the latest version for users running Python 3.9 or later, and previous
versions for users running Python 3.8.

When evaluating `requires-python` ranges for dependencies, uv only considers lower bounds and
ignores upper bounds entirely. For example, `&gt;=3.8, &lt;4` is treated as `&gt;=3.8`. Respecting upper
bounds on `requires-python` often leads to formally correct but practically incorrect resolutions,
as, e.g., resolvers will backtrack to the first published version that omits the upper bound (see:
[`Requires-Python` upper limits](https://discuss.python.org/t/requires-python-upper-limits/12663)).

### Limited resolution environments

By default, the universal resolver attempts to solve for all platforms and Python versions.

If your project supports only a limited set of platforms or Python versions, you can constrain the
set of solved platforms via the `environments` setting, which accepts a list of
[PEP 508 environment markers](https://packaging.python.org/en/latest/specifications/dependency-specifiers/#environment-markers).
In other words, you can use the `environments` setting to _reduce_ the set of supported platforms.

For example, to constrain the lockfile to macOS and Linux, and avoid solving for Windows:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
environments = [
    &quot;sys_platform == 'darwin'&quot;,
    &quot;sys_platform == 'linux'&quot;,
]
```

Or, to avoid solving for alternative Python implementations:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
environments = [
    &quot;implementation_name == 'cpython'&quot;
]
```

Entries in the `environments` setting must be disjoint (i.e., they must not overlap). For example,
`sys_platform == 'darwin'` and `sys_platform == 'linux'` are disjoint, but
`sys_platform == 'darwin'` and `python_version &gt;= '3.9'` are not, since both could be true at the
same time.

### Required environments

In the Python ecosystem, packages can be published as source distributions, built distributions
(wheels), or both; but to install a package, a built distribution is required. If a package lacks a
built distribution, or lacks a distribution for the current platform or Python version (built
distributions are often platform-specific), uv will attempt to build the package from source, then
install the resulting built distribution.

Some packages (like PyTorch) publish built distributions, but omit a source distribution. Such
packages are _only_ installable on platforms for which a built distribution is available. For
example, if a package publishes built distributions for Linux, but not macOS or Windows, then that
package will _only_ be installable on Linux.

Packages that lack source distributions cause problems for universal resolution, since there will
typically be at least one platform or Python version for which the package is not installable.

By default, uv requires each such package to include at least one wheel that is compatible with the
target Python version. The `required-environments` setting can be used to ensure that the resulting
resolution contains wheels for specific platforms, or fails if no such wheels are available. The
setting accepts a list of
[PEP 508 environment markers](https://packaging.python.org/en/latest/specifications/dependency-specifiers/#environment-markers).

While the `environments` setting _limits_ the set of environments that uv will consider when
resolving dependencies, `required-environments` _expands_ the set of platforms that uv _must_
support when resolving dependencies.

For example, `environments = [&quot;sys_platform == 'darwin'&quot;]` would limit uv to solving for macOS (and
ignoring Linux and Windows). On the other hand,
`required-environments = [&quot;sys_platform == 'darwin'&quot;]` would _require_ that any package without a
source distribution include a wheel for macOS in order to be installable (and would fail if no such
wheel is available).

In practice, `required-environments` can be useful for declaring explicit support for non-latest
platforms, since this often requires backtracking past the latest published versions of those
packages. For example, to guarantee that any built distribution-only packages includes support for
Intel macOS:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
required-environments = [
    &quot;sys_platform == 'darwin' and platform_machine == 'x86_64'&quot;
]
```

## Dependency preferences

If resolution output file exists, i.e., a uv lockfile (`uv.lock`) or a requirements output file
(`requirements.txt`), uv will _prefer_ the dependency versions listed there. Similarly, if
installing a package into a virtual environment, uv will prefer the already installed version if
present. This means that locked or installed versions will not change unless an incompatible version
is requested or an upgrade is explicitly requested with `--upgrade`.

## Resolution strategy

By default, uv tries to use the latest version of each package. For example,
`uv pip install flask&gt;=2.0.0` will install the latest version of Flask, e.g., 3.0.0. If
`flask&gt;=2.0.0` is a dependency of the project, only `flask` 3.0.0 will be used. This is important,
for example, because running tests will not check that the project is actually compatible with its
stated lower bound of `flask` 2.0.0.

With `--resolution lowest`, uv will install the lowest possible version for all dependencies, both
direct and indirect (transitive). Alternatively, `--resolution lowest-direct` will use the lowest
compatible versions for all direct dependencies, while using the latest compatible versions for all
other dependencies. uv will always use the latest versions for build dependencies.

For example, given the following `requirements.in` file:

```python title=&quot;requirements.in&quot;
flask&gt;=2.0.0
```

Running `uv pip compile requirements.in` would produce the following `requirements.txt` file:

```python title=&quot;requirements.txt&quot;
# This file was autogenerated by uv via the following command:
#    uv pip compile requirements.in
blinker==1.7.0
    # via flask
click==8.1.7
    # via flask
flask==3.0.0
itsdangerous==2.1.2
    # via flask
jinja2==3.1.2
    # via flask
markupsafe==2.1.3
    # via
    #   jinja2
    #   werkzeug
werkzeug==3.0.1
    # via flask
```

However, `uv pip compile --resolution lowest requirements.in` would instead produce:

```python title=&quot;requirements.in&quot;
# This file was autogenerated by uv via the following command:
#    uv pip compile requirements.in --resolution lowest
click==7.1.2
    # via flask
flask==2.0.0
itsdangerous==2.0.0
    # via flask
jinja2==3.0.0
    # via flask
markupsafe==2.0.0
    # via jinja2
werkzeug==2.0.0
    # via flask
```

When publishing libraries, it is recommended to separately run tests with `--resolution lowest` or
`--resolution lowest-direct` in continuous integration to ensure compatibility with the declared
lower bounds.

## Pre-release handling

By default, uv will accept pre-release versions during dependency resolution in two cases:

1. If the package is a direct dependency, and its version specifiers include a pre-release specifier
   (e.g., `flask&gt;=2.0.0rc1`).
1. If _all_ published versions of a package are pre-releases.

If dependency resolution fails due to a transitive pre-release, uv will prompt use of
`--prerelease allow` to allow pre-releases for all dependencies.

Alternatively, the transitive dependency can be added as a [constraint](#dependency-constraints) or
direct dependency (i.e. in `requirements.in` or `pyproject.toml`) with a pre-release version
specifier (e.g., `flask&gt;=2.0.0rc1`) to opt-in to pre-release support for that specific dependency.

Pre-releases are
[notoriously difficult](https://pubgrub-rs-guide.netlify.app/limitations/prerelease_versions) to
model, and are a frequent source of bugs in other packaging tools. uv's pre-release handling is
_intentionally_ limited and requires user opt-in for pre-releases to ensure correctness.

For more details, see
[Pre-release compatibility](../pip/compatibility.md#pre-release-compatibility).

## Multi-version resolution

During universal resolution, a package may be listed multiple times with different versions or URLs
within the same lockfile, since different versions may be needed for different platforms or Python
versions.

The `--fork-strategy` setting can be used to control how uv trades off between (1) minimizing the
number of selected versions and (2) selecting the latest-possible version for each platform. The
former leads to greater consistency across platforms, while the latter leads to use of newer package
versions where possible.

By default (`--fork-strategy requires-python`), uv will optimize for selecting the latest version of
each package for each supported Python version, while minimizing the number of selected versions
across platforms.

For example, when resolving `numpy` with a Python requirement of `&gt;=3.8`, uv would select the
following versions:

```txt
numpy==1.24.4 ; python_version == &quot;3.8&quot;
numpy==2.0.2 ; python_version == &quot;3.9&quot;
numpy==2.2.0 ; python_version &gt;= &quot;3.10&quot;
```

This resolution reflects the fact that NumPy 2.2.0 and later require at least Python 3.10, while
earlier versions are compatible with Python 3.8 and 3.9.

Under `--fork-strategy fewest`, uv will instead minimize the number of selected versions for each
package, preferring older versions that are compatible with a wider range of supported Python
versions or platforms.

For example, when in the scenario above, uv would select `numpy==1.24.4` for all Python versions,
rather than upgrading to `numpy==2.0.2` for Python 3.9 and `numpy==2.2.0` for Python 3.10 and later.

## Dependency constraints

Like pip, uv supports constraint files (`--constraint constraints.txt`) which narrow the set of
acceptable versions for the given packages. Constraint files are similar to requirements files, but
being listed as a constraint alone will not cause a package to be included to the resolution.
Instead, constraints only take effect if a requested package is already pulled in as a direct or
transitive dependency. Constraints are useful for reducing the range of available versions for a
transitive dependency. They can also be used to keep a resolution in sync with some other set of
resolved versions, regardless of which packages are overlapping between the two.

## Dependency overrides

Dependency overrides allow bypassing unsuccessful or undesirable resolutions by overriding a
package's declared dependencies. Overrides are a useful last resort for cases in which you _know_
that a dependency is compatible with a certain version of a package, despite the metadata indicating
otherwise.

For example, if a transitive dependency declares the requirement `pydantic&gt;=1.0,&lt;2.0`, but _does_
work with `pydantic&gt;=2.0`, the user can override the declared dependency by including
`pydantic&gt;=1.0,&lt;3` in the overrides, thereby allowing the resolver to choose a newer version of
`pydantic`.

Concretely, if `pydantic&gt;=1.0,&lt;3` is included as an override, uv will ignore all declared
requirements on `pydantic`, replacing them with the override. In the above example, the
`pydantic&gt;=1.0,&lt;2.0` requirement would be ignored completely, and would instead be replaced with
`pydantic&gt;=1.0,&lt;3`.

While constraints can only _reduce_ the set of acceptable versions for a package, overrides can
_expand_ the set of acceptable versions, providing an escape hatch for erroneous upper version
bounds. As with constraints, overrides do not add a dependency on the package and only take effect
if the package is requested in a direct or transitive dependency.

In a `pyproject.toml`, use `tool.uv.override-dependencies` to define a list of overrides. In the
pip-compatible interface, the `--override` option can be used to pass files with the same format as
constraints files.

If multiple overrides are provided for the same package, they must be differentiated with
[markers](#platform-markers). If a package has a dependency with a marker, it is replaced
unconditionally when using overrides ‚Äî it does not matter if the marker evaluates to true or false.

## Dependency metadata

During resolution, uv needs to resolve the metadata for each package it encounters, in order to
determine its dependencies. This metadata is often available as a static file in the package index;
however, for packages that only provide source distributions, the metadata may not be available
upfront.

In such cases, uv has to build the package to determine its metadata (e.g., by invoking `setup.py`).
This can introduce a performance penalty during resolution. Further, it imposes the requirement that
the package can be built on all platforms, which may not be true.

For example, you may have a package that should only be built and installed on Linux, but doesn't
build successfully on macOS or Windows. While uv can construct a perfectly valid lockfile for this
scenario, doing so would require building the package, which would fail on non-Linux platforms.

The `tool.uv.dependency-metadata` table can be used to provide static metadata for such dependencies
upfront, thereby allowing uv to skip the build step and use the provided metadata instead.

For example, to provide metadata for `chumpy` upfront, include its `dependency-metadata` in the
`pyproject.toml`:

```toml
[[tool.uv.dependency-metadata]]
name = &quot;chumpy&quot;
version = &quot;0.70&quot;
requires-dist = [&quot;numpy&gt;=1.8.1&quot;, &quot;scipy&gt;=0.13.0&quot;, &quot;six&gt;=1.11.0&quot;]
```

These declarations are intended for cases in which a package does _not_ declare static metadata
upfront, though they are also useful for packages that require disabling build isolation. In such
cases, it may be easier to declare the package metadata upfront, rather than creating a custom build
environment prior to resolving the package.

For example, you can declare the metadata for `flash-attn`, allowing uv to resolve without building
the package from source (which itself requires installing `torch`):

```toml
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = [&quot;flash-attn&quot;]

[tool.uv.sources]
flash-attn = { git = &quot;https://github.com/Dao-AILab/flash-attention&quot;, tag = &quot;v2.6.3&quot; }

[[tool.uv.dependency-metadata]]
name = &quot;flash-attn&quot;
version = &quot;2.6.3&quot;
requires-dist = [&quot;torch&quot;, &quot;einops&quot;]
```

Like dependency overrides, `tool.uv.dependency-metadata` can also be used for cases in which a
package's metadata is incorrect or incomplete, or when a package is not available in the package
index. While dependency overrides allow overriding the allowed versions of a package globally,
metadata overrides allow overriding the declared metadata of a _specific package_.

!!! note

    The `version` field in `tool.uv.dependency-metadata` is optional for registry-based
    dependencies (when omitted, uv will assume the metadata applies to all versions of the package),
    but _required_ for direct URL dependencies (like Git dependencies).

Entries in the `tool.uv.dependency-metadata` table follow the
[Metadata 2.3](https://packaging.python.org/en/latest/specifications/core-metadata/) specification,
though only `name`, `version`, `requires-dist`, `requires-python`, and `provides-extra` are read by
uv. The `version` field is also considered optional. If omitted, the metadata will be used for all
versions of the specified package.

## Lower bounds

By default, `uv add` adds lower bounds to dependencies and, when using uv to manage projects, uv
will warn if direct dependencies don't have lower bound.

Lower bounds are not critical in the &quot;happy path&quot;, but they are important for cases where there are
dependency conflicts. For example, consider a project that requires two packages and those packages
have conflicting dependencies. The resolver needs to check all combinations of all versions within
the constraints for the two packages ‚Äî if all of them conflict, an error is reported because the
dependencies are not satisfiable. If there are no lower bounds, the resolver can (and often will)
backtrack down to the oldest version of a package. This isn't only problematic because it's slow,
the old version of the package often fails to build, or the resolver can end up picking a version
that's old enough that it doesn't depend on the conflicting package, but also doesn't work with your
code.

Lower bounds are particularly critical when writing a library. It's important to declare the lowest
version for each dependency that your library works with, and to validate that the bounds are
correct ‚Äî testing with
[`--resolution lowest` or `--resolution lowest-direct`](#resolution-strategy). Otherwise, a user may
receive an old, incompatible version of one of your library's dependencies and the library will fail
with an unexpected error.

## Reproducible resolutions

uv supports an `--exclude-newer` option to limit resolution to distributions published before a
specific date, allowing reproduction of installations regardless of new package releases. The date
may be specified as an [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) timestamp (e.g.,
`2006-12-02T02:07:43Z`) or a local date in the same format (e.g., `2006-12-02`) in your system's
configured time zone.

Note the package index must support the `upload-time` field as specified in
[`PEP 700`](https://peps.python.org/pep-0700/). If the field is not present for a given
distribution, the distribution will be treated as unavailable. PyPI provides `upload-time` for all
packages.

To ensure reproducibility, messages for unsatisfiable resolutions will not mention that
distributions were excluded due to the `--exclude-newer` flag ‚Äî newer distributions will be treated
as if they do not exist.

!!! note

    The `--exclude-newer` option is only applied to packages that are read from a registry (as opposed to, e.g., Git
    dependencies). Further, when using the `uv pip` interface, uv will not downgrade previously installed packages
    unless the `--reinstall` flag is provided, in which case uv will perform a new resolution.

## Source distribution

[PEP 625](https://peps.python.org/pep-0625/) specifies that packages must distribute source
distributions as gzip tarball (`.tar.gz`) archives. Prior to this specification, other archive
formats, which need to be supported for backward compatibility, were also allowed. uv supports
reading and extracting archives in the following formats:

- gzip tarball (`.tar.gz`, `.tgz`)
- bzip2 tarball (`.tar.bz2`, `.tbz`)
- xz tarball (`.tar.xz`, `.txz`)
- zstd tarball (`.tar.zst`)
- lzip tarball (`.tar.lz`)
- lzma tarball (`.tar.lzma`)
- zip (`.zip`)

## Learn more

For more details about the internals of the resolver, see the
[resolver reference](../reference/resolver-internals.md) documentation.

## Lockfile versioning

The `uv.lock` file uses a versioned schema. The schema version is included in the `version` field of
the lockfile.

Any given version of uv can read and write lockfiles with the same schema version, but will reject
lockfiles with a greater schema version. For example, if your uv version supports schema v1,
`uv lock` will error if it encounters an existing lockfile with schema v2.

uv versions that support schema v2 _may_ be able to read lockfiles with schema v1 if the schema
update was backwards-compatible. However, this is not guaranteed, and uv may exit with an error if
it encounters a lockfile with an outdated schema version.

The schema version is considered part of the public API, and so is only bumped in minor releases, as
a breaking change (see [Versioning](../reference/policies/versioning.md)). As such, all uv patch
versions within a given minor uv release are guaranteed to have full lockfile compatibility. In
other words, lockfiles may only be rejected across minor releases.
</file>
        <file path="docs/concepts/tools.md"># Tools

Tools are Python packages that provide command-line interfaces.

!!! note

    See the [tools guide](../guides/tools.md) for an introduction to working with the tools
    interface ‚Äî this document discusses details of tool management.

## The `uv tool` interface

uv includes a dedicated interface for interacting with tools. Tools can be invoked without
installation using `uv tool run`, in which case their dependencies are installed in a temporary
virtual environment isolated from the current project.

Because it is very common to run tools without installing them, a `uvx` alias is provided for
`uv tool run` ‚Äî the two commands are exactly equivalent. For brevity, the documentation will mostly
refer to `uvx` instead of `uv tool run`.

Tools can also be installed with `uv tool install`, in which case their executables are
[available on the `PATH`](#the-path) ‚Äî an isolated virtual environment is still used, but it is not
removed when the command completes.

## Execution vs installation

In most cases, executing a tool with `uvx` is more appropriate than installing the tool. Installing
the tool is useful if you need the tool to be available to other programs on your system, e.g., if
some script you do not control requires the tool, or if you are in a Docker image and want to make
the tool available to users.

## Tool environments

When running a tool with `uvx`, a virtual environment is stored in the uv cache directory and is
treated as disposable, i.e., if you run `uv cache clean` the environment will be deleted. The
environment is only cached to reduce the overhead of repeated invocations. If the environment is
removed, a new one will be created automatically.

When installing a tool with `uv tool install`, a virtual environment is created in the uv tools
directory. The environment will not be removed unless the tool is uninstalled. If the environment is
manually deleted, the tool will fail to run.

## Tool versions

Unless a specific version is requested, `uv tool install` will install the latest available of the
requested tool. `uvx` will use the latest available version of the requested tool _on the first
invocation_. After that, `uvx` will use the cached version of the tool unless a different version is
requested, the cache is pruned, or the cache is refreshed.

For example, to run a specific version of Ruff:

```console
$ uvx ruff@0.6.0 --version
ruff 0.6.0
```

A subsequent invocation of `uvx` will use the latest, not the cached, version.

```console
$ uvx ruff --version
ruff 0.6.2
```

But, if a new version of Ruff was released, it would not be used unless the cache was refreshed.

To request the latest version of Ruff and refresh the cache, use the `@latest` suffix:

```console
$ uvx ruff@latest --version
0.6.2
```

Once a tool is installed with `uv tool install`, `uvx` will use the installed version by default.

For example, after installing an older version of Ruff:

```console
$ uv tool install ruff==0.5.0
```

The version of `ruff` and `uvx ruff` is the same:

```console
$ ruff --version
ruff 0.5.0
$ uvx ruff --version
ruff 0.5.0
```

However, you can ignore the installed version by requesting the latest version explicitly, e.g.:

```console
$ uvx ruff@latest --version
0.6.2
```

Or, by using the `--isolated` flag, which will avoid refreshing the cache but ignore the installed
version:

```console
$ uvx --isolated ruff --version
0.6.2
```

`uv tool install` will also respect the `{package}@{version}` and `{package}@latest` specifiers, as
in:

```console
$ uv tool install ruff@latest
$ uv tool install ruff@0.6.0
```

## Tools directory

By default, the uv tools directory is named `tools` and is in the uv application state directory,
e.g., `~/.local/share/uv/tools`. The location may be customized with the `UV_TOOL_DIR` environment
variable.

To display the path to the tool installation directory:

```console
$ uv tool dir
```

Tool environments are placed in a directory with the same name as the tool package, e.g.,
`.../tools/&lt;name&gt;`.

!!! important

    Tool environments are _not_ intended to be mutated directly. It is strongly recommended never to
    mutate a tool environment manually, e.g., with a `pip` operation.

## Upgrading tools

Tool environments may be upgraded via `uv tool upgrade`, or re-created entirely via subsequent
`uv tool install` operations.

To upgrade all packages in a tool environment

```console
$ uv tool upgrade black
```

To upgrade a single package in a tool environment:

```console
$ uv tool upgrade black --upgrade-package click
```

Tool upgrades will respect the version constraints provided when installing the tool. For example,
`uv tool install black &gt;=23,&lt;24` followed by `uv tool upgrade black` will upgrade Black to the
latest version in the range `&gt;=23,&lt;24`.

To instead replace the version constraints, reinstall the tool with `uv tool install`:

```console
$ uv tool install black&gt;=24
```

Similarly, tool upgrades will retain the settings provided when installing the tool. For example,
`uv tool install black --prerelease allow` followed by `uv tool upgrade black` will retain the
`--prerelease allow` setting.

!!! note

    Tool upgrades will reinstall the tool executables, even if they have not changed.

To reinstall packages during upgrade, use the `--reinstall` and `--reinstall-package` options.

To reinstall all packages in a tool environment

```console
$ uv tool upgrade black --reinstall
```

To reinstall a single package in a tool environment:

```console
$ uv tool upgrade black --reinstall-package click
```

## Including additional dependencies

Additional packages can be included during tool execution:

```console
$ uvx --with &lt;extra-package&gt; &lt;tool&gt;
```

And, during tool installation:

```console
$ uv tool install --with &lt;extra-package&gt; &lt;tool-package&gt;
```

The `--with` option can be provided multiple times to include additional packages.

The `--with` option supports package specifications, so a specific version can be requested:

```console
$ uvx --with &lt;extra-package&gt;==&lt;version&gt; &lt;tool-package&gt;
```

If the requested version conflicts with the requirements of the tool package, package resolution
will fail and the command will error.

## Tool executables

Tool executables include all console entry points, script entry points, and binary scripts provided
by a Python package. Tool executables are symlinked into the `bin` directory on Unix and copied on
Windows.

### The `bin` directory

Executables are installed into the user `bin` directory following the XDG standard, e.g.,
`~/.local/bin`. Unlike other directory schemes in uv, the XDG standard is used on _all platforms_
notably including Windows and macOS ‚Äî there is no clear alternative location to place executables on
these platforms. The installation directory is determined from the first available environment
variable:

- `$UV_TOOL_BIN_DIR`
- `$XDG_BIN_HOME`
- `$XDG_DATA_HOME/../bin`
- `$HOME/.local/bin`

Executables provided by dependencies of tool packages are not installed.

### The `PATH`

The `bin` directory must be in the `PATH` variable for tool executables to be available from the
shell. If it is not in the `PATH`, a warning will be displayed. The `uv tool update-shell` command
can be used to add the `bin` directory to the `PATH` in common shell configuration files.

### Overwriting executables

Installation of tools will not overwrite executables in the `bin` directory that were not previously
installed by uv. For example, if `pipx` has been used to install a tool, `uv tool install` will
fail. The `--force` flag can be used to override this behavior.

## Relationship to `uv run`

The invocation `uv tool run &lt;name&gt;` (or `uvx &lt;name&gt;`) is nearly equivalent to:

```console
$ uv run --no-project --with &lt;name&gt; -- &lt;name&gt;
```

However, there are a couple notable differences when using uv's tool interface:

- The `--with` option is not needed ‚Äî the required package is inferred from the command name.
- The temporary environment is cached in a dedicated location.
- The `--no-project` flag is not needed ‚Äî tools are always run isolated from the project.
- If a tool is already installed, `uv tool run` will use the installed version but `uv run` will
  not.

If the tool should not be isolated from the project, e.g., when running `pytest` or `mypy`, then
`uv run` should be used instead of `uv tool run`.
</file>
        <dir path="docs/concepts/projects">
          <file path="docs/concepts/projects/build.md"># Building distributions

To distribute your project to others (e.g., to upload it to an index like PyPI), you'll need to
build it into a distributable format.

Python projects are typically distributed as both source distributions (sdists) and binary
distributions (wheels). The former is typically a `.tar.gz` or `.zip` file containing the project's
source code along with some additional metadata, while the latter is a `.whl` file containing
pre-built artifacts that can be installed directly.

!!! important

    When using `uv build`, uv acts as a [build frontend](https://peps.python.org/pep-0517/#terminology-and-goals)
    and only determines the Python version to use and invokes the build backend. The details of
    the builds, such as the included files and the distribution filenames, are determined by the build
    backend, as defined in [`[build-system]`](./config.md#build-systems). Information about build
    configuration can be found in the respective tool's documentation.

## Using `uv build`

`uv build` can be used to build both source distributions and binary distributions for your project.
By default, `uv build` will build the project in the current directory, and place the built
artifacts in a `dist/` subdirectory:

```console
$ uv build
$ ls dist/
example-0.1.0-py3-none-any.whl
example-0.1.0.tar.gz
```

You can build the project in a different directory by providing a path to `uv build`, e.g.,
`uv build path/to/project`.

`uv build` will first build a source distribution, and then build a binary distribution (wheel) from
that source distribution.

You can limit `uv build` to building a source distribution with `uv build --sdist`, a binary
distribution with `uv build --wheel`, or build both distributions from source with
`uv build --sdist --wheel`.

## Build constraints

`uv build` accepts `--build-constraint`, which can be used to constrain the versions of any build
requirements during the build process. When coupled with `--require-hashes`, uv will enforce that
the requirement used to build the project match specific, known hashes, for reproducibility.

For example, given the following `constraints.txt`:

```text
setuptools==68.2.2 --hash=sha256:b454a35605876da60632df1a60f736524eb73cc47bbc9f3f1ef1b644de74fd2a
```

Running the following would build the project with the specified version of `setuptools`, and verify
that the downloaded `setuptools` distribution matches the specified hash:

```console
$ uv build --build-constraint constraints.txt --require-hashes
```
</file>
          <file path="docs/concepts/projects/config.md"># Configuring projects

## Python version requirement

Projects may declare the Python versions supported by the project in the `project.requires-python`
field of the `pyproject.toml`.

It is recommended to set a `requires-python` value:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;4&quot;
[project]
name = &quot;example&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12&quot;
```

The Python version requirement determines the Python syntax that is allowed in the project and
affects selection of dependency versions (they must support the same Python version range).

## Entry points

[Entry points](https://packaging.python.org/en/latest/specifications/entry-points/#entry-points) are
the official term for an installed package to advertise interfaces. These include:

- [Command line interfaces](#command-line-interfaces)
- [Graphical user interfaces](#graphical-user-interfaces)
- [Plugin entry points](#plugin-entry-points)

!!! important

    Using the entry point tables requires a [build system](#build-systems) to be defined.

### Command-line interfaces

Projects may define command line interfaces (CLIs) for the project in the `[project.scripts]` table
of the `pyproject.toml`.

For example, to declare a command called `hello` that invokes the `hello` function in the `example`
module:

```toml title=&quot;pyproject.toml&quot;
[project.scripts]
hello = &quot;example:hello&quot;
```

Then, the command can be run from a console:

```console
$ uv run hello
```

### Graphical user interfaces

Projects may define graphical user interfaces (GUIs) for the project in the `[project.gui-scripts]`
table of the `pyproject.toml`.

!!! important

    These are only different from [command-line interfaces](#command-line-interfaces) on Windows, where
    they are wrapped by a GUI executable so they can be started without a console. On other platforms,
    they behave the same.

For example, to declare a command called `hello` that invokes the `app` function in the `example`
module:

```toml title=&quot;pyproject.toml&quot;
[project.gui-scripts]
hello = &quot;example:app&quot;
```

### Plugin entry points

Projects may define entry points for plugin discovery in the
[`[project.entry-points]`](https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/#using-package-metadata)
table of the `pyproject.toml`.

For example, to register the `example-plugin-a` package as a plugin for `example`:

```toml title=&quot;pyproject.toml&quot;
[project.entry-points.'example.plugins']
a = &quot;example_plugin_a&quot;
```

Then, in `example`, plugins would be loaded with:

```python title=&quot;example/__init__.py&quot;
from importlib.metadata import entry_points

for plugin in entry_points(group='example.plugins'):
    plugin.load()
```

!!! note

    The `group` key can be an arbitrary value, it does not need to include the package name or
    &quot;plugins&quot;. However, it is recommended to namespace the key by the package name to avoid
    collisions with other packages.

## Build systems

A build system determines how the project should be packaged and installed. Projects may declare and
configure a build system in the `[build-system]` table of the `pyproject.toml`.

uv uses the presence of a build system to determine if a project contains a package that should be
installed in the project virtual environment. If a build system is not defined, uv will not attempt
to build or install the project itself, just its dependencies. If a build system is defined, uv will
build and install the project into the project environment.

The `--build-backend` option can be provided to `uv init` to create a packaged project with an
appropriate layout. The `--package` option can be provided to `uv init` to create a packaged project
with the default build system.

!!! note

    While uv will not build and install the current project without a build system definition,
    the presence of a `[build-system]` table is not required in other packages. For legacy reasons,
    if a build system is not defined, then `setuptools.build_meta:__legacy__` is used to build the
    package. Packages you depend on may not explicitly declare their build system but are still
    installable. Similarly, if you add a dependency on a local package or install it with `uv pip`,
    uv will always attempt to build and install it.

### Build system options

Build systems are used to power the following features:

- Including or excluding files from distributions
- Editable install behavior
- Dynamic project metadata
- Compilation of native code
- Vendoring shared libraries

To configure these features, refer to the documentation of your chosen build system.

## Project packaging

As discussed in [build systems](#build-systems), a Python project must be built to be installed.
This process is generally referred to as &quot;packaging&quot;.

You probably need a package if you want to:

- Add commands to the project
- Distribute the project to others
- Use a `src` and `test` layout
- Write a library

You probably _do not_ need a package if you are:

- Writing scripts
- Building a simple application
- Using a flat layout

While uv usually uses the declaration of a [build system](#build-systems) to determine if a project
should be packaged, uv also allows overriding this behavior with the
[`tool.uv.package`](../../reference/settings.md#package) setting.

Setting `tool.uv.package = true` will force a project to be built and installed into the project
environment. If no build system is defined, uv will use the setuptools legacy backend.

Setting `tool.uv.package = false` will force a project package _not_ to be built and installed into
the project environment. uv will ignore a declared build system when interacting with the project;
however, uv will still respect explicit attempts to build the project such as invoking `uv build`.

## Project environment path

The `UV_PROJECT_ENVIRONMENT` environment variable can be used to configure the project virtual
environment path (`.venv` by default).

If a relative path is provided, it will be resolved relative to the workspace root. If an absolute
path is provided, it will be used as-is, i.e., a child directory will not be created for the
environment. If an environment is not present at the provided path, uv will create it.

This option can be used to write to the system Python environment, though it is not recommended.
`uv sync` will remove extraneous packages from the environment by default and, as such, may leave
the system in a broken state.

To target the system environment, set `UV_PROJECT_ENVIRONMENT` to the prefix of the Python
installation. For example, on Debian-based systems, this is usually `/usr/local`:

```console
$ python -c &quot;import sysconfig; print(sysconfig.get_config_var('prefix'))&quot;
/usr/local
```

To target this environment, you'd export `UV_PROJECT_ENVIRONMENT=/usr/local`.

!!! important

    If an absolute path is provided and the setting is used across multiple projects, the
    environment will be overwritten by invocations in each project. This setting is only recommended
    for use for a single project in CI or Docker images.

!!! note

    By default, uv does not read the `VIRTUAL_ENV` environment variable during project operations.
    A warning will be displayed if `VIRTUAL_ENV` is set to a different path than the project's
    environment. The `--active` flag can be used to opt-in to respecting `VIRTUAL_ENV`. The
    `--no-active` flag can be used to silence the warning.

## Limited resolution environments

If your project supports a more limited set of platforms or Python versions, you can constrain the
set of solved platforms via the `environments` setting, which accepts a list of PEP 508 environment
markers. For example, to constrain the lockfile to macOS and Linux, and exclude Windows:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
environments = [
    &quot;sys_platform == 'darwin'&quot;,
    &quot;sys_platform == 'linux'&quot;,
]
```

See the [resolution documentation](../resolution.md#limited-resolution-environments) for more.

## Required environments

If your project _must_ support a specific platform or Python version, you can mark that platform as
required via the `required-environments` setting. For example, to require that the project supports
Intel macOS:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
required-environments = [
    &quot;sys_platform == 'darwin' and platform_machine == 'x86_64'&quot;,
]
```

The `required-environments` setting is only relevant for packages that do not publish a source
distribution (like PyTorch), as such packages can _only_ be installed on environments covered by the
set of pre-built binary distributions (wheels) published by that package.

See the [resolution documentation](../resolution.md#required-environments) for more.

## Build isolation

By default, uv builds all packages in isolated virtual environments, as per
[PEP 517](https://peps.python.org/pep-0517/). Some packages are incompatible with build isolation,
be it intentionally (e.g., due to the use of heavy build dependencies, mostly commonly PyTorch) or
unintentionally (e.g., due to the use of legacy packaging setups).

To disable build isolation for a specific dependency, add it to the `no-build-isolation-package`
list in your `pyproject.toml`:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
description = &quot;...&quot;
readme = &quot;README.md&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = [&quot;cchardet&quot;]

[tool.uv]
no-build-isolation-package = [&quot;cchardet&quot;]
```

Installing packages without build isolation requires that the package's build dependencies are
installed in the project environment _prior_ to installing the package itself. This can be achieved
by separating out the build dependencies and the packages that require them into distinct extras.
For example:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
description = &quot;...&quot;
readme = &quot;README.md&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = []

[project.optional-dependencies]
build = [&quot;setuptools&quot;, &quot;cython&quot;]
compile = [&quot;cchardet&quot;]

[tool.uv]
no-build-isolation-package = [&quot;cchardet&quot;]
```

Given the above, a user would first sync the `build` dependencies:

```console
$ uv sync --extra build
 + cython==3.0.11
 + foo==0.1.0 (from file:///Users/crmarsh/workspace/uv/foo)
 + setuptools==73.0.1
```

Followed by the `compile` dependencies:

```console
$ uv sync --extra compile
 + cchardet==2.1.7
 - cython==3.0.11
 - setuptools==73.0.1
```

Note that `uv sync --extra compile` would, by default, uninstall the `cython` and `setuptools`
packages. To instead retain the build dependencies, include both extras in the second `uv sync`
invocation:

```console
$ uv sync --extra build
$ uv sync --extra build --extra compile
```

Some packages, like `cchardet` above, only require build dependencies for the _installation_ phase
of `uv sync`. Others, like `flash-attn`, require their build dependencies to be present even just to
resolve the project's lockfile during the _resolution_ phase.

In such cases, the build dependencies must be installed prior to running any `uv lock` or `uv sync`
commands, using the lower lower-level `uv pip` API. For example, given:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
description = &quot;...&quot;
readme = &quot;README.md&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = [&quot;flash-attn&quot;]

[tool.uv]
no-build-isolation-package = [&quot;flash-attn&quot;]
```

You could run the following sequence of commands to sync `flash-attn`:

```console
$ uv venv
$ uv pip install torch setuptools
$ uv sync
```

Alternatively, you can provide the `flash-attn` metadata upfront via the
[`dependency-metadata`](../../reference/settings.md#dependency-metadata) setting, thereby forgoing
the need to build the package during the dependency resolution phase. For example, to provide the
`flash-attn` metadata upfront, include the following in your `pyproject.toml`:

```toml title=&quot;pyproject.toml&quot;
[[tool.uv.dependency-metadata]]
name = &quot;flash-attn&quot;
version = &quot;2.6.3&quot;
requires-dist = [&quot;torch&quot;, &quot;einops&quot;]
```

!!! tip

    To determine the package metadata for a package like `flash-attn`, navigate to the appropriate Git repository,
    or look it up on [PyPI](https://pypi.org/project/flash-attn) and download the package's source distribution.
    The package requirements can typically be found in the `setup.py` or `setup.cfg` file.

    (If the package includes a built distribution, you can unzip it to find the `METADATA` file; however, the presence
    of a built distribution would negate the need to provide the metadata upfront, since it would already be available
    to uv.)

Once included, you can again use the two-step `uv sync` process to install the build dependencies.
Given the following `pyproject.toml`:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
description = &quot;...&quot;
readme = &quot;README.md&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = []

[project.optional-dependencies]
build = [&quot;torch&quot;, &quot;setuptools&quot;, &quot;packaging&quot;]
compile = [&quot;flash-attn&quot;]

[tool.uv]
no-build-isolation-package = [&quot;flash-attn&quot;]

[[tool.uv.dependency-metadata]]
name = &quot;flash-attn&quot;
version = &quot;2.6.3&quot;
requires-dist = [&quot;torch&quot;, &quot;einops&quot;]
```

You could run the following sequence of commands to sync `flash-attn`:

```console
$ uv sync --extra build
$ uv sync --extra build --extra compile
```

!!! note

    The `version` field in `tool.uv.dependency-metadata` is optional for registry-based
    dependencies (when omitted, uv will assume the metadata applies to all versions of the package),
    but _required_ for direct URL dependencies (like Git dependencies).

## Editable mode

By default, the project will be installed in editable mode, such that changes to the source code are
immediately reflected in the environment. `uv sync` and `uv run` both accept a `--no-editable` flag,
which instructs uv to install the project in non-editable mode. `--no-editable` is intended for
deployment use-cases, such as building a Docker container, in which the project should be included
in the deployed environment without a dependency on the originating source code.

## Conflicting dependencies

uv requires that all optional dependencies (&quot;extras&quot;) declared by the project are compatible with
each other and resolves all optional dependencies together when creating the lockfile.

If optional dependencies declared in one extra are not compatible with those in another extra, uv
will fail to resolve the requirements of the project with an error.

To work around this, uv supports declaring conflicting extras. For example, consider two sets of
optional dependencies that conflict with one another:

```toml title=&quot;pyproject.toml&quot;
[project.optional-dependencies]
extra1 = [&quot;numpy==2.1.2&quot;]
extra2 = [&quot;numpy==2.0.0&quot;]
```

If you run `uv lock` with the above dependencies, resolution will fail:

```console
$ uv lock
  x No solution found when resolving dependencies:
  `-&gt; Because myproject[extra2] depends on numpy==2.0.0 and myproject[extra1] depends on numpy==2.1.2, we can conclude that myproject[extra1] and
      myproject[extra2] are incompatible.
      And because your project requires myproject[extra1] and myproject[extra2], we can conclude that your projects's requirements are unsatisfiable.
```

But if you specify that `extra1` and `extra2` are conflicting, uv will resolve them separately.
Specify conflicts in the `tool.uv` section:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
conflicts = [
    [
      { extra = &quot;extra1&quot; },
      { extra = &quot;extra2&quot; },
    ],
]
```

Now, running `uv lock` will succeed. Note though, that now you cannot install both `extra1` and
`extra2` at the same time:

```console
$ uv sync --extra extra1 --extra extra2
Resolved 3 packages in 14ms
error: extra `extra1`, extra `extra2` are incompatible with the declared conflicts: {`myproject[extra1]`, `myproject[extra2]`}
```

This error occurs because installing both `extra1` and `extra2` would result in installing two
different versions of a package into the same environment.

The above strategy for dealing with conflicting extras also works with dependency groups:

```toml title=&quot;pyproject.toml&quot;
[dependency-groups]
group1 = [&quot;numpy==2.1.2&quot;]
group2 = [&quot;numpy==2.0.0&quot;]

[tool.uv]
conflicts = [
    [
      { group = &quot;group1&quot; },
      { group = &quot;group2&quot; },
    ],
]
```

The only difference with conflicting extras is that you need to use `group` instead of `extra`.
</file>
          <file path="docs/concepts/projects/dependencies.md"># Managing dependencies

## Dependency fields

Dependencies of the project are defined in several fields:

- [`project.dependencies`](#project-dependencies): Published dependencies.
- [`project.optional-dependencies`](#optional-dependencies): Published optional dependencies, or
  &quot;extras&quot;.
- [`dependency-groups`](#dependency-groups): Local dependencies for development.
- [`tool.uv.sources`](#dependency-sources): Alternative sources for dependencies during development.

!!! note

    The `project.dependencies` and `project.optional-dependencies` fields can be used even if
    project isn't going to be published. `dependency-groups` are a recently standardized feature
    and may not be supported by all tools yet.

uv supports modifying the project's dependencies with `uv add` and `uv remove`, but dependency
metadata can also be updated by editing the `pyproject.toml` directly.

## Adding dependencies

To add a dependency:

```console
$ uv add httpx
```

An entry will be added in the `project.dependencies` field:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;4&quot;
[project]
name = &quot;example&quot;
version = &quot;0.1.0&quot;
dependencies = [&quot;httpx&gt;=0.27.2&quot;]
```

The [`--dev`](#development-dependencies), [`--group`](#dependency-groups), or
[`--optional`](#optional-dependencies) flags can be used to add a dependencies to an alternative
field.

The dependency will include a constraint, e.g., `&gt;=0.27.2`, for the most recent, compatible version
of the package. An alternative constraint can be provided:

```console
$ uv add &quot;httpx&gt;=0.20&quot;
```

When adding a dependency from a source other than a package registry, uv will add an entry in the
sources field. For example, when adding `httpx` from GitHub:

```console
$ uv add &quot;httpx @ git+https://github.com/encode/httpx&quot;
```

The `pyproject.toml` will include a [Git source entry](#git):

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;8-9&quot;
[project]
name = &quot;example&quot;
version = &quot;0.1.0&quot;
dependencies = [
    &quot;httpx&quot;,
]

[tool.uv.sources]
httpx = { git = &quot;https://github.com/encode/httpx&quot; }
```

If a dependency cannot be used, uv will display an error.:

```console
$ uv add &quot;httpx&gt;9999&quot;
  √ó No solution found when resolving dependencies:
  ‚ï∞‚îÄ‚ñ∂ Because only httpx&lt;=1.0.0b0 is available and your project depends on httpx&gt;9999,
      we can conclude that your project's requirements are unsatisfiable.
```

### Importing dependencies

Dependencies declared in a `requirements.txt` file can be added to the project with the `-r` option:

```
uv add -r requirements.txt
```

## Removing dependencies

To remove a dependency:

```console
$ uv remove httpx
```

The `--dev`, `--group`, or `--optional` flags can be used to remove a dependency from a specific
table.

If a [source](#dependency-sources) is defined for the removed dependency, and there are no other
references to the dependency, it will also be removed.

## Changing dependencies

To change an existing dependency, e.g., to use a different constraint for `httpx`:

```console
$ uv add &quot;httpx&gt;0.1.0&quot;
```

!!! note

    In this example, we are changing the constraints for the dependency in the `pyproject.toml`.
    The locked version of the dependency will only change if necessary to satisfy the new
    constraints. To force the package version to update to the latest within the constraints, use `--upgrade-package &lt;name&gt;`, e.g.:

    ```console
    $ uv add &quot;httpx&gt;0.1.0&quot; --upgrade-package httpx
    ```

    See the [lockfile](./sync.md#upgrading-locked-package-versions) documentation for more details
    on upgrading packages.

Requesting a different dependency source will update the `tool.uv.sources` table, e.g., to use
`httpx` from a local path during development:

```console
$ uv add &quot;httpx @ ../httpx&quot;
```

## Platform-specific dependencies

To ensure that a dependency is only installed on a specific platform or on specific Python versions,
use [environment markers](https://peps.python.org/pep-0508/#environment-markers).

For example, to install `jax` on Linux, but not on Windows or macOS:

```console
$ uv add &quot;jax; sys_platform == 'linux'&quot;
```

The resulting `pyproject.toml` will then include the environment marker in the dependency
definition:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;6&quot;
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.11&quot;
dependencies = [&quot;jax; sys_platform == 'linux'&quot;]
```

Similarly, to include `numpy` on Python 3.11 and later:

```console
$ uv add &quot;numpy; python_version &gt;= '3.11'&quot;
```

See Python's [environment marker](https://peps.python.org/pep-0508/#environment-markers)
documentation for a complete enumeration of the available markers and operators.

!!! tip

    Dependency sources can also be [changed per-platform](#platform-specific-sources).

## Project dependencies

The `project.dependencies` table represents the dependencies that are used when uploading to PyPI or
building a wheel. Individual dependencies are specified using
[dependency specifiers](https://packaging.python.org/en/latest/specifications/dependency-specifiers/)
syntax, and the table follows the
[PEP 621](https://packaging.python.org/en/latest/specifications/pyproject-toml/) standard.

`project.dependencies` defines the list of packages that are required for the project, along with
the version constraints that should be used when installing them. Each entry includes a dependency
name and version. An entry may include extras or environment markers for platform-specific packages.
For example:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;albatross&quot;
version = &quot;0.1.0&quot;
dependencies = [
  # Any version in this range
  &quot;tqdm &gt;=4.66.2,&lt;5&quot;,
  # Exactly this version of torch
  &quot;torch ==2.2.2&quot;,
  # Install transformers with the torch extra
  &quot;transformers[torch] &gt;=4.39.3,&lt;5&quot;,
  # Only install this package on older python versions
  # See &quot;Environment Markers&quot; for more information
  &quot;importlib_metadata &gt;=7.1.0,&lt;8; python_version &lt; '3.10'&quot;,
  &quot;mollymawk ==0.1.0&quot;
]
```

## Dependency sources

The `tool.uv.sources` table extends the standard dependency tables with alternative dependency
sources, which are used during development.

Dependency sources add support for common patterns that are not supported by the
`project.dependencies` standard, like editable installations and relative paths. For example, to
install `foo` from a directory relative to the project root:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;7&quot;
[project]
name = &quot;example&quot;
version = &quot;0.1.0&quot;
dependencies = [&quot;foo&quot;]

[tool.uv.sources]
foo = { path = &quot;./packages/foo&quot; }
```

The following dependency sources are supported by uv:

- [Index](#index): A package resolved from a specific package index.
- [Git](#git): A Git repository.
- [URL](#url): A remote wheel or source distribution.
- [Path](#path): A local wheel, source distribution, or project directory.
- [Workspace](#workspace-member): A member of the current workspace.

!!! important

    Sources are only respected by uv. If another tool is used, only the definitions in the standard
    project tables will be used. If another tool is being used for development, any metadata
    provided in the source table will need to be re-specified in the other tool's format.

### Index

To add Python package from a specific index, use the `--index` option:

```console
$ uv add torch --index pytorch=https://download.pytorch.org/whl/cpu
```

uv will store the index in `[[tool.uv.index]]` and add a `[tool.uv.sources]` entry:

```toml title=&quot;pyproject.toml&quot;
[project]
dependencies = [&quot;torch&quot;]

[tool.uv.sources]
torch = { index = &quot;pytorch&quot; }

[[tool.uv.index]]
name = &quot;pytorch&quot;
url = &quot;https://download.pytorch.org/whl/cpu&quot;
```

!!! tip

    The above example will only work on x86-64 Linux, due to the specifics of the PyTorch index.
    See the [PyTorch guide](../../guides/integration/pytorch.md) for more information about setting
    up PyTorch.

Using an `index` source _pins_ a package to the given index ‚Äî it will not be downloaded from other
indexes.

When defining an index, an `explicit` flag can be included to indicate that the index should _only_
be used for packages that explicitly specify it in `tool.uv.sources`. If `explicit` is not set,
other packages may be resolved from the index, if not found elsewhere.

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;3&quot;
[[tool.uv.index]]
name = &quot;pytorch&quot;
url = &quot;https://download.pytorch.org/whl/cpu&quot;
explicit = true
```

### Git

To add a Git dependency source, prefix a Git-compatible URL (i.e., that you would use with
`git clone`) with `git+`.

For example:

```console
$ uv add git+https://github.com/encode/httpx
```

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;5&quot;
[project]
dependencies = [&quot;httpx&quot;]

[tool.uv.sources]
httpx = { git = &quot;https://github.com/encode/httpx&quot; }
```

Specific Git references can be requested, e.g., a tag:

```console
$ uv add git+https://github.com/encode/httpx --tag 0.27.0
```

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;7&quot;
[project]
dependencies = [&quot;httpx&quot;]

[tool.uv.sources]
httpx = { git = &quot;https://github.com/encode/httpx&quot;, tag = &quot;0.27.0&quot; }
```

Or, a branch:

```console
$ uv add git+https://github.com/encode/httpx --branch main
```

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;7&quot;
[project]
dependencies = [&quot;httpx&quot;]

[tool.uv.sources]
httpx = { git = &quot;https://github.com/encode/httpx&quot;, branch = &quot;main&quot; }
```

Or, a revision (commit):

```console
$ uv add git+https://github.com/encode/httpx --rev 326b9431c761e1ef1e00b9f760d1f654c8db48c6
```

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;7&quot;
[project]
dependencies = [&quot;httpx&quot;]

[tool.uv.sources]
httpx = { git = &quot;https://github.com/encode/httpx&quot;, rev = &quot;326b9431c761e1ef1e00b9f760d1f654c8db48c6&quot; }
```

A `subdirectory` may be specified if the package isn't in the repository root:

```console
$ uv add git+https://github.com/langchain-ai/langchain#subdirectory=libs/langchain
```

```toml title=&quot;pyproject.toml&quot;
[project]
dependencies = [&quot;langchain&quot;]

[tool.uv.sources]
langchain = { git = &quot;https://github.com/langchain-ai/langchain&quot;, subdirectory = &quot;libs/langchain&quot; }
```

### URL

To add a URL source, provide a `https://` URL to either a wheel (ending in `.whl`) or a source
distribution (typically ending in `.tar.gz` or `.zip`; see
[here](../../concepts/resolution.md#source-distribution) for all supported formats).

For example:

```console
$ uv add &quot;https://files.pythonhosted.org/packages/5c/2d/3da5bdf4408b8b2800061c339f240c1802f2e82d55e50bd39c5a881f47f0/httpx-0.27.0.tar.gz&quot;
```

Will result in a `pyproject.toml` with:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;5&quot;
[project]
dependencies = [&quot;httpx&quot;]

[tool.uv.sources]
httpx = { url = &quot;https://files.pythonhosted.org/packages/5c/2d/3da5bdf4408b8b2800061c339f240c1802f2e82d55e50bd39c5a881f47f0/httpx-0.27.0.tar.gz&quot; }
```

URL dependencies can also be manually added or edited in the `pyproject.toml` with the
`{ url = &lt;url&gt; }` syntax. A `subdirectory` may be specified if the source distribution isn't in the
archive root.

### Path

To add a path source, provide the path of a wheel (ending in `.whl`), a source distribution
(typically ending in `.tar.gz` or `.zip`; see
[here](../../concepts/resolution.md#source-distribution) for all supported formats), or a directory
containing a `pyproject.toml`.

For example:

```console
$ uv add /example/foo-0.1.0-py3-none-any.whl
```

Will result in a `pyproject.toml` with:

```toml title=&quot;pyproject.toml&quot;
[project]
dependencies = [&quot;foo&quot;]

[tool.uv.sources]
foo = { path = &quot;/example/foo-0.1.0-py3-none-any.whl&quot; }
```

The path may also be a relative path:

```console
$ uv add ./foo-0.1.0-py3-none-any.whl
```

Or, a path to a project directory:

```console
$ uv add ~/projects/bar/
```

!!! important

    An [editable installation](#editable-dependencies) is not used for path dependencies by
    default. An editable installation may be requested for project directories:

    ```console
    $ uv add --editable ../projects/bar/
    ```

    Which will result in a `pyproject.toml` with:

    ```toml title=&quot;pyproject.toml&quot;
    [project]
    dependencies = [&quot;bar&quot;]

    [tool.uv.sources]
    bar = { path = &quot;../projects/bar&quot;, editable = true }
    ```

    Similarly, if a project is marked as a [non-package](./config.md#build-systems), but you'd
    like to install it in the environment as a package, set `package = true` on the source:

    ```toml title=&quot;pyproject.toml&quot;
    [project]
    dependencies = [&quot;bar&quot;]

    [tool.uv.sources]
    bar = { path = &quot;../projects/bar&quot;, package = true }
    ```

    For multiple packages in the same repository, [_workspaces_](./workspaces.md) may be a better
    fit.

### Workspace member

To declare a dependency on a workspace member, add the member name with `{ workspace = true }`. All
workspace members must be explicitly stated. Workspace members are always
[editable](#editable-dependencies) . See the [workspace](./workspaces.md) documentation for more
details on workspaces.

```toml title=&quot;pyproject.toml&quot;
[project]
dependencies = [&quot;foo==0.1.0&quot;]

[tool.uv.sources]
foo = { workspace = true }

[tool.uv.workspace]
members = [
  &quot;packages/foo&quot;
]
```

### Platform-specific sources

You can limit a source to a given platform or Python version by providing
[dependency specifiers](https://packaging.python.org/en/latest/specifications/dependency-specifiers/)-compatible
environment markers for the source.

For example, to pull `httpx` from GitHub, but only on macOS, use the following:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;8&quot;
[project]
dependencies = [&quot;httpx&quot;]

[tool.uv.sources]
httpx = { git = &quot;https://github.com/encode/httpx&quot;, tag = &quot;0.27.2&quot;, marker = &quot;sys_platform == 'darwin'&quot; }
```

By specifying the marker on the source, uv will still include `httpx` on all platforms, but will
download the source from GitHub on macOS, and fall back to PyPI on all other platforms.

### Multiple sources

You can specify multiple sources for a single dependency by providing a list of sources,
disambiguated by [PEP 508](https://peps.python.org/pep-0508/#environment-markers)-compatible
environment markers.

For example, to pull in different `httpx` tags on macOS vs. Linux:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;6-7&quot;
[project]
dependencies = [&quot;httpx&quot;]

[tool.uv.sources]
httpx = [
  { git = &quot;https://github.com/encode/httpx&quot;, tag = &quot;0.27.2&quot;, marker = &quot;sys_platform == 'darwin'&quot; },
  { git = &quot;https://github.com/encode/httpx&quot;, tag = &quot;0.24.1&quot;, marker = &quot;sys_platform == 'linux'&quot; },
]
```

This strategy extends to using different indexes based on environment markers. For example, to
install `torch` from different PyTorch indexes based on the platform:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;6-7&quot;
[project]
dependencies = [&quot;torch&quot;]

[tool.uv.sources]
torch = [
  { index = &quot;torch-cpu&quot;, marker = &quot;platform_system == 'Darwin'&quot;},
  { index = &quot;torch-gpu&quot;, marker = &quot;platform_system == 'Linux'&quot;},
]

[[tool.uv.index]]
name = &quot;torch-cpu&quot;
url = &quot;https://download.pytorch.org/whl/cpu&quot;
explicit = true

[[tool.uv.index]]
name = &quot;torch-gpu&quot;
url = &quot;https://download.pytorch.org/whl/cu124&quot;
explicit = true
```

### Disabling sources

To instruct uv to ignore the `tool.uv.sources` table (e.g., to simulate resolving with the package's
published metadata), use the `--no-sources` flag:

```console
$ uv lock --no-sources
```

The use of `--no-sources` will also prevent uv from discovering any
[workspace members](#workspace-member) that could satisfy a given dependency.

## Optional dependencies

It is common for projects that are published as libraries to make some features optional to reduce
the default dependency tree. For example, Pandas has an
[`excel` extra](https://pandas.pydata.org/docs/getting_started/install.html#excel-files) and a
[`plot` extra](https://pandas.pydata.org/docs/getting_started/install.html#visualization) to avoid
installation of Excel parsers and `matplotlib` unless someone explicitly requires them. Extras are
requested with the `package[&lt;extra&gt;]` syntax, e.g., `pandas[plot, excel]`.

Optional dependencies are specified in `[project.optional-dependencies]`, a TOML table that maps
from extra name to its dependencies, following
[dependency specifiers](#dependency-specifiers-pep-508) syntax.

Optional dependencies can have entries in `tool.uv.sources` the same as normal dependencies.

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;pandas&quot;
version = &quot;1.0.0&quot;

[project.optional-dependencies]
plot = [
  &quot;matplotlib&gt;=3.6.3&quot;
]
excel = [
  &quot;odfpy&gt;=1.4.1&quot;,
  &quot;openpyxl&gt;=3.1.0&quot;,
  &quot;python-calamine&gt;=0.1.7&quot;,
  &quot;pyxlsb&gt;=1.0.10&quot;,
  &quot;xlrd&gt;=2.0.1&quot;,
  &quot;xlsxwriter&gt;=3.0.5&quot;
]
```

To add an optional dependency, use the `--optional &lt;extra&gt;` option:

```console
$ uv add httpx --optional network
```

!!! note

    If you have optional dependencies that conflict with one another, resolution will fail
    unless you explicitly [declare them as conflicting](./config.md#conflicting-dependencies).

Sources can also be declared as applying only to a specific optional dependency. For example, to
pull `torch` from different PyTorch indexes based on an optional `cpu` or `gpu` extra:

```toml title=&quot;pyproject.toml&quot;
[project]
dependencies = []

[project.optional-dependencies]
cpu = [
  &quot;torch&quot;,
]
gpu = [
  &quot;torch&quot;,
]

[tool.uv.sources]
torch = [
  { index = &quot;torch-cpu&quot;, extra = &quot;cpu&quot; },
  { index = &quot;torch-gpu&quot;, extra = &quot;gpu&quot; },
]

[[tool.uv.index]]
name = &quot;torch-cpu&quot;
url = &quot;https://download.pytorch.org/whl/cpu&quot;

[[tool.uv.index]]
name = &quot;torch-gpu&quot;
url = &quot;https://download.pytorch.org/whl/cu124&quot;
```

## Development dependencies

Unlike optional dependencies, development dependencies are local-only and will _not_ be included in
the project requirements when published to PyPI or other indexes. As such, development dependencies
are not included in the `[project]` table.

Development dependencies can have entries in `tool.uv.sources` the same as normal dependencies.

To add a development dependency, use the `--dev` flag:

```console
$ uv add --dev pytest
```

uv uses the `[dependency-groups]` table (as defined in [PEP 735](https://peps.python.org/pep-0735/))
for declaration of development dependencies. The above command will create a `dev` group:

```toml title=&quot;pyproject.toml&quot;
[dependency-groups]
dev = [
  &quot;pytest &gt;=8.1.1,&lt;9&quot;
]
```

The `dev` group is special-cased; there are `--dev`, `--only-dev`, and `--no-dev` flags to toggle
inclusion or exclusion of its dependencies. See `--no-default-groups` to disable all default groups
instead. Additionally, the `dev` group is [synced by default](#default-groups).

### Dependency groups

Development dependencies can be divided into multiple groups, using the `--group` flag.

For example, to add a development dependency in the `lint` group:

```console
$ uv add --group lint ruff
```

Which results in the following `[dependency-groups]` definition:

```toml title=&quot;pyproject.toml&quot;
[dependency-groups]
dev = [
  &quot;pytest&quot;
]
lint = [
  &quot;ruff&quot;
]
```

Once groups are defined, the `--all-groups`, `--no-default-groups`, `--group`, `--only-group`, and
`--no-group` options can be used to include or exclude their dependencies.

!!! tip

    The `--dev`, `--only-dev`, and `--no-dev` flags are equivalent to `--group dev`,
    `--only-group dev`, and `--no-group dev` respectively.

uv requires that all dependency groups are compatible with each other and resolves all groups
together when creating the lockfile.

If dependencies declared in one group are not compatible with those in another group, uv will fail
to resolve the requirements of the project with an error.

!!! note

    If you have dependency groups that conflict with one another, resolution will fail
    unless you explicitly [declare them as conflicting](./config.md#conflicting-dependencies).

### Default groups

By default, uv includes the `dev` dependency group in the environment (e.g., during `uv run` or
`uv sync`). The default groups to include can be changed using the `tool.uv.default-groups` setting.

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
default-groups = [&quot;dev&quot;, &quot;foo&quot;]
```

To enable all dependencies groups by default, use `&quot;all&quot;` instead of listing group names:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
default-groups = &quot;all&quot;
```

!!! tip

    To disable this behaviour during `uv run` or `uv sync`, use `--no-default-groups`.
    To exclude a specific default group, use `--no-group &lt;name&gt;`.

### Legacy `dev-dependencies`

Before `[dependency-groups]` was standardized, uv used the `tool.uv.dev-dependencies` field to
specify development dependencies, e.g.:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
dev-dependencies = [
  &quot;pytest&quot;
]
```

Dependencies declared in this section will be combined with the contents in the
`dependency-groups.dev`. Eventually, the `dev-dependencies` field will be deprecated and removed.

!!! note

    If a `tool.uv.dev-dependencies` field exists, `uv add --dev` will use the existing section
    instead of adding a new `dependency-groups.dev` section.

## Build dependencies

If a project is structured as [Python package](./config.md#build-systems), it may declare
dependencies that are required to build the project, but not required to run it. These dependencies
are specified in the `[build-system]` table under `build-system.requires`, following
[PEP 518](https://peps.python.org/pep-0518/).

For example, if a project uses `setuptools` as its build backend, it should declare `setuptools` as
a build dependency:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;pandas&quot;
version = &quot;0.1.0&quot;

[build-system]
requires = [&quot;setuptools&gt;=42&quot;]
build-backend = &quot;setuptools.build_meta&quot;
```

By default, uv will respect `tool.uv.sources` when resolving build dependencies. For example, to use
a local version of `setuptools` for building, add the source to `tool.uv.sources`:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;pandas&quot;
version = &quot;0.1.0&quot;

[build-system]
requires = [&quot;setuptools&gt;=42&quot;]
build-backend = &quot;setuptools.build_meta&quot;

[tool.uv.sources]
setuptools = { path = &quot;./packages/setuptools&quot; }
```

When publishing a package, we recommend running `uv build --no-sources` to ensure that the package
builds correctly when `tool.uv.sources` is disabled, as is the case when using other build tools,
like [`pypa/build`](https://github.com/pypa/build).

## Editable dependencies

A regular installation of a directory with a Python package first builds a wheel and then installs
that wheel into your virtual environment, copying all source files. When the package source files
are edited, the virtual environment will contain outdated versions.

Editable installations solve this problem by adding a link to the project within the virtual
environment (a `.pth` file), which instructs the interpreter to include the source files directly.

There are some limitations to editables (mainly: the build backend needs to support them, and native
modules aren't recompiled before import), but they are useful for development, as the virtual
environment will always use the latest changes to the package.

uv uses editable installation for workspace packages by default.

To add an editable dependency, use the `--editable` flag:

```console
$ uv add --editable ./path/foo
```

Or, to opt-out of using an editable dependency in a workspace:

```console
$ uv add --no-editable ./path/foo
```

## Dependency specifiers (PEP 508)

uv uses
[dependency specifiers](https://packaging.python.org/en/latest/specifications/dependency-specifiers/),
previously known as [PEP 508](https://peps.python.org/pep-0508/). A dependency specifier is composed
of, in order:

- The dependency name
- The extras you want (optional)
- The version specifier
- An environment marker (optional)

The version specifiers are comma separated and added together, e.g., `foo &gt;=1.2.3,&lt;2,!=1.4.0` is
interpreted as &quot;a version of `foo` that's at least 1.2.3, but less than 2, and not 1.4.0&quot;.

Specifiers are padded with trailing zeros if required, so `foo ==2` matches foo 2.0.0, too.

A star can be used for the last digit with equals, e.g., `foo ==2.1.*` will accept any release from
the 2.1 series. Similarly, `~=` matches where the last digit is equal or higher, e.g., `foo ~=1.2`
is equal to `foo &gt;=1.2,&lt;2`, and `foo ~=1.2.3` is equal to `foo &gt;=1.2.3,&lt;1.3`.

Extras are comma-separated in square bracket between name and version, e.g.,
`pandas[excel,plot] ==2.2`. Whitespace between extra names is ignored.

Some dependencies are only required in specific environments, e.g., a specific Python version or
operating system. For example to install the `importlib-metadata` backport for the
`importlib.metadata` module, use `importlib-metadata &gt;=7.1.0,&lt;8; python_version &lt; '3.10'`. To
install `colorama` on Windows (but omit it on other platforms), use
`colorama &gt;=0.4.6,&lt;5; platform_system == &quot;Windows&quot;`.

Markers are combined with `and`, `or`, and parentheses, e.g.,
`aiohttp &gt;=3.7.4,&lt;4; (sys_platform != 'win32' or implementation_name != 'pypy') and python_version &gt;= '3.10'`.
Note that versions within markers must be quoted, while versions _outside_ of markers must _not_ be
quoted.
</file>
          <file path="docs/concepts/projects/init.md"># Creating projects

uv supports creating a project with `uv init`.

When creating projects, uv supports two basic templates: [**applications**](#applications) and
[**libraries**](#libraries). By default, uv will create a project for an application. The `--lib`
flag can be used to create a project for a library instead.

## Target directory

uv will create a project in the working directory, or, in a target directory by providing a name,
e.g., `uv init foo`. If there's already a project in the target directory, i.e., if there's a
`pyproject.toml`, uv will exit with an error.

## Applications

Application projects are suitable for web servers, scripts, and command-line interfaces.

Applications are the default target for `uv init`, but can also be specified with the `--app` flag.

```console
$ uv init example-app
```

The project includes a `pyproject.toml`, a sample file (`main.py`), a readme, and a Python version
pin file (`.python-version`).

```console
$ tree example-app
example-app
‚îú‚îÄ‚îÄ .python-version
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ main.py
‚îî‚îÄ‚îÄ pyproject.toml
```

!!! note

    Prior to v0.6.0, uv created a file named `hello.py` instead of `main.py`.

The `pyproject.toml` includes basic metadata. It does not include a build system, it is not a
[package](./config.md#project-packaging) and will not be installed into the environment:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;example-app&quot;
version = &quot;0.1.0&quot;
description = &quot;Add your description here&quot;
readme = &quot;README.md&quot;
requires-python = &quot;&gt;=3.11&quot;
dependencies = []
```

The sample file defines a `main` function with some standard boilerplate:

```python title=&quot;main.py&quot;
def main():
    print(&quot;Hello from example-app!&quot;)


if __name__ == &quot;__main__&quot;:
    main()
```

Python files can be executed with `uv run`:

```console
$ cd example-app
$ uv run main.py
Hello from example-project!
```

## Packaged applications

Many use-cases require a [package](./config.md#project-packaging). For example, if you are creating
a command-line interface that will be published to PyPI or if you want to define tests in a
dedicated directory.

The `--package` flag can be used to create a packaged application:

```console
$ uv init --package example-pkg
```

The source code is moved into a `src` directory with a module directory and an `__init__.py` file:

```console
$ tree example-pkg
example-pkg
‚îú‚îÄ‚îÄ .python-version
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ pyproject.toml
‚îî‚îÄ‚îÄ src
    ‚îî‚îÄ‚îÄ example_pkg
        ‚îî‚îÄ‚îÄ __init__.py
```

A [build system](./config.md#build-systems) is defined, so the project will be installed into the
environment:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;12-14&quot;
[project]
name = &quot;example-pkg&quot;
version = &quot;0.1.0&quot;
description = &quot;Add your description here&quot;
readme = &quot;README.md&quot;
requires-python = &quot;&gt;=3.11&quot;
dependencies = []

[project.scripts]
example-pkg = &quot;example_pkg:main&quot;

[build-system]
requires = [&quot;hatchling&quot;]
build-backend = &quot;hatchling.build&quot;
```

!!! tip

    The `--build-backend` option can be used to request an alternative build system.

A [command](./config.md#entry-points) definition is included:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;9 10&quot;
[project]
name = &quot;example-pkg&quot;
version = &quot;0.1.0&quot;
description = &quot;Add your description here&quot;
readme = &quot;README.md&quot;
requires-python = &quot;&gt;=3.11&quot;
dependencies = []

[project.scripts]
example-pkg = &quot;example_pkg:main&quot;

[build-system]
requires = [&quot;hatchling&quot;]
build-backend = &quot;hatchling.build&quot;
```

The command can be executed with `uv run`:

```console
$ cd example-pkg
$ uv run example-pkg
Hello from example-pkg!
```

## Libraries

A library provides functions and objects for other projects to consume. Libraries are intended to be
built and distributed, e.g., by uploading them to PyPI.

Libraries can be created by using the `--lib` flag:

```console
$ uv init --lib example-lib
```

!!! note

    Using `--lib` implies `--package`. Libraries always require a packaged project.

As with a [packaged application](#packaged-applications), a `src` layout is used. A `py.typed`
marker is included to indicate to consumers that types can be read from the library:

```console
$ tree example-lib
example-lib
‚îú‚îÄ‚îÄ .python-version
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ pyproject.toml
‚îî‚îÄ‚îÄ src
    ‚îî‚îÄ‚îÄ example_lib
        ‚îú‚îÄ‚îÄ py.typed
        ‚îî‚îÄ‚îÄ __init__.py
```

!!! note

    A `src` layout is particularly valuable when developing libraries. It ensures that the library is
    isolated from any `python` invocations in the project root and that distributed library code is
    well separated from the rest of the project source.

A [build system](./config.md#build-systems) is defined, so the project will be installed into the
environment:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;12-14&quot;
[project]
name = &quot;example-lib&quot;
version = &quot;0.1.0&quot;
description = &quot;Add your description here&quot;
readme = &quot;README.md&quot;
requires-python = &quot;&gt;=3.11&quot;
dependencies = []

[build-system]
requires = [&quot;hatchling&quot;]
build-backend = &quot;hatchling.build&quot;
```

!!! tip

    You can select a different build backend template by using `--build-backend` with `hatchling`,
    `flit-core`, `pdm-backend`, `setuptools`, `maturin`, or `scikit-build-core`. An alternative
    backend is required if you want to create a [library with extension modules](#projects-with-extension-modules).

The created module defines a simple API function:

```python title=&quot;__init__.py&quot;
def hello() -&gt; str:
    return &quot;Hello from example-lib!&quot;
```

And you can import and execute it using `uv run`:

```console
$ cd example-lib
$ uv run python -c &quot;import example_lib; print(example_lib.hello())&quot;
Hello from example-lib!
```

## Projects with extension modules

Most Python projects are &quot;pure Python&quot;, meaning they do not define modules in other languages like
C, C++, FORTRAN, or Rust. However, projects with extension modules are often used for performance
sensitive code.

Creating a project with an extension module requires choosing an alternative build system. uv
supports creating projects with the following build systems that support building extension modules:

- [`maturin`](https://www.maturin.rs) for projects with Rust
- [`scikit-build-core`](https://github.com/scikit-build/scikit-build-core) for projects with C, C++,
  FORTRAN, Cython

Specify the build system with the `--build-backend` flag:

```console
$ uv init --build-backend maturin example-ext
```

!!! note

    Using `--build-backend` implies `--package`.

The project contains a `Cargo.toml` and a `lib.rs` file in addition to the typical Python project
files:

```console
$ tree example-ext
example-ext
‚îú‚îÄ‚îÄ .python-version
‚îú‚îÄ‚îÄ Cargo.toml
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ pyproject.toml
‚îî‚îÄ‚îÄ src
    ‚îú‚îÄ‚îÄ lib.rs
    ‚îî‚îÄ‚îÄ example_ext
        ‚îú‚îÄ‚îÄ __init__.py
        ‚îî‚îÄ‚îÄ _core.pyi
```

!!! note

    If using `scikit-build-core`, you'll see CMake configuration and a `main.cpp` file instead.

The Rust library defines a simple function:

```rust title=&quot;src/lib.rs&quot;
use pyo3::prelude::*;

#[pyfunction]
fn hello_from_bin() -&gt; String {
    &quot;Hello from example-ext!&quot;.to_string()
}

#[pymodule]
fn _core(m: &amp;Bound&lt;'_, PyModule&gt;) -&gt; PyResult&lt;()&gt; {
    m.add_function(wrap_pyfunction!(hello_from_bin, m)?)?;
    Ok(())
}
```

And the Python module imports it:

```python title=&quot;src/example_ext/__init__.py&quot;
from example_ext._core import hello_from_bin


def main() -&gt; None:
    print(hello_from_bin())
```

The command can be executed with `uv run`:

```console
$ cd example-ext
$ uv run example-ext
Hello from example-ext!
```

!!! important

    Changes to the extension code in `lib.rs` or `main.cpp` will require running `--reinstall` to
    rebuild them.

## Creating a minimal project

If you only want to create a `pyproject.toml`, use the `--bare` option:

```console
$ uv init example --bare
```

uv will skip creating a Python version pin file, a README, and any source directories or files.
Additionally, uv will not initialize a version control system (i.e., `git`).

```console
$ tree example-bare
example-bare
‚îî‚îÄ‚îÄ pyproject.toml
```

uv will also not add extra metadata to the `pyproject.toml`, such as the `description` or `authors`.

```toml
[project]
name = &quot;example&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = []
```

The `--bare` option can be used with other options like `--lib` or `--build-backend` ‚Äî in these
cases uv will still configure a build system but will not create the expected file structure.

When `--bare` is used, additional features can still be used opt-in:

```console
$ uv init example --bare --description &quot;Hello world&quot; --author-from git --vcs git --python-pin
```
</file>
          <file path="docs/concepts/projects/layout.md"># Project structure and files

## The `pyproject.toml`

Python project metadata is defined in a
[`pyproject.toml`](https://packaging.python.org/en/latest/guides/writing-pyproject-toml/) file. uv
requires this file to identify the root directory of a project.

!!! tip

    `uv init` can be used to create a new project. See [Creating projects](./init.md) for
    details.

A minimal project definition includes a name and version:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;example&quot;
version = &quot;0.1.0&quot;
```

Additional project metadata and configuration includes:

- [Python version requirement](./config.md#python-version-requirement)
- [Dependencies](./dependencies.md)
- [Build system](./config.md#build-systems)
- [Entry points (commands)](./config.md#entry-points)

## The project environment

When working on a project with uv, uv will create a virtual environment as needed. While some uv
commands will create a temporary environment (e.g., `uv run --isolated`), uv also manages a
persistent environment with the project and its dependencies in a `.venv` directory next to the
`pyproject.toml`. It is stored inside the project to make it easy for editors to find ‚Äî they need
the environment to give code completions and type hints. It is not recommended to include the
`.venv` directory in version control; it is automatically excluded from `git` with an internal
`.gitignore` file.

To run a command in the project environment, use `uv run`. Alternatively the project environment can
be activated as normal for a virtual environment.

When `uv run` is invoked, it will create the project environment if it does not exist yet or ensure
it is up-to-date if it exists. The project environment can also be explicitly created with
`uv sync`. See the [locking and syncing](./sync.md) documentation for details.

It is _not_ recommended to modify the project environment manually, e.g., with `uv pip install`. For
project dependencies, use `uv add` to add a package to the environment. For one-off requirements,
use [`uvx`](../../guides/tools.md) or
[`uv run --with`](./run.md#requesting-additional-dependencies).

!!! tip

    If you don't want uv to manage the project environment, set [`managed = false`](../../reference/settings.md#managed)
    to disable automatic locking and syncing of the project. For example:

    ```toml title=&quot;pyproject.toml&quot;
    [tool.uv]
    managed = false
    ```

## The lockfile

uv creates a `uv.lock` file next to the `pyproject.toml`.

`uv.lock` is a _universal_ or _cross-platform_ lockfile that captures the packages that would be
installed across all possible Python markers such as operating system, architecture, and Python
version.

Unlike the `pyproject.toml`, which is used to specify the broad requirements of your project, the
lockfile contains the exact resolved versions that are installed in the project environment. This
file should be checked into version control, allowing for consistent and reproducible installations
across machines.

A lockfile ensures that developers working on the project are using a consistent set of package
versions. Additionally, it ensures when deploying the project as an application that the exact set
of used package versions is known.

The lockfile is [automatically created and updated](./sync.md#automatic-lock-and-sync) during uv
invocations that use the project environment, i.e., `uv sync` and `uv run`. The lockfile may also be
explicitly updated using `uv lock`.

`uv.lock` is a human-readable TOML file but is managed by uv and should not be edited manually. The
`uv.lock` format is specific to uv and not usable by other tools.

!!! note

    Recently Python standardized the lockfile format with `pylock.toml`.
    For details on the new standard, see [PEP 751](https://peps.python.org/pep-0751/).

    Some of uv's functionality cannot be expressed in the `pylock.toml` format,
    so uv will continue to use the `uv.lock` format.

    However, support for `pylock.toml` is planned everywhere uv currently supports `requirements.txt` files.
    For more details and updates on progress, see [12584](https://github.com/astral-sh/uv/issues/12584).
</file>
          <file path="docs/concepts/projects/run.md"># Running commands in projects

When working on a project, it is installed into the virtual environment at `.venv`. This environment
is isolated from the current shell by default, so invocations that require the project, e.g.,
`python -c &quot;import example&quot;`, will fail. Instead, use `uv run` to run commands in the project
environment:

```console
$ uv run python -c &quot;import example&quot;
```

When using `run`, uv will ensure that the project environment is up-to-date before running the given
command.

The given command can be provided by the project environment or exist outside of it, e.g.:

```console
$ # Presuming the project provides `example-cli`
$ uv run example-cli foo

$ # Running a `bash` script that requires the project to be available
$ uv run bash scripts/foo.sh
```

## Requesting additional dependencies

Additional dependencies or different versions of dependencies can be requested per invocation.

The `--with` option is used to include a dependency for the invocation, e.g., to request a different
version of `httpx`:

```console
$ uv run --with httpx==0.26.0 python -c &quot;import httpx; print(httpx.__version__)&quot;
0.26.0
$ uv run --with httpx==0.25.0 python -c &quot;import httpx; print(httpx.__version__)&quot;
0.25.0
```

The requested version will be respected regardless of the project's requirements. For example, even
if the project requires `httpx==0.24.0`, the output above would be the same.

## Running scripts

Scripts that declare inline metadata are automatically executed in environments isolated from the
project. See the [scripts guide](../../guides/scripts.md#declaring-script-dependencies) for more
details.

For example, given a script:

```python title=&quot;example.py&quot;
# /// script
# dependencies = [
#   &quot;httpx&quot;,
# ]
# ///

import httpx

resp = httpx.get(&quot;https://peps.python.org/api/peps.json&quot;)
data = resp.json()
print([(k, v[&quot;title&quot;]) for k, v in data.items()][:10])
```

The invocation `uv run example.py` would run _isolated_ from the project with only the given
dependencies listed.

## Legacy Windows Scripts

Support is provided for
[legacy setuptools scripts](https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/#scripts).
These types of scripts are additional files installed by setuptools in `.venv\Scripts`.

Currently only legacy scripts with the `.ps1`, `.cmd`, and `.bat` extensions are supported.

For example, below is an example running a Command Prompt script.

```console
$ uv run --with nuitka==2.6.7 -- nuitka.cmd --version
```

In addition, you don't need to specify the extension. `uv` will automatically look for files ending
in `.ps1`, `.cmd`, and `.bat` in that order of execution on your behalf.

```console
$ uv run --with nuitka==2.6.7 -- nuitka --version
```

## Signal handling

uv does not cede control of the process to the spawned command in order to provide better error
messages on failure. Consequently, uv is responsible for forwarding some signals to the child
process the requested command runs in.

On Unix systems, uv will forward SIGINT and SIGTERM to the child process. Since shells send SIGINT
to the foreground process group on Ctrl-C, uv will only forward a SIGINT to the child process if it
is seen more than once or the child process group differs from uv's.

On Windows, these concepts do not apply and uv ignores Ctrl-C events, deferring handling to the
child process so it can exit cleanly.
</file>
          <file path="docs/concepts/projects/sync.md"># Locking and syncing

Locking is the process of resolving your project's dependencies into a
[lockfile](./layout.md#the-lockfile). Syncing is the process of installing a subset of packages from
the lockfile into the [project environment](./layout.md#the-project-environment).

## Automatic lock and sync

Locking and syncing are _automatic_ in uv. For example, when `uv run` is used, the project is locked
and synced before invoking the requested command. This ensures the project environment is always
up-to-date. Similarly, commands which read the lockfile, such as `uv tree`, will automatically
update it before running.

To disable automatic locking, use the `--locked` option:

```console
$ uv run --locked ...
```

If the lockfile is not up-to-date, uv will raise an error instead of updating the lockfile.

To use the lockfile without checking if it is up-to-date, use the `--frozen` option:

```console
$ uv run --frozen ...
```

Similarly, to run a command without checking if the environment is up-to-date, use the `--no-sync`
option:

```console
$ uv run --no-sync ...
```

## Checking if the lockfile is up-to-date

When considering if the lockfile is up-to-date, uv will check if it matches the project metadata.
For example, if you add a dependency to your `pyproject.toml`, the lockfile will be considered
outdated. Similarly, if you change the version constraints for a dependency such that the locked
version is excluded, the lockfile will be considered outdated. However, if you change the version
constraints such that the existing locked version is still included, the lockfile will still be
considered up-to-date.

You can check if the lockfile is up-to-date by passing the `--check` flag to `uv lock`:

```console
$ uv lock --check
```

This is equivalent to the `--locked` flag for other commands.

!!! important

    uv will not consider lockfiles outdated when new versions of packages are released ‚Äî the lockfile
    needs to be explicitly updated if you want to upgrade dependencies. See the documentation on
    [upgrading locked package versions](#upgrading-locked-package-versions) for details.

## Creating the lockfile

While the lockfile is created [automatically](#automatic-lock-and-sync), the lockfile may also be
explicitly created or updated using `uv lock`:

```console
$ uv lock
```

## Syncing the environment

While the environment is synced [automatically](#automatic-lock-and-sync), it may also be explicitly
synced using `uv sync`:

```console
$ uv sync
```

Syncing the environment manually is especially useful for ensuring your editor has the correct
versions of dependencies.

### Editable installation

When the environment is synced, uv will install the project (and other workspace members) as
_editable_ packages, such that re-syncing is not necessary for changes to be reflected in the
environment.

To opt-out of this behavior, use the `--no-editable` option.

!!! note

    If the project does not define a build system, it will not be installed.
    See the [build systems](./config.md#build-systems) documentation for details.

### Retaining extraneous packages

Syncing is &quot;exact&quot; by default, which means it will remove any packages that are not present in the
lockfile.

To retain extraneous packages, use the `--inexact` option:

```console
$ uv sync --inexact
```

### Syncing optional dependencies

uv reads optional dependencies from the `[project.optional-dependencies]` table. These are
frequently referred to as &quot;extras&quot;.

uv does not sync extras by default. Use the `--extra` option to include an extra.

```console
$ uv sync --extra foo
```

To quickly enable all extras, use the `--all-extras` option.

See the [optional dependencies](./dependencies.md#optional-dependencies) documentation for details
on how to manage optional dependencies.

### Syncing development dependencies

uv reads development dependencies from the `[dependency-groups]` table (as defined in
[PEP 735](https://peps.python.org/pep-0735/)).

The `dev` group is special-cased and synced by default. See the
[default groups](./dependencies.md#default-groups) documentation for details on changing the
defaults.

The `--no-dev` flag can be used to exclude the `dev` group.

The `--only-dev` flag can be used to install the `dev` group _without_ the project and its
dependencies.

Additional groups can be included or excluded with the `--all-groups`, `--no-default-groups`,
`--group &lt;name&gt;`, `--only-group &lt;name&gt;`, and `--no-group &lt;name&gt;` options. The semantics of
`--only-group` are the same as `--only-dev`, the project will not be included. However,
`--only-group` will also exclude default groups.

Group exclusions always take precedence over inclusions, so given the command:

```
$ uv sync --no-group foo --group foo
```

The `foo` group would not be installed.

See the [development dependencies](./dependencies.md#development-dependencies) documentation for
details on how to manage development dependencies.

## Upgrading locked package versions

With an existing `uv.lock` file, uv will prefer the previously locked versions of packages when
running `uv sync` and `uv lock`. Package versions will only change if the project's dependency
constraints exclude the previous, locked version.

To upgrade all packages:

```console
$ uv lock --upgrade
```

To upgrade a single package to the latest version, while retaining the locked versions of all other
packages:

```console
$ uv lock --upgrade-package &lt;package&gt;
```

To upgrade a single package to a specific version:

```console
$ uv lock --upgrade-package &lt;package&gt;==&lt;version&gt;
```

In all cases, upgrades are limited to the project's dependency constraints. For example, if the
project defines an upper bound for a package then an upgrade will not go beyond that version.

!!! note

    uv applies similar logic to Git dependencies. For example, if a Git dependency references
    the `main` branch, uv will prefer the locked commit SHA in an existing `uv.lock` file over
    the latest commit on the `main` branch, unless the `--upgrade` or `--upgrade-package` flags
    are used.

These flags can also be provided to `uv sync` or `uv run` to update the lockfile _and_ the
environment.

## Exporting the lockfile

If you need to integrate uv with other tools or workflows, you can export `uv.lock` to the
`requirements.txt` format with `uv export --format requirements-txt`. The generated
`requirements.txt` file can then be installed via `uv pip install`, or with other tools like `pip`.

In general, we recommend against using both a `uv.lock` and a `requirements.txt` file. If you find
yourself exporting a `uv.lock` file, consider opening an issue to discuss your use case.

## Partial installations

Sometimes it's helpful to perform installations in multiple steps, e.g., for optimal layer caching
while building a Docker image. `uv sync` has several flags for this purpose.

- `--no-install-project`: Do not install the current project
- `--no-install-workspace`: Do not install any workspace members, including the root project
- `--no-install-package &lt;NO_INSTALL_PACKAGE&gt;`: Do not install the given package(s)

When these options are used, all of the dependencies of the target are still installed. For example,
`--no-install-project` will omit the _project_ but not any of its dependencies.

If used improperly, these flags can result in a broken environment since a package can be missing
its dependencies.
</file>
          <file path="docs/concepts/projects/workspaces.md"># Using workspaces

Inspired by the [Cargo](https://doc.rust-lang.org/cargo/reference/workspaces.html) concept of the
same name, a workspace is &quot;a collection of one or more packages, called _workspace members_, that
are managed together.&quot;

Workspaces organize large codebases by splitting them into multiple packages with common
dependencies. Think: a FastAPI-based web application, alongside a series of libraries that are
versioned and maintained as separate Python packages, all in the same Git repository.

In a workspace, each package defines its own `pyproject.toml`, but the workspace shares a single
lockfile, ensuring that the workspace operates with a consistent set of dependencies.

As such, `uv lock` operates on the entire workspace at once, while `uv run` and `uv sync` operate on
the workspace root by default, though both accept a `--package` argument, allowing you to run a
command in a particular workspace member from any workspace directory.

## Getting started

To create a workspace, add a `tool.uv.workspace` table to a `pyproject.toml`, which will implicitly
create a workspace rooted at that package.

!!! tip

    By default, running `uv init` inside an existing package will add the newly created member to the workspace, creating a `tool.uv.workspace` table in the workspace root if it doesn't already exist.

In defining a workspace, you must specify the `members` (required) and `exclude` (optional) keys,
which direct the workspace to include or exclude specific directories as members respectively, and
accept lists of globs:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;albatross&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = [&quot;bird-feeder&quot;, &quot;tqdm&gt;=4,&lt;5&quot;]

[tool.uv.sources]
bird-feeder = { workspace = true }

[tool.uv.workspace]
members = [&quot;packages/*&quot;]
exclude = [&quot;packages/seeds&quot;]
```

Every directory included by the `members` globs (and not excluded by the `exclude` globs) must
contain a `pyproject.toml` file. However, workspace members can be _either_
[applications](./init.md#applications) or [libraries](./init.md#libraries); both are supported in
the workspace context.

Every workspace needs a root, which is _also_ a workspace member. In the above example, `albatross`
is the workspace root, and the workspace members include all projects under the `packages`
directory, with the exception of `seeds`.

By default, `uv run` and `uv sync` operates on the workspace root. For example, in the above
example, `uv run` and `uv run --package albatross` would be equivalent, while
`uv run --package bird-feeder` would run the command in the `bird-feeder` package.

## Workspace sources

Within a workspace, dependencies on workspace members are facilitated via
[`tool.uv.sources`](./dependencies.md), as in:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;albatross&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = [&quot;bird-feeder&quot;, &quot;tqdm&gt;=4,&lt;5&quot;]

[tool.uv.sources]
bird-feeder = { workspace = true }

[tool.uv.workspace]
members = [&quot;packages/*&quot;]

[build-system]
requires = [&quot;hatchling&quot;]
build-backend = &quot;hatchling.build&quot;
```

In this example, the `albatross` project depends on the `bird-feeder` project, which is a member of
the workspace. The `workspace = true` key-value pair in the `tool.uv.sources` table indicates the
`bird-feeder` dependency should be provided by the workspace, rather than fetched from PyPI or
another registry.

!!! note

    Dependencies between workspace members are editable.

Any `tool.uv.sources` definitions in the workspace root apply to all members, unless overridden in
the `tool.uv.sources` of a specific member. For example, given the following `pyproject.toml`:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;albatross&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = [&quot;bird-feeder&quot;, &quot;tqdm&gt;=4,&lt;5&quot;]

[tool.uv.sources]
bird-feeder = { workspace = true }
tqdm = { git = &quot;https://github.com/tqdm/tqdm&quot; }

[tool.uv.workspace]
members = [&quot;packages/*&quot;]

[build-system]
requires = [&quot;hatchling&quot;]
build-backend = &quot;hatchling.build&quot;
```

Every workspace member would, by default, install `tqdm` from GitHub, unless a specific member
overrides the `tqdm` entry in its own `tool.uv.sources` table.

## Workspace layouts

The most common workspace layout can be thought of as a root project with a series of accompanying
libraries.

For example, continuing with the above example, this workspace has an explicit root at `albatross`,
with two libraries (`bird-feeder` and `seeds`) in the `packages` directory:

```text
albatross
‚îú‚îÄ‚îÄ packages
‚îÇ   ‚îú‚îÄ‚îÄ bird-feeder
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pyproject.toml
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ src
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ bird_feeder
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ foo.py
‚îÇ   ‚îî‚îÄ‚îÄ seeds
‚îÇ       ‚îú‚îÄ‚îÄ pyproject.toml
‚îÇ       ‚îî‚îÄ‚îÄ src
‚îÇ           ‚îî‚îÄ‚îÄ seeds
‚îÇ               ‚îú‚îÄ‚îÄ __init__.py
‚îÇ               ‚îî‚îÄ‚îÄ bar.py
‚îú‚îÄ‚îÄ pyproject.toml
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ uv.lock
‚îî‚îÄ‚îÄ src
    ‚îî‚îÄ‚îÄ albatross
        ‚îî‚îÄ‚îÄ main.py
```

Since `seeds` was excluded in the `pyproject.toml`, the workspace has two members total: `albatross`
(the root) and `bird-feeder`.

## When (not) to use workspaces

Workspaces are intended to facilitate the development of multiple interconnected packages within a
single repository. As a codebase grows in complexity, it can be helpful to split it into smaller,
composable packages, each with their own dependencies and version constraints.

Workspaces help enforce isolation and separation of concerns. For example, in uv, we have separate
packages for the core library and the command-line interface, enabling us to test the core library
independently of the CLI, and vice versa.

Other common use cases for workspaces include:

- A library with a performance-critical subroutine implemented in an extension module (Rust, C++,
  etc.).
- A library with a plugin system, where each plugin is a separate workspace package with a
  dependency on the root.

Workspaces are _not_ suited for cases in which members have conflicting requirements, or desire a
separate virtual environment for each member. In this case, path dependencies are often preferable.
For example, rather than grouping `albatross` and its members in a workspace, you can always define
each package as its own independent project, with inter-package dependencies defined as path
dependencies in `tool.uv.sources`:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;albatross&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = [&quot;bird-feeder&quot;, &quot;tqdm&gt;=4,&lt;5&quot;]

[tool.uv.sources]
bird-feeder = { path = &quot;packages/bird-feeder&quot; }

[build-system]
requires = [&quot;hatchling&quot;]
build-backend = &quot;hatchling.build&quot;
```

This approach conveys many of the same benefits, but allows for more fine-grained control over
dependency resolution and virtual environment management (with the downside that `uv run --package`
is no longer available; instead, commands must be run from the relevant package directory).

Finally, uv's workspaces enforce a single `requires-python` for the entire workspace, taking the
intersection of all members' `requires-python` values. If you need to support testing a given member
on a Python version that isn't supported by the rest of the workspace, you may need to use `uv pip`
to install that member in a separate virtual environment.

!!! note

    As Python does not provide dependency isolation, uv can't ensure that a package uses its declared dependencies and nothing else. For workspaces specifically, uv can't ensure that packages don't import dependencies declared by another workspace member.
</file>
        </dir>
      </dir>
      <dir path="docs/configuration">
        <file path="docs/configuration/authentication.md"># Authentication

## Git authentication

uv allows packages to be installed from Git and supports the following schemes for authenticating
with private repositories.

Using SSH:

- `git+ssh://git@&lt;hostname&gt;/...` (e.g., `git+ssh://git@github.com/astral-sh/uv`)
- `git+ssh://git@&lt;host&gt;/...` (e.g., `git+ssh://git@github.com-key-2/astral-sh/uv`)

See the
[GitHub SSH documentation](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh)
for more details on how to configure SSH.

Using a password or token:

- `git+https://&lt;user&gt;:&lt;token&gt;@&lt;hostname&gt;/...` (e.g.,
  `git+https://git:github_pat_asdf@github.com/astral-sh/uv`)
- `git+https://&lt;token&gt;@&lt;hostname&gt;/...` (e.g., `git+https://github_pat_asdf@github.com/astral-sh/uv`)
- `git+https://&lt;user&gt;@&lt;hostname&gt;/...` (e.g., `git+https://git@github.com/astral-sh/uv`)

When using a GitHub personal access token, the username is arbitrary. GitHub does not support
logging in with password directly, although other hosts may. If a username is provided without
credentials, you will be prompted to enter them.

If there are no credentials present in the URL and authentication is needed, the
[Git credential helper](https://git-scm.com/doc/credential-helpers) will be queried.

## HTTP authentication

uv supports credentials over HTTP when querying package registries.

Authentication can come from the following sources, in order of precedence:

- The URL, e.g., `https://&lt;user&gt;:&lt;password&gt;@&lt;hostname&gt;/...`
- A [`.netrc`](https://everything.curl.dev/usingcurl/netrc) configuration file
- A [keyring](https://github.com/jaraco/keyring) provider (requires opt-in)

If authentication is found for a single net location (scheme, host, and port), it will be cached for
the duration of the command and used for other queries to that net location. Authentication is not
cached across invocations of uv.

`.netrc` authentication is enabled by default, and will respect the `NETRC` environment variable if
defined, falling back to `~/.netrc` if not.

To enable keyring-based authentication, pass the `--keyring-provider subprocess` command-line
argument to uv, or set `UV_KEYRING_PROVIDER=subprocess`.

Authentication may be used for hosts specified in the following contexts:

- `[index]`
- `index-url`
- `extra-index-url`
- `find-links`
- `package @ https://...`

See the [index authentication documentation](./indexes.md#authentication) for details on
authenticating index URLs.

See the [`pip` compatibility guide](../pip/compatibility.md#registry-authentication) for details on
differences from `pip`.

## Authentication with alternative package indexes

See the [alternative indexes integration guide](../guides/integration/alternative-indexes.md) for
details on authentication with popular alternative Python package indexes.

## Custom CA certificates

By default, uv loads certificates from the bundled `webpki-roots` crate. The `webpki-roots` are a
reliable set of trust roots from Mozilla, and including them in uv improves portability and
performance (especially on macOS, where reading the system trust store incurs a significant delay).

However, in some cases, you may want to use the platform's native certificate store, especially if
you're relying on a corporate trust root (e.g., for a mandatory proxy) that's included in your
system's certificate store. To instruct uv to use the system's trust store, run uv with the
`--native-tls` command-line flag, or set the `UV_NATIVE_TLS` environment variable to `true`.

If a direct path to the certificate is required (e.g., in CI), set the `SSL_CERT_FILE` environment
variable to the path of the certificate bundle, to instruct uv to use that file instead of the
system's trust store.

If client certificate authentication (mTLS) is desired, set the `SSL_CLIENT_CERT` environment
variable to the path of the PEM formatted file containing the certificate followed by the private
key.

Finally, if you're using a setup in which you want to trust a self-signed certificate or otherwise
disable certificate verification, you can instruct uv to allow insecure connections to dedicated
hosts via the `allow-insecure-host` configuration option. For example, adding the following to
`pyproject.toml` will allow insecure connections to `example.com`:

```toml
[tool.uv]
allow-insecure-host = [&quot;example.com&quot;]
```

`allow-insecure-host` expects to receive a hostname (e.g., `localhost`) or hostname-port pair (e.g.,
`localhost:8080`), and is only applicable to HTTPS connections, as HTTP connections are inherently
insecure.

Use `allow-insecure-host` with caution and only in trusted environments, as it can expose you to
security risks due to the lack of certificate verification.
</file>
        <file path="docs/configuration/environment.md"># Environment variables

uv defines and respects the following environment variables:

### `UV_BREAK_SYSTEM_PACKAGES`

Equivalent to the `--break-system-packages` command-line argument. If set to `true`,
uv will allow the installation of packages that conflict with system-installed packages.

WARNING: `UV_BREAK_SYSTEM_PACKAGES=true` is intended for use in continuous integration
(CI) or containerized environments and should be used with caution, as modifying the system
Python can lead to unexpected behavior.

### `UV_BUILD_CONSTRAINT`

Equivalent to the `--build-constraint` command-line argument. If set, uv will use this file
as constraints for any source distribution builds. Uses space-separated list of files.

### `UV_CACHE_DIR`

Equivalent to the `--cache-dir` command-line argument. If set, uv will use this
directory for caching instead of the default cache directory.

### `UV_COMPILE_BYTECODE`

Equivalent to the `--compile-bytecode` command-line argument. If set, uv
will compile Python source files to bytecode after installation.

### `UV_CONCURRENT_BUILDS`

Sets the maximum number of source distributions that uv will build
concurrently at any given time.

### `UV_CONCURRENT_DOWNLOADS`

Sets the maximum number of in-flight concurrent downloads that uv will
perform at any given time.

### `UV_CONCURRENT_INSTALLS`

Controls the number of threads used when installing and unzipping
packages.

### `UV_CONFIG_FILE`

Equivalent to the `--config-file` command-line argument. Expects a path to a
local `uv.toml` file to use as the configuration file.

### `UV_CONSTRAINT`

Equivalent to the `--constraint` command-line argument. If set, uv will use this
file as the constraints file. Uses space-separated list of files.

### `UV_CUSTOM_COMPILE_COMMAND`

Equivalent to the `--custom-compile-command` command-line argument.

Used to override uv in the output header of the `requirements.txt` files generated by
`uv pip compile`. Intended for use-cases in which `uv pip compile` is called from within a wrapper
script, to include the name of the wrapper script in the output file.

### `UV_DEFAULT_INDEX`

Equivalent to the `--default-index` command-line argument. If set, uv will use
this URL as the default index when searching for packages.

### `UV_ENV_FILE`

`.env` files from which to load environment variables when executing `uv run` commands.

### `UV_EXCLUDE_NEWER`

Equivalent to the `--exclude-newer` command-line argument. If set, uv will
exclude distributions published after the specified date.

### `UV_EXTRA_INDEX_URL`

Equivalent to the `--extra-index-url` command-line argument. If set, uv will
use this space-separated list of URLs as additional indexes when searching for packages.
(Deprecated: use `UV_INDEX` instead.)

### `UV_FIND_LINKS`

Equivalent to the `--find-links` command-line argument. If set, uv will use this
comma-separated list of additional locations to search for packages.

### `UV_FORK_STRATEGY`

Equivalent to the `--fork-strategy` argument. Controls version selection during universal
resolution.

### `UV_FROZEN`

Equivalent to the `--frozen` command-line argument. If set, uv will run without
updating the `uv.lock` file.

### `UV_GITHUB_TOKEN`

Equivalent to the `--token` argument for self update. A GitHub token for authentication.

### `UV_GIT_LFS`

Enables fetching files stored in Git LFS when installing a package from a Git repository.

### `UV_HTTP_TIMEOUT`

Timeout (in seconds) for HTTP requests. (default: 30 s)

### `UV_INDEX`

Equivalent to the `--index` command-line argument. If set, uv will use this
space-separated list of URLs as additional indexes when searching for packages.

### `UV_INDEX_STRATEGY`

Equivalent to the `--index-strategy` command-line argument.

For example, if set to `unsafe-best-match`, uv will consider versions of a given package
available across all index URLs, rather than limiting its search to the first index URL
that contains the package.

### `UV_INDEX_URL`

Equivalent to the `--index-url` command-line argument. If set, uv will use this
URL as the default index when searching for packages.
(Deprecated: use `UV_DEFAULT_INDEX` instead.)

### `UV_INDEX_{name}_PASSWORD`

Provides the HTTP Basic authentication password for a named index.

The `name` parameter is the name of the index. For example, given an index named `foo`,
the environment variable key would be `UV_INDEX_FOO_PASSWORD`.

### `UV_INDEX_{name}_USERNAME`

Provides the HTTP Basic authentication username for a named index.

The `name` parameter is the name of the index. For example, given an index named `foo`,
the environment variable key would be `UV_INDEX_FOO_USERNAME`.

### `UV_INSECURE_HOST`

Equivalent to the `--allow-insecure-host` argument.

### `UV_INSTALLER_GHE_BASE_URL`

The URL from which to download uv using the standalone installer and `self update` feature,
in lieu of the default GitHub Enterprise URL.

### `UV_INSTALLER_GITHUB_BASE_URL`

The URL from which to download uv using the standalone installer and `self update` feature,
in lieu of the default GitHub URL.

### `UV_INSTALL_DIR`

The directory in which to install uv using the standalone installer and `self update` feature.
Defaults to `~/.local/bin`.

### `UV_KEYRING_PROVIDER`

Equivalent to the `--keyring-provider` command-line argument. If set, uv
will use this value as the keyring provider.

### `UV_LINK_MODE`

Equivalent to the `--link-mode` command-line argument. If set, uv will use this as
a link mode.

### `UV_LOCKED`

Equivalent to the `--locked` command-line argument. If set, uv will assert that the
`uv.lock` remains unchanged.

### `UV_LOG_CONTEXT`

Add additional context and structure to log messages.

If logging is not enabled, e.g., with `RUST_LOG` or `-v`, this has no effect.

### `UV_MANAGED_PYTHON`

Require use of uv-managed Python versions.

### `UV_NATIVE_TLS`

Equivalent to the `--native-tls` command-line argument. If set to `true`, uv will
use the system's trust store instead of the bundled `webpki-roots` crate.

### `UV_NO_BINARY`

Equivalent to the `--no-binary` command-line argument. If set, uv will install
all packages from source. The resolver will still use pre-built wheels to
extract package metadata, if available.

### `UV_NO_BINARY_PACKAGE`

Equivalent to the `--no-binary-package` command line argument. If set, uv will
not use pre-built wheels for the given space-delimited list of packages.

### `UV_NO_BUILD`

Equivalent to the `--no-build` command-line argument. If set, uv will not build
source distributions.

### `UV_NO_BUILD_ISOLATION`

Equivalent to the `--no-build-isolation` command-line argument. If set, uv will
skip isolation when building source distributions.

### `UV_NO_BUILD_PACKAGE`

Equivalent to the `--no-build-package` command line argument. If set, uv will
not build source distributions for the given space-delimited list of packages.

### `UV_NO_CACHE`

Equivalent to the `--no-cache` command-line argument. If set, uv will not use the
cache for any operations.

### `UV_NO_CONFIG`

Equivalent to the `--no-config` command-line argument. If set, uv will not read
any configuration files from the current directory, parent directories, or user configuration
directories.

### `UV_NO_EDITABLE`

Equivalent to the `--no-editable` command-line argument. If set, uv
installs any editable dependencies, including the project and any workspace members, as
non-editable

### `UV_NO_ENV_FILE`

Ignore `.env` files when executing `uv run` commands.

### `UV_NO_INSTALLER_METADATA`

Skip writing `uv` installer metadata files (e.g., `INSTALLER`, `REQUESTED`, and `direct_url.json`) to site-packages `.dist-info` directories.

### `UV_NO_MANAGED_PYTHON`

Disable use of uv-managed Python versions.

### `UV_NO_PROGRESS`

Equivalent to the `--no-progress` command-line argument. Disables all progress output. For
example, spinners and progress bars.

### `UV_NO_SYNC`

Equivalent to the `--no-sync` command-line argument. If set, uv will skip updating
the environment.

### `UV_NO_VERIFY_HASHES`

Equivalent to the `--no-verify-hashes` argument. Disables hash verification for
`requirements.txt` files.

### `UV_NO_WRAP`

Use to disable line wrapping for diagnostics.

### `UV_OFFLINE`

Equivalent to the `--offline` command-line argument. If set, uv will disable network access.

### `UV_OVERRIDE`

Equivalent to the `--override` command-line argument. If set, uv will use this file
as the overrides file. Uses space-separated list of files.

### `UV_PRERELEASE`

Equivalent to the `--prerelease` command-line argument. For example, if set to
`allow`, uv will allow pre-release versions for all dependencies.

### `UV_PREVIEW`

Equivalent to the `--preview` argument. Enables preview mode.

### `UV_PROJECT`

Equivalent to the `--project` command-line argument.

### `UV_PROJECT_ENVIRONMENT`

Specifies the path to the directory to use for a project virtual environment.

See the [project documentation](../concepts/projects/config.md#project-environment-path)
for more details.

### `UV_PUBLISH_CHECK_URL`

Don't upload a file if it already exists on the index. The value is the URL of the index.

### `UV_PUBLISH_INDEX`

Equivalent to the `--index` command-line argument in `uv publish`. If
set, uv the index with this name in the configuration for publishing.

### `UV_PUBLISH_PASSWORD`

Equivalent to the `--password` command-line argument in `uv publish`. If
set, uv will use this password for publishing.

### `UV_PUBLISH_TOKEN`

Equivalent to the `--token` command-line argument in `uv publish`. If set, uv
will use this token (with the username `__token__`) for publishing.

### `UV_PUBLISH_URL`

Equivalent to the `--publish-url` command-line argument. The URL of the upload
endpoint of the index to use with `uv publish`.

### `UV_PUBLISH_USERNAME`

Equivalent to the `--username` command-line argument in `uv publish`. If
set, uv will use this username for publishing.

### `UV_PYPY_INSTALL_MIRROR`

Managed PyPy installations are downloaded from [python.org](https://downloads.python.org/).

This variable can be set to a mirror URL to use a
different source for PyPy installations. The provided URL will replace
`https://downloads.python.org/pypy` in, e.g.,
`https://downloads.python.org/pypy/pypy3.8-v7.3.7-osx64.tar.bz2`.
Distributions can be read from a local directory by using the `file://` URL scheme.

### `UV_PYTHON`

Equivalent to the `--python` command-line argument. If set to a path, uv will use
this Python interpreter for all operations.

### `UV_PYTHON_BIN_DIR`

Specifies the directory to place links to installed, managed Python executables.

### `UV_PYTHON_DOWNLOADS`

Equivalent to the
[`python-downloads`](../reference/settings.md#python-downloads) setting and, when disabled, the
`--no-python-downloads` option. Whether uv should allow Python downloads.

### `UV_PYTHON_DOWNLOADS_JSON_URL`

Managed Python installations information is hardcoded in the `uv` binary.

This variable can be set to a URL pointing to JSON to use as a list for Python installations.
This will allow for setting each property of the Python installation, mostly the url part for offline mirror.

Note that currently, only local paths are supported.

### `UV_PYTHON_INSTALL_DIR`

Specifies the directory for storing managed Python installations.

### `UV_PYTHON_INSTALL_MIRROR`

Managed Python installations are downloaded from the Astral
[`python-build-standalone`](https://github.com/astral-sh/python-build-standalone) project.

This variable can be set to a mirror URL to use a different source for Python installations.
The provided URL will replace `https://github.com/astral-sh/python-build-standalone/releases/download` in, e.g.,
`https://github.com/astral-sh/python-build-standalone/releases/download/20240713/cpython-3.12.4%2B20240713-aarch64-apple-darwin-install_only.tar.gz`.
Distributions can be read from a local directory by using the `file://` URL scheme.

### `UV_PYTHON_PREFERENCE`

Whether uv should prefer system or managed Python versions.

### `UV_REQUEST_TIMEOUT`

Timeout (in seconds) for HTTP requests. Equivalent to `UV_HTTP_TIMEOUT`.

### `UV_REQUIRE_HASHES`

Equivalent to the `--require-hashes` command-line argument. If set to `true`,
uv will require that all dependencies have a hash specified in the requirements file.

### `UV_RESOLUTION`

Equivalent to the `--resolution` command-line argument. For example, if set to
`lowest-direct`, uv will install the lowest compatible versions of all direct dependencies.

### `UV_SYSTEM_PYTHON`

Equivalent to the `--system` command-line argument. If set to `true`, uv will
use the first Python interpreter found in the system `PATH`.

WARNING: `UV_SYSTEM_PYTHON=true` is intended for use in continuous integration (CI)
or containerized environments and should be used with caution, as modifying the system
Python can lead to unexpected behavior.

### `UV_TOOL_BIN_DIR`

Specifies the &quot;bin&quot; directory for installing tool executables.

### `UV_TOOL_DIR`

Specifies the directory where uv stores managed tools.

### `UV_TORCH_BACKEND`

Equivalent to the `--torch-backend` command-line argument (e.g., `cpu`, `cu126`, or `auto`).

### `UV_UNMANAGED_INSTALL`

Used ephemeral environments like CI to install uv to a specific path while preventing
the installer from modifying shell profiles or environment variables.

### `UV_VENV_SEED`

Install seed packages (one or more of: `pip`, `setuptools`, and `wheel`) into the virtual environment
created by `uv venv`.

Note that `setuptools` and `wheel` are not included in Python 3.12+ environments.



## Externally defined variables

uv also reads the following externally defined environment variables:

### `ACTIONS_ID_TOKEN_REQUEST_TOKEN`

Used for trusted publishing via `uv publish`. Contains the oidc request token.

### `ACTIONS_ID_TOKEN_REQUEST_URL`

Used for trusted publishing via `uv publish`. Contains the oidc token url.

### `ALL_PROXY`

General proxy for all network requests.

### `APPDATA`

Path to user-level configuration directory on Windows systems.

### `BASH_VERSION`

Used to detect Bash shell usage.

### `CLICOLOR_FORCE`

Use to control color via `anstyle`.

### `COLUMNS`

Overrides terminal width used for wrapping. This variable is not read by uv directly.

This is a quasi-standard variable, described, e.g., in `ncurses(3x)`.

### `CONDA_DEFAULT_ENV`

Used to determine if an active Conda environment is the base environment or not.

### `CONDA_PREFIX`

Used to detect an activated Conda environment.

### `FISH_VERSION`

Used to detect Fish shell usage.

### `FORCE_COLOR`

Forces colored output regardless of terminal support.

See [force-color.org](https://force-color.org).

### `GITHUB_ACTIONS`

Used for trusted publishing via `uv publish`.

### `HOME`

The standard `HOME` env var.

### `HTTPS_PROXY`

Proxy for HTTPS requests.

### `HTTP_PROXY`

Proxy for HTTP requests.

### `HTTP_TIMEOUT`

Timeout (in seconds) for HTTP requests. Equivalent to `UV_HTTP_TIMEOUT`.

### `INSTALLER_NO_MODIFY_PATH`

Avoid modifying the `PATH` environment variable when installing uv using the standalone
installer and `self update` feature.

### `JPY_SESSION_NAME`

Used to detect when running inside a Jupyter notebook.

### `KSH_VERSION`

Used to detect Ksh shell usage.

### `LOCALAPPDATA`

Used to look for Microsoft Store Pythons installations.

### `MACOSX_DEPLOYMENT_TARGET`

Used with `--python-platform macos` and related variants to set the
deployment target (i.e., the minimum supported macOS version).

Defaults to `13.0`, the least-recent non-EOL macOS version at time of writing.

### `NETRC`

Use to set the .netrc file location.

### `NO_COLOR`

Disables colored output (takes precedence over `FORCE_COLOR`).

See [no-color.org](https://no-color.org).

### `NU_VERSION`

Used to detect `NuShell` usage.

### `PAGER`

The standard `PAGER` posix env var. Used by `uv` to configure the appropriate pager.

### `PATH`

The standard `PATH` env var.

### `PROMPT`

Used to detect the use of the Windows Command Prompt (as opposed to PowerShell).

### `PWD`

The standard `PWD` posix env var.

### `PYC_INVALIDATION_MODE`

The validation modes to use when run with `--compile`.

See [`PycInvalidationMode`](https://docs.python.org/3/library/py_compile.html#py_compile.PycInvalidationMode).

### `PYTHONPATH`

Adds directories to Python module search path (e.g., `PYTHONPATH=/path/to/modules`).

### `RUST_LOG`

If set, uv will use this value as the log level for its `--verbose` output. Accepts
any filter compatible with the `tracing_subscriber` crate.

For example:

* `RUST_LOG=uv=debug` is the equivalent of adding `--verbose` to the command line
* `RUST_LOG=trace` will enable trace-level logging.

See the [tracing documentation](https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#example-syntax)
for more.

### `RUST_MIN_STACK`

Use to set the stack size used by uv.

The value is in bytes, and the default is typically 2MB (2097152).
Unlike the normal `RUST_MIN_STACK` semantics, this can affect main thread
stack size, because we actually spawn our own main2 thread to work around
the fact that Windows' real main thread is only 1MB. That thread has size
`max(RUST_MIN_STACK, 4MB)`.

### `SHELL`

The standard `SHELL` posix env var.

### `SSL_CERT_FILE`

Custom certificate bundle file path for SSL connections.

### `SSL_CLIENT_CERT`

If set, uv will use this file for mTLS authentication.
This should be a single file containing both the certificate and the private key in PEM format.

### `SYSTEMDRIVE`

Path to system-level configuration directory on Windows systems.

### `TRACING_DURATIONS_FILE`

Use to create the tracing durations file via the `tracing-durations-export` feature.

### `USERPROFILE`

Path to root directory of user's profile on Windows systems.

### `UV`

The path to the binary that was used to invoke uv.

This is propagated to all subprocesses spawned by uv.

If the executable was invoked through a symbolic link, some platforms will return the path
of the symbolic link and other platforms will return the path of the symbolic link‚Äôs target.

See &lt;https://doc.rust-lang.org/std/env/fn.current_exe.html#security&gt; for security
considerations.

### `VIRTUAL_ENV`

Used to detect an activated virtual environment.

### `VIRTUAL_ENV_DISABLE_PROMPT`

If set to `1` before a virtual environment is activated, then the
virtual environment name will not be prepended to the terminal prompt.

### `XDG_BIN_HOME`

Path to directory where executables are installed.

### `XDG_CACHE_HOME`

Path to cache directory on Unix systems.

### `XDG_CONFIG_DIRS`

Path to system-level configuration directory on Unix systems.

### `XDG_CONFIG_HOME`

Path to user-level configuration directory on Unix systems.

### `XDG_DATA_HOME`

Path to directory for storing managed Python installations and tools.

### `ZDOTDIR`

Used to determine which `.zshenv` to use when Zsh is being used.

### `ZSH_VERSION`

Used to detect Zsh shell usage.

</file>
        <file path="docs/configuration/files.md"># Configuration files

uv supports persistent configuration files at both the project- and user-level.

Specifically, uv will search for a `pyproject.toml` or `uv.toml` file in the current directory, or
in the nearest parent directory.

!!! note

    For `tool` commands, which operate at the user level, local configuration
    files will be ignored. Instead, uv will exclusively read from user-level configuration
    (e.g., `~/.config/uv/uv.toml`) and system-level configuration (e.g., `/etc/uv/uv.toml`).

In workspaces, uv will begin its search at the workspace root, ignoring any configuration defined in
workspace members. Since the workspace is locked as a single unit, configuration is shared across
all members.

If a `pyproject.toml` file is found, uv will read configuration from the `[tool.uv]` table. For
example, to set a persistent index URL, add the following to a `pyproject.toml`:

```toml title=&quot;pyproject.toml&quot;
[[tool.uv.index]]
url = &quot;https://test.pypi.org/simple&quot;
default = true
```

(If there is no such table, the `pyproject.toml` file will be ignored, and uv will continue
searching in the directory hierarchy.)

uv will also search for `uv.toml` files, which follow an identical structure, but omit the
`[tool.uv]` prefix. For example:

```toml title=&quot;uv.toml&quot;
[[index]]
url = &quot;https://test.pypi.org/simple&quot;
default = true
```

!!! note

    `uv.toml` files take precedence over `pyproject.toml` files, so if both `uv.toml` and
    `pyproject.toml` files are present in a directory, configuration will be read from `uv.toml`, and
    `[tool.uv]` section in the accompanying `pyproject.toml` will be ignored.

uv will also discover user-level configuration at `~/.config/uv/uv.toml` (or
`$XDG_CONFIG_HOME/uv/uv.toml`) on macOS and Linux, or `%APPDATA%\uv\uv.toml` on Windows; and
system-level configuration at `/etc/uv/uv.toml` (or `$XDG_CONFIG_DIRS/uv/uv.toml`) on macOS and
Linux, or `%SYSTEMDRIVE%\ProgramData\uv\uv.toml` on Windows.

User-and system-level configuration must use the `uv.toml` format, rather than the `pyproject.toml`
format, as a `pyproject.toml` is intended to define a Python _project_.

If project-, user-, and system-level configuration files are found, the settings will be merged,
with project-level configuration taking precedence over the user-level configuration, and user-level
configuration taking precedence over the system-level configuration. (If multiple system-level
configuration files are found, e.g., at both `/etc/uv/uv.toml` and `$XDG_CONFIG_DIRS/uv/uv.toml`,
only the first-discovered file will be used, with XDG taking priority.)

For example, if a string, number, or boolean is present in both the project- and user-level
configuration tables, the project-level value will be used, and the user-level value will be
ignored. If an array is present in both tables, the arrays will be concatenated, with the
project-level settings appearing earlier in the merged array.

Settings provided via environment variables take precedence over persistent configuration, and
settings provided via the command line take precedence over both.

uv accepts a `--no-config` command-line argument which, when provided, disables the discovery of any
persistent configuration.

uv also accepts a `--config-file` command-line argument, which accepts a path to a `uv.toml` to use
as the configuration file. When provided, this file will be used in place of _any_ discovered
configuration files (e.g., user-level configuration will be ignored).

## Settings

See the [settings reference](../reference/settings.md) for an enumeration of the available settings.

## `.env`

`uv run` can load environment variables from dotenv files (e.g., `.env`, `.env.local`,
`.env.development`), powered by the [`dotenvy`](https://github.com/allan2/dotenvy) crate.

To load a `.env` file from a dedicated location, set the `UV_ENV_FILE` environment variable, or pass
the `--env-file` flag to `uv run`.

For example, to load environment variables from a `.env` file in the current working directory:

```console
$ echo &quot;MY_VAR='Hello, world!'&quot; &gt; .env
$ uv run --env-file .env -- python -c 'import os; print(os.getenv(&quot;MY_VAR&quot;))'
Hello, world!
```

The `--env-file` flag can be provided multiple times, with subsequent files overriding values
defined in previous files. To provide multiple files via the `UV_ENV_FILE` environment variable,
separate the paths with a space (e.g., `UV_ENV_FILE=&quot;/path/to/file1 /path/to/file2&quot;`).

To disable dotenv loading (e.g., to override `UV_ENV_FILE` or the `--env-file` command-line
argument), set the `UV_NO_ENV_FILE` environment variable to `1`, or pass the`--no-env-file` flag to
`uv run`.

If the same variable is defined in the environment and in a `.env` file, the value from the
environment will take precedence.

## Configuring the pip interface

A dedicated [`[tool.uv.pip]`](../reference/settings.md#pip) section is provided for configuring
_just_ the `uv pip` command line interface. Settings in this section will not apply to `uv` commands
outside the `uv pip` namespace. However, many of the settings in this section have corollaries in
the top-level namespace which _do_ apply to the `uv pip` interface unless they are overridden by a
value in the `uv.pip` section.

The `uv.pip` settings are designed to adhere closely to pip's interface and are declared separately
to retain compatibility while allowing the global settings to use alternate designs (e.g.,
`--no-build`).

As an example, setting the `index-url` under `[tool.uv.pip]`, as in the following `pyproject.toml`,
would only affect the `uv pip` subcommands (e.g., `uv pip install`, but not `uv sync`, `uv lock`, or
`uv run`):

```toml title=&quot;pyproject.toml&quot;
[tool.uv.pip]
index-url = &quot;https://test.pypi.org/simple&quot;
```
</file>
        <file path="docs/configuration/indexes.md"># Package indexes

By default, uv uses the [Python Package Index (PyPI)](https://pypi.org) for dependency resolution
and package installation. However, uv can be configured to use other package indexes, including
private indexes, via the `[[tool.uv.index]]` configuration option (and `--index`, the analogous
command-line option).

## Defining an index

To include an additional index when resolving dependencies, add a `[[tool.uv.index]]` entry to your
`pyproject.toml`:

```toml
[[tool.uv.index]]
# Optional name for the index.
name = &quot;pytorch&quot;
# Required URL for the index.
url = &quot;https://download.pytorch.org/whl/cpu&quot;
```

Indexes are prioritized in the order in which they‚Äôre defined, such that the first index listed in
the configuration file is the first index consulted when resolving dependencies, with indexes
provided via the command line taking precedence over those in the configuration file.

By default, uv includes the Python Package Index (PyPI) as the &quot;default&quot; index, i.e., the index used
when a package is not found on any other index. To exclude PyPI from the list of indexes, set
`default = true` on another index entry (or use the `--default-index` command-line option):

```toml
[[tool.uv.index]]
name = &quot;pytorch&quot;
url = &quot;https://download.pytorch.org/whl/cpu&quot;
default = true
```

The default index is always treated as lowest priority, regardless of its position in the list of
indexes.

Index names may only contain alphanumeric characters, dashes, underscores, and periods, and must be
valid ASCII.

When providing an index on the command line (with `--index` or `--default-index`) or through an
environment variable (`UV_INDEX` or `UV_DEFAULT_INDEX`), names are optional but can be included
using the `&lt;name&gt;=&lt;url&gt;` syntax, as in:

```shell
# On the command line.
$ uv lock --index pytorch=https://download.pytorch.org/whl/cpu
# Via an environment variable.
$ UV_INDEX=pytorch=https://download.pytorch.org/whl/cpu uv lock
```

## Pinning a package to an index

A package can be pinned to a specific index by specifying the index in its `tool.uv.sources` entry.
For example, to ensure that `torch` is _always_ installed from the `pytorch` index, add the
following to your `pyproject.toml`:

```toml
[tool.uv.sources]
torch = { index = &quot;pytorch&quot; }

[[tool.uv.index]]
name = &quot;pytorch&quot;
url = &quot;https://download.pytorch.org/whl/cpu&quot;
```

Similarly, to pull from a different index based on the platform, you can provide a list of sources
disambiguated by environment markers:

```toml title=&quot;pyproject.toml&quot;
[project]
dependencies = [&quot;torch&quot;]

[tool.uv.sources]
torch = [
  { index = &quot;pytorch-cu118&quot;, marker = &quot;sys_platform == 'darwin'&quot;},
  { index = &quot;pytorch-cu124&quot;, marker = &quot;sys_platform != 'darwin'&quot;},
]

[[tool.uv.index]]
name = &quot;pytorch-cu118&quot;
url = &quot;https://download.pytorch.org/whl/cu118&quot;

[[tool.uv.index]]
name = &quot;pytorch-cu124&quot;
url = &quot;https://download.pytorch.org/whl/cu124&quot;
```

An index can be marked as `explicit = true` to prevent packages from being installed from that index
unless explicitly pinned to it. For example, to ensure that `torch` is installed from the `pytorch`
index, but all other packages are installed from PyPI, add the following to your `pyproject.toml`:

```toml
[tool.uv.sources]
torch = { index = &quot;pytorch&quot; }

[[tool.uv.index]]
name = &quot;pytorch&quot;
url = &quot;https://download.pytorch.org/whl/cpu&quot;
explicit = true
```

Named indexes referenced via `tool.uv.sources` must be defined within the project's `pyproject.toml`
file; indexes provided via the command-line, environment variables, or user-level configuration will
not be recognized.

If an index is marked as both `default = true` and `explicit = true`, it will be treated as an
explicit index (i.e., only usable via `tool.uv.sources`) while also removing PyPI as the default
index.

## Searching across multiple indexes

By default, uv will stop at the first index on which a given package is available, and limit
resolutions to those present on that first index (`first-index`).

For example, if an internal index is specified via `[[tool.uv.index]]`, uv's behavior is such that
if a package exists on that internal index, it will _always_ be installed from that internal index,
and never from PyPI. The intent is to prevent &quot;dependency confusion&quot; attacks, in which an attacker
publishes a malicious package on PyPI with the same name as an internal package, thus causing the
malicious package to be installed instead of the internal package. See, for example,
[the `torchtriton` attack](https://pytorch.org/blog/compromised-nightly-dependency/) from
December 2022.

Users can opt in to alternate index behaviors via the`--index-strategy` command-line option, or the
`UV_INDEX_STRATEGY` environment variable, which supports the following values:

- `first-index` (default): Search for each package across all indexes, limiting the candidate
  versions to those present in the first index that contains the package.
- `unsafe-first-match`: Search for each package across all indexes, but prefer the first index with
  a compatible version, even if newer versions are available on other indexes.
- `unsafe-best-match`: Search for each package across all indexes, and select the best version from
  the combined set of candidate versions.

While `unsafe-best-match` is the closest to pip's behavior, it exposes users to the risk of
&quot;dependency confusion&quot; attacks.

## Authentication

Most private package indexes require authentication to access packages, typically via a username and
password (or access token).

!!! tip

    See the [alternative index guide](../guides/integration/alternative-indexes.md) for details on
    authenticating with specific private index providers, e.g., from AWS, Azure, or GCP.

### Providing credentials directly

Credentials can be provided directly via environment variables or by embedding them in the URL.

For example, given an index named `internal-proxy` that requires a username (`public`) and password
(`koala`), define the index (without credentials) in your `pyproject.toml`:

```toml
[[tool.uv.index]]
name = &quot;internal-proxy&quot;
url = &quot;https://example.com/simple&quot;
```

From there, you can set the `UV_INDEX_INTERNAL_PROXY_USERNAME` and
`UV_INDEX_INTERNAL_PROXY_PASSWORD` environment variables, where `INTERNAL_PROXY` is the uppercase
version of the index name, with non-alphanumeric characters replaced by underscores:

```sh
export UV_INDEX_INTERNAL_PROXY_USERNAME=public
export UV_INDEX_INTERNAL_PROXY_PASSWORD=koala
```

By providing credentials via environment variables, you can avoid storing sensitive information in
the plaintext `pyproject.toml` file.

Alternatively, credentials can be embedded directly in the index definition:

```toml
[[tool.uv.index]]
name = &quot;internal&quot;
url = &quot;https://public:koala@pypi-proxy.corp.dev/simple&quot;
```

For security purposes, credentials are _never_ stored in the `uv.lock` file; as such, uv _must_ have
access to the authenticated URL at installation time.

### Using credential providers

In addition to providing credentials directly, uv supports discovery of credentials from netrc and
keyring. See the [HTTP authentication](./authentication.md#http-authentication) documentation for
details on setting up specific credential providers.

By default, uv will attempt an unauthenticated request before querying providers. If the request
fails, uv will search for credentials. If credentials are found, an authenticated request will be
attempted.

!!! note

    If a username is set, uv will search for credentials before making an unauthenticated request.

Some indexes (e.g., GitLab) will forward unauthenticated requests to a public index, like PyPI ‚Äî
which means that uv will not search for credentials. This behavior can be changed per-index, using
the `authenticate` setting. For example, to always search for credentials:

```toml hl_lines=&quot;4&quot;
[[tool.uv.index]]
name = &quot;example&quot;
url = &quot;https://example.com/simple&quot;
authenticate = &quot;always&quot;
```

When `authenticate` is set to `always`, uv will eagerly search for credentials and error if
credentials cannot be found. If the discovered credentials are not valid (i.e., the index returns a
HTTP 401 or 403), then uv will treat packages as unavailable and query the next configured index as
described in the [index strategy](#searching-across-multiple-indexes) section.

### Disabling authentication

To prevent leaking credentials, authentication can be disabled for an index:

```toml hl_lines=&quot;4&quot;
[[tool.uv.index]]
name = &quot;example&quot;
url = &quot;https://example.com/simple&quot;
authenticate = &quot;never&quot;
```

When `authenticate` is set to `never`, uv will never search for credentials for the given index and
will error if credentials are provided directly.

## &quot;Flat&quot; indexes

By default, `[[tool.uv.index]]` entries are assumed to be PyPI-style registries that implement the
[PEP 503](https://peps.python.org/pep-0503/) Simple Repository API. However, uv also supports &quot;flat&quot;
indexes, which are local directories or HTML pages that contain flat lists of wheels and source
distributions. In pip, such indexes are specified using the `--find-links` option.

To define a flat index in your `pyproject.toml`, use the `format = &quot;flat&quot;` option:

```toml
[[tool.uv.index]]
name = &quot;example&quot;
url = &quot;/path/to/directory&quot;
format = &quot;flat&quot;
```

Flat indexes support the same feature set as Simple Repository API indexes (e.g.,
`explicit = true`); you can also pin a package to a flat index using `tool.uv.sources`.

## `--index-url` and `--extra-index-url`

In addition to the `[[tool.uv.index]]` configuration option, uv supports pip-style `--index-url` and
`--extra-index-url` command-line options for compatibility, where `--index-url` defines the default
index and `--extra-index-url` defines additional indexes.

These options can be used in conjunction with the `[[tool.uv.index]]` configuration option, and
follow the same prioritization rules:

- The default index is always treated as lowest priority, whether defined via the legacy
  `--index-url` argument, the recommended `--default-index` argument, or a `[[tool.uv.index]]` entry
  with `default = true`.
- Indexes are consulted in the order in which they‚Äôre defined, either via the legacy
  `--extra-index-url` argument, the recommended `--index` argument, or `[[tool.uv.index]]` entries.

In effect, `--index-url` and `--extra-index-url` can be thought of as unnamed `[[tool.uv.index]]`
entries, with `default = true` enabled for the former. In that context, `--index-url` maps to
`--default-index`, and `--extra-index-url` maps to `--index`.
</file>
        <file path="docs/configuration/installer.md"># Configuring the uv installer

## Changing the install path

By default, uv is installed to `~/.local/bin`. If `XDG_BIN_HOME` is set, it will be used instead.
Similarly, if `XDG_DATA_HOME` is set, the target directory will be inferred as
`XDG_DATA_HOME/../bin`.

To change the installation path, use `UV_INSTALL_DIR`:

=== &quot;macOS and Linux&quot;

    ```console
    $ curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR=&quot;/custom/path&quot; sh
    ```

=== &quot;Windows&quot;

    ```powershell
    powershell -ExecutionPolicy ByPass -c {$env:UV_INSTALL_DIR = &quot;C:\Custom\Path&quot;;irm https://astral.sh/uv/install.ps1 | iex}
    ```

## Disabling shell modifications

The installer may also update your shell profiles to ensure the uv binary is on your `PATH`. To
disable this behavior, use `INSTALLER_NO_MODIFY_PATH`. For example:

```console
$ curl -LsSf https://astral.sh/uv/install.sh | env INSTALLER_NO_MODIFY_PATH=1 sh
```

If installed with `INSTALLER_NO_MODIFY_PATH`, subsequent operations, like `uv self update`, will not
modify your shell profiles.

## Unmanaged installations

In ephemeral environments like CI, use `UV_UNMANAGED_INSTALL` to install uv to a specific path while
preventing the installer from modifying shell profiles or environment variables:

```console
$ curl -LsSf https://astral.sh/uv/install.sh | env UV_UNMANAGED_INSTALL=&quot;/custom/path&quot; sh
```

The use of `UV_UNMANAGED_INSTALL` will also disable self-updates (via `uv self update`).

## Passing options to the install script

Using environment variables is recommended because they are consistent across platforms. However,
options can be passed directly to the install script. For example, to see the available options:

```console
$ curl -LsSf https://astral.sh/uv/install.sh | sh -s -- --help
```
</file>
      </dir>
      <dir path="docs/getting-started">
        <file path="docs/getting-started/features.md"># Features

uv provides essential features for Python development ‚Äî from installing Python and hacking on simple
scripts to working on large projects that support multiple Python versions and platforms.

uv's interface can be broken down into sections, which are usable independently or together.

## Python versions

Installing and managing Python itself.

- `uv python install`: Install Python versions.
- `uv python list`: View available Python versions.
- `uv python find`: Find an installed Python version.
- `uv python pin`: Pin the current project to use a specific Python version.
- `uv python uninstall`: Uninstall a Python version.

See the [guide on installing Python](../guides/install-python.md) to get started.

## Scripts

Executing standalone Python scripts, e.g., `example.py`.

- `uv run`: Run a script.
- `uv add --script`: Add a dependency to a script
- `uv remove --script`: Remove a dependency from a script

See the [guide on running scripts](../guides/scripts.md) to get started.

## Projects

Creating and working on Python projects, i.e., with a `pyproject.toml`.

- `uv init`: Create a new Python project.
- `uv add`: Add a dependency to the project.
- `uv remove`: Remove a dependency from the project.
- `uv sync`: Sync the project's dependencies with the environment.
- `uv lock`: Create a lockfile for the project's dependencies.
- `uv run`: Run a command in the project environment.
- `uv tree`: View the dependency tree for the project.
- `uv build`: Build the project into distribution archives.
- `uv publish`: Publish the project to a package index.

See the [guide on projects](../guides/projects.md) to get started.

## Tools

Running and installing tools published to Python package indexes, e.g., `ruff` or `black`.

- `uvx` / `uv tool run`: Run a tool in a temporary environment.
- `uv tool install`: Install a tool user-wide.
- `uv tool uninstall`: Uninstall a tool.
- `uv tool list`: List installed tools.
- `uv tool update-shell`: Update the shell to include tool executables.

See the [guide on tools](../guides/tools.md) to get started.

## The pip interface

Manually managing environments and packages ‚Äî intended to be used in legacy workflows or cases where
the high-level commands do not provide enough control.

Creating virtual environments (replacing `venv` and `virtualenv`):

- `uv venv`: Create a new virtual environment.

See the documentation on [using environments](../pip/environments.md) for details.

Managing packages in an environment (replacing [`pip`](https://github.com/pypa/pip) and
[`pipdeptree`](https://github.com/tox-dev/pipdeptree)):

- `uv pip install`: Install packages into the current environment.
- `uv pip show`: Show details about an installed package.
- `uv pip freeze`: List installed packages and their versions.
- `uv pip check`: Check that the current environment has compatible packages.
- `uv pip list`: List installed packages.
- `uv pip uninstall`: Uninstall packages.
- `uv pip tree`: View the dependency tree for the environment.

See the documentation on [managing packages](../pip/packages.md) for details.

Locking packages in an environment (replacing [`pip-tools`](https://github.com/jazzband/pip-tools)):

- `uv pip compile`: Compile requirements into a lockfile.
- `uv pip sync`: Sync an environment with a lockfile.

See the documentation on [locking environments](../pip/compile.md) for details.

!!! important

    These commands do not exactly implement the interfaces and behavior of the tools they are based on. The further you stray from common workflows, the more likely you are to encounter differences. Consult the [pip-compatibility guide](../pip/compatibility.md) for details.

## Utility

Managing and inspecting uv's state, such as the cache, storage directories, or performing a
self-update:

- `uv cache clean`: Remove cache entries.
- `uv cache prune`: Remove outdated cache entries.
- `uv cache dir`: Show the uv cache directory path.
- `uv tool dir`: Show the uv tool directory path.
- `uv python dir`: Show the uv installed Python versions path.
- `uv self update`: Update uv to the latest version.

## Next steps

Read the [guides](../guides/index.md) for an introduction to each feature, check out
[concept](../concepts/index.md) pages for in-depth details about uv's features, or learn how to
[get help](./help.md) if you run into any problems.
</file>
        <file path="docs/getting-started/first-steps.md"># First steps with uv

After [installing uv](./installation.md), you can check that uv is available by running the `uv`
command:

```console
$ uv
An extremely fast Python package manager.

Usage: uv [OPTIONS] &lt;COMMAND&gt;

...
```

You should see a help menu listing the available commands.

## Next steps

Now that you've confirmed uv is installed, check out an [overview of features](./features.md), learn
how to [get help](./help.md) if you run into any problems, or jump to the
[guides](../guides/index.md) to start using uv.
</file>
        <file path="docs/getting-started/help.md"># Getting help

## Help menus

The `--help` flag can be used to view the help menu for a command, e.g., for `uv`:

```console
$ uv --help
```

To view the help menu for a specific command, e.g., for `uv init`:

```console
$ uv init --help
```

When using the `--help` flag, uv displays a condensed help menu. To view a longer help menu for a
command, use `uv help`:

```console
$ uv help
```

To view the long help menu for a specific command, e.g., for `uv init`:

```console
$ uv help init
```

When using the long help menu, uv will attempt to use `less` or `more` to &quot;page&quot; the output so it is
not all displayed at once. To exit the pager, press `q`.

## Viewing the version

When seeking help, it's important to determine the version of uv that you're using ‚Äî sometimes the
problem is already solved in a newer version.

To check the installed version:

```console
$ uv version
```

The following are also valid:

```console
$ uv --version      # Same output as `uv version`
$ uv -V             # Will not include the build commit and date
$ uv pip --version  # Can be used with a subcommand
```

## Troubleshooting issues

The reference documentation contains a
[troubleshooting guide](../reference/troubleshooting/index.md) for common issues.

## Open an issue on GitHub

The [issue tracker](https://github.com/astral-sh/uv/issues) on GitHub is a good place to report bugs
and request features. Make sure to search for similar issues first, as it is common for someone else
to encounter the same problem.

## Chat on Discord

Astral has a [Discord server](https://discord.com/invite/astral-sh), which is a great place to ask
questions, learn more about uv, and engage with other community members.
</file>
        <file path="docs/getting-started/installation.md"># Installing uv

## Installation methods

Install uv with our standalone installers or your package manager of choice.

### Standalone installer

uv provides a standalone installer to download and install uv:

=== &quot;macOS and Linux&quot;

    Use `curl` to download the script and execute it with `sh`:

    ```console
    $ curl -LsSf https://astral.sh/uv/install.sh | sh
    ```

    If your system doesn't have `curl`, you can use `wget`:

    ```console
    $ wget -qO- https://astral.sh/uv/install.sh | sh
    ```

    Request a specific version by including it in the URL:

    ```console
    $ curl -LsSf https://astral.sh/uv/0.6.14/install.sh | sh
    ```

=== &quot;Windows&quot;

    Use `irm` to download the script and execute it with `iex`:

    ```console
    $ powershell -ExecutionPolicy ByPass -c &quot;irm https://astral.sh/uv/install.ps1 | iex&quot;
    ```

    Changing the [execution policy](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4#powershell-execution-policies) allows running a script from the internet.

    Request a specific version by including it in the URL:

    ```console
    $ powershell -ExecutionPolicy ByPass -c &quot;irm https://astral.sh/uv/0.6.14/install.ps1 | iex&quot;
    ```

!!! tip

    The installation script may be inspected before use:

    === &quot;macOS and Linux&quot;

        ```console
        $ curl -LsSf https://astral.sh/uv/install.sh | less
        ```

    === &quot;Windows&quot;

        ```console
        $ powershell -c &quot;irm https://astral.sh/uv/install.ps1 | more&quot;
        ```

    Alternatively, the installer or binaries can be downloaded directly from [GitHub](#github-releases).

See the documentation on [installer configuration](../configuration/installer.md) for details on
customizing your uv installation.

### PyPI

For convenience, uv is published to [PyPI](https://pypi.org/project/uv/).

If installing from PyPI, we recommend installing uv into an isolated environment, e.g., with `pipx`:

```console
$ pipx install uv
```

However, `pip` can also be used:

```console
$ pip install uv
```

!!! note

    uv ships with prebuilt distributions (wheels) for many platforms; if a wheel is not available for a given
    platform, uv will be built from source, which requires a Rust toolchain. See the
    [contributing setup guide](https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md#setup)
    for details on building uv from source.

### Cargo

uv is available via Cargo, but must be built from Git rather than [crates.io](https://crates.io) due
to its dependency on unpublished crates.

```console
$ cargo install --git https://github.com/astral-sh/uv uv
```

### Homebrew

uv is available in the core Homebrew packages.

```console
$ brew install uv
```

### WinGet

uv is available via [WinGet](https://winstall.app/apps/astral-sh.uv).

```console
$ winget install --id=astral-sh.uv  -e
```

### Scoop

uv is available via [Scoop](https://scoop.sh/#/apps?q=uv).

```console
$ scoop install main/uv
```

### Docker

uv provides a Docker image at
[`ghcr.io/astral-sh/uv`](https://github.com/astral-sh/uv/pkgs/container/uv).

See our guide on [using uv in Docker](../guides/integration/docker.md) for more details.

### GitHub Releases

uv release artifacts can be downloaded directly from
[GitHub Releases](https://github.com/astral-sh/uv/releases).

Each release page includes binaries for all supported platforms as well as instructions for using
the standalone installer via `github.com` instead of `astral.sh`.

## Upgrading uv

When uv is installed via the standalone installer, it can update itself on-demand:

```console
$ uv self update
```

!!! tip

    Updating uv will re-run the installer and can modify your shell profiles. To disable this
    behavior, set `INSTALLER_NO_MODIFY_PATH=1`.

When another installation method is used, self-updates are disabled. Use the package manager's
upgrade method instead. For example, with `pip`:

```console
$ pip install --upgrade uv
```

## Shell autocompletion

!!! tip

    You can run `echo $SHELL` to help you determine your shell.

To enable shell autocompletion for uv commands, run one of the following:

=== &quot;Bash&quot;

    ```bash
    echo 'eval &quot;$(uv generate-shell-completion bash)&quot;' &gt;&gt; ~/.bashrc
    ```

=== &quot;Zsh&quot;

    ```bash
    echo 'eval &quot;$(uv generate-shell-completion zsh)&quot;' &gt;&gt; ~/.zshrc
    ```

=== &quot;fish&quot;

    ```bash
    echo 'uv generate-shell-completion fish | source' &gt;&gt; ~/.config/fish/completions/uv.fish
    ```

=== &quot;Elvish&quot;

    ```bash
    echo 'eval (uv generate-shell-completion elvish | slurp)' &gt;&gt; ~/.elvish/rc.elv
    ```

=== &quot;PowerShell / pwsh&quot;

    ```powershell
    if (!(Test-Path -Path $PROFILE)) {
      New-Item -ItemType File -Path $PROFILE -Force
    }
    Add-Content -Path $PROFILE -Value '(&amp; uv generate-shell-completion powershell) | Out-String | Invoke-Expression'
    ```

To enable shell autocompletion for uvx, run one of the following:

=== &quot;Bash&quot;

    ```bash
    echo 'eval &quot;$(uvx --generate-shell-completion bash)&quot;' &gt;&gt; ~/.bashrc
    ```

=== &quot;Zsh&quot;

    ```bash
    echo 'eval &quot;$(uvx --generate-shell-completion zsh)&quot;' &gt;&gt; ~/.zshrc
    ```

=== &quot;fish&quot;

    ```bash
    echo 'uvx --generate-shell-completion fish | source' &gt;&gt; ~/.config/fish/completions/uvx.fish
    ```

=== &quot;Elvish&quot;

    ```bash
    echo 'eval (uvx --generate-shell-completion elvish | slurp)' &gt;&gt; ~/.elvish/rc.elv
    ```

=== &quot;PowerShell / pwsh&quot;

    ```powershell
    if (!(Test-Path -Path $PROFILE)) {
      New-Item -ItemType File -Path $PROFILE -Force
    }
    Add-Content -Path $PROFILE -Value '(&amp; uvx --generate-shell-completion powershell) | Out-String | Invoke-Expression'
    ```

Then restart the shell or source the shell config file.

## Uninstallation

If you need to remove uv from your system, follow these steps:

1.  Clean up stored data (optional):

    ```console
    $ uv cache clean
    $ rm -r &quot;$(uv python dir)&quot;
    $ rm -r &quot;$(uv tool dir)&quot;
    ```

    !!! tip

        Before removing the binaries, you may want to remove any data that uv has stored.

2.  Remove the uv and uvx binaries:

    === &quot;macOS and Linux&quot;

        ```console
        $ rm ~/.local/bin/uv ~/.local/bin/uvx
        ```

    === &quot;Windows&quot;

        ```powershell
        $ rm $HOME\.local\bin\uv.exe
        $ rm $HOME\.local\bin\uvx.exe
        ```

    !!! note

        Prior to 0.5.0, uv was installed into `~/.cargo/bin`. The binaries can be removed from there to
        uninstall. Upgrading from an older version will not automatically remove the binaries from
        `~/.cargo/bin`.

## Next steps

See the [first steps](./first-steps.md) or jump straight to the [guides](../guides/index.md) to
start using uv.
</file>
      </dir>
      <dir path="docs/guides">
        <file path="docs/guides/install-python.md">---
title: Installing and managing Python
description:
  A guide to using uv to install Python, including requesting specific versions, automatic
  installation, viewing installed versions, and more.
---

# Installing Python

If Python is already installed on your system, uv will
[detect and use](#using-existing-python-versions) it without configuration. However, uv can also
install and manage Python versions. uv [automatically installs](#automatic-python-downloads) missing
Python versions as needed ‚Äî you don't need to install Python to get started.

## Getting started

To install the latest Python version:

```console
$ uv python install
```

!!! note

    Python does not publish official distributable binaries. As such, uv uses distributions from the Astral [`python-build-standalone`](https://github.com/astral-sh/python-build-standalone) project. See the [Python distributions](../concepts/python-versions.md#managed-python-distributions) documentation for more details.

Once Python is installed, it will be used by `uv` commands automatically.

!!! important

    When Python is installed by uv, it will not be available globally (i.e. via the `python` command).
    Support for this feature is in _preview_. See [Installing Python executables](../concepts/python-versions.md#installing-python-executables)
    for details.

    You can still use
    [`uv run`](../guides/scripts.md#using-different-python-versions) or
    [create and activate a virtual environment](../pip/environments.md) to use `python` directly.

## Installing a specific version

To install a specific Python version:

```console
$ uv python install 3.12
```

To install multiple Python versions:

```console
$ uv python install 3.11 3.12
```

To install an alternative Python implementation, e.g., PyPy:

```console
$ uv python install pypy@3.10
```

See the [`python install`](../concepts/python-versions.md#installing-a-python-version) documentation
for more details.

## Reinstalling Python

To reinstall uv-managed Python versions, use `--reinstall`, e.g.:

```console
$ uv python install --reinstall
```

This will reinstall all previously installed Python versions. Improvements are constantly being
added to the Python distributions, so reinstalling may resolve bugs even if the Python version does
not change.

## Viewing Python installations

To view available and installed Python versions:

```console
$ uv python list
```

See the [`python list`](../concepts/python-versions.md#viewing-available-python-versions)
documentation for more details.

## Automatic Python downloads

Python does not need to be explicitly installed to use uv. By default, uv will automatically
download Python versions when they are required. For example, the following would download Python
3.12 if it was not installed:

```console
$ uvx python@3.12 -c &quot;print('hello world')&quot;
```

Even if a specific Python version is not requested, uv will download the latest version on demand.
For example, if there are no Python versions on your system, the following will install Python
before creating a new virtual environment:

```console
$ uv venv
```

!!! tip

    Automatic Python downloads can be [easily disabled](../concepts/python-versions.md#disabling-automatic-python-downloads) if you want more control over when Python is downloaded.

&lt;!-- TODO(zanieb): Restore when Python shim management is added
Note that when an automatic Python installation occurs, the `python` command will not be added to the shell. Use `uv python install-shim` to ensure the `python` shim is installed.
--&gt;

## Using existing Python versions

uv will use existing Python installations if present on your system. There is no configuration
necessary for this behavior: uv will use the system Python if it satisfies the requirements of the
command invocation. See the
[Python discovery](../concepts/python-versions.md#discovery-of-python-versions) documentation for
details.

To force uv to use the system Python, provide the `--no-managed-python` flag. See the
[Python version preference](../concepts/python-versions.md#requiring-or-disabling-managed-python-versions)
documentation for more details.

## Next steps

To learn more about `uv python`, see the [Python version concept](../concepts/python-versions.md)
page and the [command reference](../reference/cli.md#uv-python).

Or, read on to learn how to [run scripts](./scripts.md) and invoke Python with uv.
</file>
        <file path="docs/guides/package.md">---
title: Building and publishing a package
description: A guide to using uv to build and publish Python packages to a package index, like PyPI.
---

# Building and publishing a package

uv supports building Python packages into source and binary distributions via `uv build` and
uploading them to a registry with `uv publish`.

## Preparing your project for packaging

Before attempting to publish your project, you'll want to make sure it's ready to be packaged for
distribution.

If your project does not include a `[build-system]` definition in the `pyproject.toml`, uv will not
build it by default. This means that your project may not be ready for distribution. Read more about
the effect of declaring a build system in the
[project concept](../concepts/projects/config.md#build-systems) documentation.

!!! note

    If you have internal packages that you do not want to be published, you can mark them as
    private:

    ```toml
    [project]
    classifiers = [&quot;Private :: Do Not Upload&quot;]
    ```

    This setting makes PyPI reject your uploaded package from publishing. It does not affect
    security or privacy settings on alternative registries.

    We also recommend only generating per-project tokens: Without a PyPI token matching the project,
    it can't be accidentally published.

## Building your package

Build your package with `uv build`:

```console
$ uv build
```

By default, `uv build` will build the project in the current directory, and place the built
artifacts in a `dist/` subdirectory.

Alternatively, `uv build &lt;SRC&gt;` will build the package in the specified directory, while
`uv build --package &lt;PACKAGE&gt;` will build the specified package within the current workspace.

!!! info

    By default, `uv build` respects `tool.uv.sources` when resolving build dependencies from the
    `build-system.requires` section of the `pyproject.toml`. When publishing a package, we recommend
    running `uv build --no-sources` to ensure that the package builds correctly when `tool.uv.sources`
    is disabled, as is the case when using other build tools, like [`pypa/build`](https://github.com/pypa/build).

## Publishing your package

Publish your package with `uv publish`:

```console
$ uv publish
```

Set a PyPI token with `--token` or `UV_PUBLISH_TOKEN`, or set a username with `--username` or
`UV_PUBLISH_USERNAME` and password with `--password` or `UV_PUBLISH_PASSWORD`. For publishing to
PyPI from GitHub Actions, you don't need to set any credentials. Instead,
[add a trusted publisher to the PyPI project](https://docs.pypi.org/trusted-publishers/adding-a-publisher/).

!!! note

    PyPI does not support publishing with username and password anymore, instead you need to
    generate a token. Using a token is equivalent to setting `--username __token__` and using the
    token as password.

If you're using a custom index through `[[tool.uv.index]]`, add `publish-url` and use
`uv publish --index &lt;name&gt;`. For example:

```toml
[[tool.uv.index]]
name = &quot;testpypi&quot;
url = &quot;https://test.pypi.org/simple/&quot;
publish-url = &quot;https://test.pypi.org/legacy/&quot;
explicit = true
```

!!! note

    When using `uv publish --index &lt;name&gt;`, the `pyproject.toml` must be present, i.e., you need to
    have a checkout step in a publish CI job.

Even though `uv publish` retries failed uploads, it can happen that publishing fails in the middle,
with some files uploaded and some files still missing. With PyPI, you can retry the exact same
command, existing identical files will be ignored. With other registries, use
`--check-url &lt;index url&gt;` with the index URL (not the publish URL) the packages belong to. When
using `--index`, the index URL is used as check URL. uv will skip uploading files that are identical
to files in the registry, and it will also handle raced parallel uploads. Note that existing files
need to match exactly with those previously uploaded to the registry, this avoids accidentally
publishing source distribution and wheels with different contents for the same version.

## Installing your package

Test that the package can be installed and imported with `uv run`:

```console
$ uv run --with &lt;PACKAGE&gt; --no-project -- python -c &quot;import &lt;PACKAGE&gt;&quot;
```

The `--no-project` flag is used to avoid installing the package from your local project directory.

!!! tip

    If you have recently installed the package, you may need to include the
    `--refresh-package &lt;PACKAGE&gt;` option to avoid using a cached version of the package.

## Next steps

To learn more about publishing packages, check out the
[PyPA guides](https://packaging.python.org/en/latest/guides/section-build-and-publish/) on building
and publishing.

Or, read on for [guides](./integration/index.md) on integrating uv with other software.
</file>
        <file path="docs/guides/projects.md">---
title: Working on projects
description:
  A guide to using uv to create and manage Python projects, including adding dependencies, running
  commands, and building publishable distributions.
---

# Working on projects

uv supports managing Python projects, which define their dependencies in a `pyproject.toml` file.

## Creating a new project

You can create a new Python project using the `uv init` command:

```console
$ uv init hello-world
$ cd hello-world
```

Alternatively, you can initialize a project in the working directory:

```console
$ mkdir hello-world
$ cd hello-world
$ uv init
```

uv will create the following files:

```text
.
‚îú‚îÄ‚îÄ .python-version
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ main.py
‚îî‚îÄ‚îÄ pyproject.toml
```

The `main.py` file contains a simple &quot;Hello world&quot; program. Try it out with `uv run`:

```console
$ uv run main.py
Hello from hello-world!
```

## Project structure

A project consists of a few important parts that work together and allow uv to manage your project.
In addition to the files created by `uv init`, uv will create a virtual environment and `uv.lock`
file in the root of your project the first time you run a project command, i.e., `uv run`,
`uv sync`, or `uv lock`.

A complete listing would look like:

```text
.
‚îú‚îÄ‚îÄ .venv
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ bin
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ lib
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ pyvenv.cfg
‚îú‚îÄ‚îÄ .python-version
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ pyproject.toml
‚îî‚îÄ‚îÄ uv.lock
```

### `pyproject.toml`

The `pyproject.toml` contains metadata about your project:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;hello-world&quot;
version = &quot;0.1.0&quot;
description = &quot;Add your description here&quot;
readme = &quot;README.md&quot;
dependencies = []
```

You'll use this file to specify dependencies, as well as details about the project such as its
description or license. You can edit this file manually, or use commands like `uv add` and
`uv remove` to manage your project from the terminal.

!!! tip

    See the official [`pyproject.toml` guide](https://packaging.python.org/en/latest/guides/writing-pyproject-toml/)
    for more details on getting started with the `pyproject.toml` format.

You'll also use this file to specify uv [configuration options](../configuration/files.md) in a
[`[tool.uv]`](../reference/settings.md) section.

### `.python-version`

The `.python-version` file contains the project's default Python version. This file tells uv which
Python version to use when creating the project's virtual environment.

### `.venv`

The `.venv` folder contains your project's virtual environment, a Python environment that is
isolated from the rest of your system. This is where uv will install your project's dependencies.

See the [project environment](../concepts/projects/layout.md#the-project-environment) documentation
for more details.

### `uv.lock`

`uv.lock` is a cross-platform lockfile that contains exact information about your project's
dependencies. Unlike the `pyproject.toml` which is used to specify the broad requirements of your
project, the lockfile contains the exact resolved versions that are installed in the project
environment. This file should be checked into version control, allowing for consistent and
reproducible installations across machines.

`uv.lock` is a human-readable TOML file but is managed by uv and should not be edited manually.

See the [lockfile](../concepts/projects/layout.md#the-lockfile) documentation for more details.

## Managing dependencies

You can add dependencies to your `pyproject.toml` with the `uv add` command. This will also update
the lockfile and project environment:

```console
$ uv add requests
```

You can also specify version constraints or alternative sources:

```console
$ # Specify a version constraint
$ uv add 'requests==2.31.0'

$ # Add a git dependency
$ uv add git+https://github.com/psf/requests
```

If you're migrating from a `requirements.txt` file, you can use `uv add` with the `-r` flag to add
all dependencies from the file:

```console
$ # Add all dependencies from `requirements.txt`.
$ uv add -r requirements.txt -c constraints.txt
```

To remove a package, you can use `uv remove`:

```console
$ uv remove requests
```

To upgrade a package, run `uv lock` with the `--upgrade-package` flag:

```console
$ uv lock --upgrade-package requests
```

The `--upgrade-package` flag will attempt to update the specified package to the latest compatible
version, while keeping the rest of the lockfile intact.

See the documentation on [managing dependencies](../concepts/projects/dependencies.md) for more
details.

## Running commands

`uv run` can be used to run arbitrary scripts or commands in your project environment.

Prior to every `uv run` invocation, uv will verify that the lockfile is up-to-date with the
`pyproject.toml`, and that the environment is up-to-date with the lockfile, keeping your project
in-sync without the need for manual intervention. `uv run` guarantees that your command is run in a
consistent, locked environment.

For example, to use `flask`:

```console
$ uv add flask
$ uv run -- flask run -p 3000
```

Or, to run a script:

```python title=&quot;example.py&quot;
# Require a project dependency
import flask

print(&quot;hello world&quot;)
```

```console
$ uv run example.py
```

Alternatively, you can use `uv sync` to manually update the environment then activate it before
executing a command:

=== &quot;macOS and Linux&quot;

    ```console
    $ uv sync
    $ source .venv/bin/activate
    $ flask run -p 3000
    $ python example.py
    ```

=== &quot;Windows&quot;

    ```powershell
    uv sync
    source .venv\Scripts\activate
    flask run -p 3000
    python example.py
    ```

!!! note

    The virtual environment must be active to run scripts and commands in the project without `uv run`. Virtual environment activation differs per shell and platform.

See the documentation on [running commands and scripts](../concepts/projects/run.md) in projects for
more details.

## Building distributions

`uv build` can be used to build source distributions and binary distributions (wheel) for your
project.

By default, `uv build` will build the project in the current directory, and place the built
artifacts in a `dist/` subdirectory:

```console
$ uv build
$ ls dist/
hello-world-0.1.0-py3-none-any.whl
hello-world-0.1.0.tar.gz
```

See the documentation on [building projects](../concepts/projects/build.md) for more details.

## Next steps

To learn more about working on projects with uv, see the
[projects concept](../concepts/projects/index.md) page and the
[command reference](../reference/cli.md#uv).

Or, read on to learn how to [build and publish your project to a package index](./package.md).
</file>
        <file path="docs/guides/scripts.md">---
title: Running scripts
description:
  A guide to using uv to run Python scripts, including support for inline dependency metadata,
  reproducible scripts, and more.
---

# Running scripts

A Python script is a file intended for standalone execution, e.g., with `python &lt;script&gt;.py`. Using
uv to execute scripts ensures that script dependencies are managed without manually managing
environments.

!!! note

    If you are not familiar with Python environments: every Python installation has an environment
    that packages can be installed in. Typically, creating [_virtual_ environments](https://docs.python.org/3/library/venv.html) is recommended to
    isolate packages required by each script. uv automatically manages virtual environments for you
    and prefers a [declarative](#declaring-script-dependencies) approach to dependencies.

## Running a script without dependencies

If your script has no dependencies, you can execute it with `uv run`:

```python title=&quot;example.py&quot;
print(&quot;Hello world&quot;)
```

```console
$ uv run example.py
Hello world
```

&lt;!-- TODO(zanieb): Once we have a `python` shim, note you can execute it with `python` here --&gt;

Similarly, if your script depends on a module in the standard library, there's nothing more to do:

```python title=&quot;example.py&quot;
import os

print(os.path.expanduser(&quot;~&quot;))
```

```console
$ uv run example.py
/Users/astral
```

Arguments may be provided to the script:

```python title=&quot;example.py&quot;
import sys

print(&quot; &quot;.join(sys.argv[1:]))
```

```console
$ uv run example.py test
test

$ uv run example.py hello world!
hello world!
```

Additionally, your script can be read directly from stdin:

```console
$ echo 'print(&quot;hello world!&quot;)' | uv run -
```

Or, if your shell supports [here-documents](https://en.wikipedia.org/wiki/Here_document):

```bash
uv run - &lt;&lt;EOF
print(&quot;hello world!&quot;)
EOF
```

Note that if you use `uv run` in a _project_, i.e., a directory with a `pyproject.toml`, it will
install the current project before running the script. If your script does not depend on the
project, use the `--no-project` flag to skip this:

```console
$ # Note: the `--no-project` flag must be provided _before_ the script name.
$ uv run --no-project example.py
```

See the [projects guide](./projects.md) for more details on working in projects.

## Running a script with dependencies

When your script requires other packages, they must be installed into the environment that the
script runs in. uv prefers to create these environments on-demand instead of using a long-lived
virtual environment with manually managed dependencies. This requires explicit declaration of
dependencies that are required for the script. Generally, it's recommended to use a
[project](./projects.md) or [inline metadata](#declaring-script-dependencies) to declare
dependencies, but uv supports requesting dependencies per invocation as well.

For example, the following script requires `rich`.

```python title=&quot;example.py&quot;
import time
from rich.progress import track

for i in track(range(20), description=&quot;For example:&quot;):
    time.sleep(0.05)
```

If executed without specifying a dependency, this script will fail:

```console
$ uv run --no-project example.py
Traceback (most recent call last):
  File &quot;/Users/astral/example.py&quot;, line 2, in &lt;module&gt;
    from rich.progress import track
ModuleNotFoundError: No module named 'rich'
```

Request the dependency using the `--with` option:

```console
$ uv run --with rich example.py
For example: ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 100% 0:00:01
```

Constraints can be added to the requested dependency if specific versions are needed:

```console
$ uv run --with 'rich&gt;12,&lt;13' example.py
```

Multiple dependencies can be requested by repeating with `--with` option.

Note that if `uv run` is used in a _project_, these dependencies will be included _in addition_ to
the project's dependencies. To opt-out of this behavior, use the `--no-project` flag.

## Creating a Python script

Python recently added a standard format for
[inline script metadata](https://packaging.python.org/en/latest/specifications/inline-script-metadata/#inline-script-metadata).
It allows for selecting Python versions and defining dependencies. Use `uv init --script` to
initialize scripts with the inline metadata:

```console
$ uv init --script example.py --python 3.12
```

## Declaring script dependencies

The inline metadata format allows the dependencies for a script to be declared in the script itself.

uv supports adding and updating inline script metadata for you. Use `uv add --script` to declare the
dependencies for the script:

```console
$ uv add --script example.py 'requests&lt;3' 'rich'
```

This will add a `script` section at the top of the script declaring the dependencies using TOML:

```python title=&quot;example.py&quot;
# /// script
# dependencies = [
#   &quot;requests&lt;3&quot;,
#   &quot;rich&quot;,
# ]
# ///

import requests
from rich.pretty import pprint

resp = requests.get(&quot;https://peps.python.org/api/peps.json&quot;)
data = resp.json()
pprint([(k, v[&quot;title&quot;]) for k, v in data.items()][:10])
```

uv will automatically create an environment with the dependencies necessary to run the script, e.g.:

```console
$ uv run example.py
[
‚îÇ   ('1', 'PEP Purpose and Guidelines'),
‚îÇ   ('2', 'Procedure for Adding New Modules'),
‚îÇ   ('3', 'Guidelines for Handling Bug Reports'),
‚îÇ   ('4', 'Deprecation of Standard Modules'),
‚îÇ   ('5', 'Guidelines for Language Evolution'),
‚îÇ   ('6', 'Bug Fix Releases'),
‚îÇ   ('7', 'Style Guide for C Code'),
‚îÇ   ('8', 'Style Guide for Python Code'),
‚îÇ   ('9', 'Sample Plaintext PEP Template'),
‚îÇ   ('10', 'Voting Guidelines')
]
```

!!! important

    When using inline script metadata, even if `uv run` is [used in a _project_](../concepts/projects/run.md), the project's dependencies will be ignored. The `--no-project` flag is not required.

uv also respects Python version requirements:

```python title=&quot;example.py&quot;
# /// script
# requires-python = &quot;&gt;=3.12&quot;
# dependencies = []
# ///

# Use some syntax added in Python 3.12
type Point = tuple[float, float]
print(Point)
```

!!! note

    The `dependencies` field must be provided even if empty.

`uv run` will search for and use the required Python version. The Python version will download if it
is not installed ‚Äî see the documentation on [Python versions](../concepts/python-versions.md) for
more details.

## Using alternative package indexes

If you wish to use an alternative [package index](../configuration/indexes.md) to resolve
dependencies, you can provide the index with the `--index` option:

```console
$ uv add --index &quot;https://example.com/simple&quot; --script example.py 'requests&lt;3' 'rich'
```

This will include the package data in the inline metadata:

```python
# [[tool.uv.index]]
# url = &quot;https://example.com/simple&quot;
```

If you require authentication to access the package index, then please refer to the
[package index](../configuration/indexes.md) documentation.

## Locking dependencies

uv supports locking dependencies for PEP 723 scripts using the `uv.lock` file format. Unlike with
projects, scripts must be explicitly locked using `uv lock`:

```console
$ uv lock --script example.py
```

Running `uv lock --script` will create a `.lock` file adjacent to the script (e.g.,
`example.py.lock`).

Once locked, subsequent operations like `uv run --script`, `uv add --script`, `uv export --script`,
and `uv tree --script` will reuse the locked dependencies, updating the lockfile if necessary.

If no such lockfile is present, commands like `uv export --script` will still function as expected,
but will not create a lockfile.

## Improving reproducibility

In addition to locking dependencies, uv supports an `exclude-newer` field in the `tool.uv` section
of inline script metadata to limit uv to only considering distributions released before a specific
date. This is useful for improving the reproducibility of your script when run at a later point in
time.

The date must be specified as an [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) timestamp
(e.g., `2006-12-02T02:07:43Z`).

```python title=&quot;example.py&quot;
# /// script
# dependencies = [
#   &quot;requests&quot;,
# ]
# [tool.uv]
# exclude-newer = &quot;2023-10-16T00:00:00Z&quot;
# ///

import requests

print(requests.__version__)
```

## Using different Python versions

uv allows arbitrary Python versions to be requested on each script invocation, for example:

```python title=&quot;example.py&quot;
import sys

print(&quot;.&quot;.join(map(str, sys.version_info[:3])))
```

```console
$ # Use the default Python version, may differ on your machine
$ uv run example.py
3.12.6
```

```console
$ # Use a specific Python version
$ uv run --python 3.10 example.py
3.10.15
```

See the [Python version request](../concepts/python-versions.md#requesting-a-version) documentation
for more details on requesting Python versions.

## Using GUI scripts

On Windows `uv` will run your script ending with `.pyw` extension using `pythonw`:

```python title=&quot;example.pyw&quot;
from tkinter import Tk, ttk

root = Tk()
root.title(&quot;uv&quot;)
frm = ttk.Frame(root, padding=10)
frm.grid()
ttk.Label(frm, text=&quot;Hello World&quot;).grid(column=0, row=0)
root.mainloop()
```

```console
PS&gt; uv run example.pyw
```

![Run Result](../assets/uv_gui_script_hello_world.png){: style=&quot;height:50px;width:150px&quot;}

Similarly, it works with dependencies as well:

```python title=&quot;example_pyqt.pyw&quot;
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QGridLayout

app = QApplication(sys.argv)
widget = QWidget()
grid = QGridLayout()

text_label = QLabel()
text_label.setText(&quot;Hello World!&quot;)
grid.addWidget(text_label)

widget.setLayout(grid)
widget.setGeometry(100, 100, 200, 50)
widget.setWindowTitle(&quot;uv&quot;)
widget.show()
sys.exit(app.exec_())
```

```console
PS&gt; uv run --with PyQt5 example_pyqt.pyw
```

![Run Result](../assets/uv_gui_script_hello_world_pyqt.png){: style=&quot;height:50px;width:150px&quot;}

## Next steps

To learn more about `uv run`, see the [command reference](../reference/cli.md#uv-run).

Or, read on to learn how to [run and install tools](./tools.md) with uv.
</file>
        <file path="docs/guides/tools.md">---
title: Using tools
description:
  A guide to using uv to run tools published as Python packages, including one-off invocations with
  uvx, requesting specific tool versions, installing tools, upgrading tools, and more.
---

# Using tools

Many Python packages provide applications that can be used as tools. uv has specialized support for
easily invoking and installing tools.

## Running tools

The `uvx` command invokes a tool without installing it.

For example, to run `ruff`:

```console
$ uvx ruff
```

!!! note

    This is exactly equivalent to:

    ```console
    $ uv tool run ruff
    ```

    `uvx` is provided as an alias for convenience.

Arguments can be provided after the tool name:

```console
$ uvx pycowsay hello from uv

  -------------
&lt; hello from uv &gt;
  -------------
   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||

```

Tools are installed into temporary, isolated environments when using `uvx`.

!!! note

    If you are running a tool in a [_project_](../concepts/projects/index.md) and the tool requires that
    your project is installed, e.g., when using `pytest` or `mypy`, you'll want to use
    [`uv run`](./projects.md#running-commands) instead of `uvx`. Otherwise, the tool will be run in
    a virtual environment that is isolated from your project.

    If your project has a flat structure, e.g., instead of using a `src` directory for modules,
    the project itself does not need to be installed and `uvx` is fine. In this case, using
    `uv run` is only beneficial if you want to pin the version of the tool in the project's
    dependencies.

## Commands with different package names

When `uvx ruff` is invoked, uv installs the `ruff` package which provides the `ruff` command.
However, sometimes the package and command names differ.

The `--from` option can be used to invoke a command from a specific package, e.g., `http` which is
provided by `httpie`:

```console
$ uvx --from httpie http
```

## Requesting specific versions

To run a tool at a specific version, use `command@&lt;version&gt;`:

```console
$ uvx ruff@0.3.0 check
```

To run a tool at the latest version, use `command@latest`:

```console
$ uvx ruff@latest check
```

The `--from` option can also be used to specify package versions, as above:

```console
$ uvx --from 'ruff==0.3.0' ruff check
```

Or, to constrain to a range of versions:

```console
$ uvx --from 'ruff&gt;0.2.0,&lt;0.3.0' ruff check
```

Note the `@` syntax cannot be used for anything other than an exact version.

## Requesting extras

The `--from` option can be used to run a tool with extras:

```console
$ uvx --from 'mypy[faster-cache,reports]' mypy --xml-report mypy_report
```

This can also be combined with version selection:

```console
$ uvx --from 'mypy[faster-cache,reports]==1.13.0' mypy --xml-report mypy_report
```

## Requesting different sources

The `--from` option can also be used to install from alternative sources.

For example, to pull from git:

```console
$ uvx --from git+https://github.com/httpie/cli httpie
```

You can also pull the latest commit from a specific named branch:

```console
$ uvx --from git+https://github.com/httpie/cli@master httpie
```

Or pull a specific tag:

```console
$ uvx --from git+https://github.com/httpie/cli@3.2.4 httpie
```

Or even a specific commit:

```console
$ uvx --from git+https://github.com/httpie/cli@2843b87 httpie
```

## Commands with plugins

Additional dependencies can be included, e.g., to include `mkdocs-material` when running `mkdocs`:

```console
$ uvx --with mkdocs-material mkdocs --help
```

## Installing tools

If a tool is used often, it is useful to install it to a persistent environment and add it to the
`PATH` instead of invoking `uvx` repeatedly.

!!! tip

    `uvx` is a convenient alias for `uv tool run`. All of the other commands for interacting with
    tools require the full `uv tool` prefix.

To install `ruff`:

```console
$ uv tool install ruff
```

When a tool is installed, its executables are placed in a `bin` directory in the `PATH` which allows
the tool to be run without uv. If it's not on the `PATH`, a warning will be displayed and
`uv tool update-shell` can be used to add it to the `PATH`.

After installing `ruff`, it should be available:

```console
$ ruff --version
```

Unlike `uv pip install`, installing a tool does not make its modules available in the current
environment. For example, the following command will fail:

```console
$ python -c &quot;import ruff&quot;
```

This isolation is important for reducing interactions and conflicts between dependencies of tools,
scripts, and projects.

Unlike `uvx`, `uv tool install` operates on a _package_ and will install all executables provided by
the tool.

For example, the following will install the `http`, `https`, and `httpie` executables:

```console
$ uv tool install httpie
```

Additionally, package versions can be included without `--from`:

```console
$ uv tool install 'httpie&gt;0.1.0'
```

And, similarly, for package sources:

```console
$ uv tool install git+https://github.com/httpie/cli
```

As with `uvx`, installations can include additional packages:

```console
$ uv tool install mkdocs --with mkdocs-material
```

## Upgrading tools

To upgrade a tool, use `uv tool upgrade`:

```console
$ uv tool upgrade ruff
```

Tool upgrades will respect the version constraints provided when installing the tool. For example,
`uv tool install ruff &gt;=0.3,&lt;0.4` followed by `uv tool upgrade ruff` will upgrade Ruff to the latest
version in the range `&gt;=0.3,&lt;0.4`.

To instead replace the version constraints, re-install the tool with `uv tool install`:

```console
$ uv tool install ruff&gt;=0.4
```

To instead upgrade all tools:

```console
$ uv tool upgrade --all
```

## Requesting Python versions

By default, uv will use your default Python interpreter (the first it finds) when when running,
installing, or upgrading tools. You can specify the Python interpreter to use with the `--python`
option.

For example, to request a specific Python version when running a tool:

```console
$ uvx --python 3.10 ruff
```

Or, when installing a tool:

```console
$ uv tool install --python 3.10 ruff
```

Or, when upgrading a tool:

```console
$ uv tool upgrade --python 3.10 ruff
```

For more details on requesting Python versions, see the
[Python version](../concepts/python-versions.md#requesting-a-version) concept page..

## Legacy Windows Scripts

Tools also support running
[legacy setuptools scripts](https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/#scripts).
These scripts are available via `$(uv tool dir)\&lt;tool-name&gt;\Scripts` when installed.

Currently only legacy scripts with the `.ps1`, `.cmd`, and `.bat` extensions are supported.

For example, below is an example running a Command Prompt script.

```console
$ uv tool run --from nuitka==2.6.7 nuitka.cmd --version
```

In addition, you don't need to specify the extension. `uvx` will automatically look for files ending
in `.ps1`, `.cmd`, and `.bat` in that order of execution on your behalf.

```console
$ uv tool run --from nuitka==2.6.7 nuitka --version
```

## Next steps

To learn more about managing tools with uv, see the [Tools concept](../concepts/tools.md) page and
the [command reference](../reference/cli.md#uv-tool).

Or, read on to learn how to [work on projects](./projects.md).
</file>
        <dir path="docs/guides/integration">
          <file path="docs/guides/integration/alternative-indexes.md">---
title: Using alternative package indexes
description:
  A guide to using alternative package indexes with uv, including Azure Artifacts, Google Artifact
  Registry, AWS CodeArtifact, and more.
---

# Using alternative package indexes

While uv uses the official Python Package Index (PyPI) by default, it also supports
[alternative package indexes](../../configuration/indexes.md). Most alternative indexes require
various forms of authentication, which require some initial setup.

!!! important

    If using the pip interface, please read the documentation
    on [using multiple indexes](../../pip/compatibility.md#packages-that-exist-on-multiple-indexes)
    in uv ‚Äî the default behavior is different from pip to prevent dependency confusion attacks, but
    this means that uv may not find the versions of a package as you'd expect.

## Azure Artifacts

uv can install packages from
[Azure Artifacts](https://learn.microsoft.com/en-us/azure/devops/artifacts/start-using-azure-artifacts?view=azure-devops&amp;tabs=nuget%2Cnugetserver),
either by using a
[Personal Access Token](https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&amp;tabs=Windows)
(PAT), or using the [`keyring`](https://github.com/jaraco/keyring) package.

To use Azure Artifacts, add the index to your project:

```toml title=&quot;pyproject.toml&quot;
[[tool.uv.index]]
name = &quot;private-registry&quot;
url = &quot;https://pkgs.dev.azure.com/&lt;ORGANIZATION&gt;/&lt;PROJECT&gt;/_packaging/&lt;FEED&gt;/pypi/simple/&quot;
```

### Authenticate with an Azure access token

If there is a personal access token (PAT) available (e.g.,
[`$(System.AccessToken)` in an Azure pipeline](https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;tabs=yaml#systemaccesstoken)),
credentials can be provided via &quot;Basic&quot; HTTP authentication scheme. Include the PAT in the password
field of the URL. A username must be included as well, but can be any string.

For example, with the token stored in the `$AZURE_ARTIFACTS_TOKEN` environment variable, set
credentials for the index with:

```bash
export UV_INDEX_PRIVATE_REGISTRY_USERNAME=dummy
export UV_INDEX_PRIVATE_REGISTRY_PASSWORD=&quot;$AZURE_ARTIFACTS_TOKEN&quot;
```

!!! note

    `PRIVATE_REGISTRY` should match the name of the index defined in your `pyproject.toml`.

### Authenticate with `keyring` and `artifacts-keyring`

You can also authenticate to Artifacts using [`keyring`](https://github.com/jaraco/keyring) package
with the [`artifacts-keyring` plugin](https://github.com/Microsoft/artifacts-keyring). Because these
two packages are required to authenticate to Azure Artifacts, they must be pre-installed from a
source other than Artifacts.

The `artifacts-keyring` plugin wraps the
[Azure Artifacts Credential Provider tool](https://github.com/microsoft/artifacts-credprovider). The
credential provider supports a few different authentication modes including interactive login ‚Äî see
the [tool's documentation](https://github.com/microsoft/artifacts-credprovider) for information on
configuration.

uv only supports using the `keyring` package in
[subprocess mode](../../reference/settings.md#keyring-provider). The `keyring` executable must be in
the `PATH`, i.e., installed globally or in the active environment. The `keyring` CLI requires a
username in the URL, and it must be `VssSessionToken`.

```bash
# Pre-install keyring and the Artifacts plugin from the public PyPI
uv tool install keyring --with artifacts-keyring

# Enable keyring authentication
export UV_KEYRING_PROVIDER=subprocess

# Set the username for the index
export UV_INDEX_PRIVATE_REGISTRY_USERNAME=VssSessionToken
```

!!! note

    The [`tool.uv.keyring-provider`](../../reference/settings.md#keyring-provider)
    setting can be used to enable keyring in your `uv.toml` or `pyproject.toml`.

    Similarly, the username for the index can be added directly to the index URL.

### Publishing packages to Azure Artifacts

If you also want to publish your own packages to Azure Artifacts, you can use `uv publish` as
described in the [Building and publishing guide](../package.md).

First, add a `publish-url` to the index you want to publish packages to. For example:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;4&quot;
[[tool.uv.index]]
name = &quot;private-registry&quot;
url = &quot;https://pkgs.dev.azure.com/&lt;ORGANIZATION&gt;/&lt;PROJECT&gt;/_packaging/&lt;FEED&gt;/pypi/simple/&quot;
publish-url = &quot;https://pkgs.dev.azure.com/&lt;ORGANIZATION&gt;/&lt;PROJECT&gt;/_packaging/&lt;FEED&gt;/pypi/upload/&quot;
```

Then, configure credentials (if not using keyring):

```console
$ export UV_PUBLISH_USERNAME=dummy
$ export UV_PUBLISH_PASSWORD=&quot;$AZURE_ARTIFACTS_TOKEN&quot;
```

And publish the package:

```console
$ uv publish --index private-registry
```

To use `uv publish` without adding the `publish-url` to the project, you can set `UV_PUBLISH_URL`:

```console
$ export UV_PUBLISH_URL=https://pkgs.dev.azure.com/&lt;ORGANIZATION&gt;/&lt;PROJECT&gt;/_packaging/&lt;FEED&gt;/pypi/upload/
$ uv publish
```

Note this method is not preferable because uv cannot check if the package is already published
before uploading artifacts.

## Google Artifact Registry

uv can install packages from
[Google Artifact Registry](https://cloud.google.com/artifact-registry/docs), either by using an
access token, or using the [`keyring`](https://github.com/jaraco/keyring) package.

!!! note

    This guide assumes that [`gcloud`](https://cloud.google.com/sdk/gcloud) CLI is installed and
    authenticated.

To use Google Artifact Registry, add the index to your project:

```toml title=&quot;pyproject.toml&quot;
[[tool.uv.index]]
name = &quot;private-registry&quot;
url = &quot;https://&lt;REGION&gt;-python.pkg.dev/&lt;PROJECT&gt;/&lt;REPOSITORY&gt;&quot;
```

### Authenticate with a Google access token

Credentials can be provided via &quot;Basic&quot; HTTP authentication scheme. Include access token in the
password field of the URL. Username must be `oauth2accesstoken`, otherwise authentication will fail.

Generate a token with `gcloud`:

```bash
export ARTIFACT_REGISTRY_TOKEN=$(
    gcloud auth application-default print-access-token
)
```

!!! note

    You might need to pass extra parameters to properly generate the token (like `--project`), this
    is a basic example.

Then set credentials for the index with:

```bash
export UV_INDEX_PRIVATE_REGISTRY_USERNAME=oauth2accesstoken
export UV_INDEX_PRIVATE_REGISTRY_PASSWORD=&quot;$ARTIFACT_REGISTRY_TOKEN&quot;
```

!!! note

    `PRIVATE_REGISTRY` should match the name of the index defined in your `pyproject.toml`.

### Authenticate with `keyring` and `keyrings.google-artifactregistry-auth`

You can also authenticate to Artifact Registry using [`keyring`](https://github.com/jaraco/keyring)
package with the
[`keyrings.google-artifactregistry-auth` plugin](https://github.com/GoogleCloudPlatform/artifact-registry-python-tools).
Because these two packages are required to authenticate to Artifact Registry, they must be
pre-installed from a source other than Artifact Registry.

The `keyrings.google-artifactregistry-auth` plugin wraps
[gcloud CLI](https://cloud.google.com/sdk/gcloud) to generate short-lived access tokens, securely
store them in system keyring, and refresh them when they are expired.

uv only supports using the `keyring` package in
[subprocess mode](../../reference/settings.md#keyring-provider). The `keyring` executable must be in
the `PATH`, i.e., installed globally or in the active environment. The `keyring` CLI requires a
username in the URL and it must be `oauth2accesstoken`.

```bash
# Pre-install keyring and Artifact Registry plugin from the public PyPI
uv tool install keyring --with keyrings.google-artifactregistry-auth

# Enable keyring authentication
export UV_KEYRING_PROVIDER=subprocess

# Set the username for the index
export UV_INDEX_PRIVATE_REGISTRY_USERNAME=oauth2accesstoken
```

!!! note

    The [`tool.uv.keyring-provider`](../../reference/settings.md#keyring-provider)
    setting can be used to enable keyring in your `uv.toml` or `pyproject.toml`.

    Similarly, the username for the index can be added directly to the index URL.

### Publishing packages to Google Artifact Registry

If you also want to publish your own packages to Google Artifact Registry, you can use `uv publish`
as described in the [Building and publishing guide](../package.md).

First, add a `publish-url` to the index you want to publish packages to. For example:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;4&quot;
[[tool.uv.index]]
name = &quot;private-registry&quot;
url = &quot;https://&lt;REGION&gt;-python.pkg.dev/&lt;PROJECT&gt;/&lt;REPOSITORY&gt;&quot;
publish-url = &quot;https://&lt;REGION&gt;-python.pkg.dev/&lt;PROJECT&gt;/&lt;REPOSITORY&gt;&quot;
```

Then, configure credentials (if not using keyring):

```console
$ export UV_PUBLISH_USERNAME=oauth2accesstoken
$ export UV_PUBLISH_PASSWORD=&quot;$ARTIFACT_REGISTRY_TOKEN&quot;
```

And publish the package:

```console
$ uv publish --index private-registry
```

To use `uv publish` without adding the `publish-url` to the project, you can set `UV_PUBLISH_URL`:

```console
$ export UV_PUBLISH_URL=https://&lt;REGION&gt;-python.pkg.dev/&lt;PROJECT&gt;/&lt;REPOSITORY&gt;
$ uv publish
```

Note this method is not preferable because uv cannot check if the package is already published
before uploading artifacts.

## AWS CodeArtifact

uv can install packages from
[AWS CodeArtifact](https://docs.aws.amazon.com/codeartifact/latest/ug/using-python.html), either by
using an access token, or using the [`keyring`](https://github.com/jaraco/keyring) package.

!!! note

    This guide assumes that [`awscli`](https://aws.amazon.com/cli/) is installed and authenticated.

The index can be declared like so:

```toml title=&quot;pyproject.toml&quot;
[[tool.uv.index]]
name = &quot;private-registry&quot;
url = &quot;https://&lt;DOMAIN&gt;-&lt;ACCOUNT_ID&gt;.d.codeartifact.&lt;REGION&gt;.amazonaws.com/pypi/&lt;REPOSITORY&gt;/simple/&quot;
```

### Authenticate with an AWS access token

Credentials can be provided via &quot;Basic&quot; HTTP authentication scheme. Include access token in the
password field of the URL. Username must be `aws`, otherwise authentication will fail.

Generate a token with `awscli`:

```bash
export AWS_CODEARTIFACT_TOKEN=&quot;$(
    aws codeartifact get-authorization-token \
    --domain &lt;DOMAIN&gt; \
    --domain-owner &lt;ACCOUNT_ID&gt; \
    --query authorizationToken \
    --output text
)&quot;
```

!!! note

    You might need to pass extra parameters to properly generate the token (like `--region`), this
    is a basic example.

Then set credentials for the index with:

```bash
export UV_INDEX_PRIVATE_REGISTRY_USERNAME=aws
export UV_INDEX_PRIVATE_REGISTRY_PASSWORD=&quot;$AWS_CODEARTIFACT_TOKEN&quot;
```

!!! note

    `PRIVATE_REGISTRY` should match the name of the index defined in your `pyproject.toml`.

### Authenticate with `keyring` and `keyrings.codeartifact`

You can also authenticate to Artifact Registry using [`keyring`](https://github.com/jaraco/keyring)
package with the [`keyrings.codeartifact` plugin](https://github.com/jmkeyes/keyrings.codeartifact).
Because these two packages are required to authenticate to Artifact Registry, they must be
pre-installed from a source other than Artifact Registry.

The `keyrings.codeartifact` plugin wraps [boto3](https://pypi.org/project/boto3/) to generate
short-lived access tokens, securely store them in system keyring, and refresh them when they are
expired.

uv only supports using the `keyring` package in
[subprocess mode](../../reference/settings.md#keyring-provider). The `keyring` executable must be in
the `PATH`, i.e., installed globally or in the active environment. The `keyring` CLI requires a
username in the URL and it must be `aws`.

```bash
# Pre-install keyring and AWS CodeArtifact plugin from the public PyPI
uv tool install keyring --with keyrings.codeartifact

# Enable keyring authentication
export UV_KEYRING_PROVIDER=subprocess

# Set the username for the index
export UV_INDEX_PRIVATE_REGISTRY_USERNAME=aws
```

!!! note

    The [`tool.uv.keyring-provider`](../../reference/settings.md#keyring-provider)
    setting can be used to enable keyring in your `uv.toml` or `pyproject.toml`.

    Similarly, the username for the index can be added directly to the index URL.

### Publishing packages to AWS CodeArtifact

If you also want to publish your own packages to AWS CodeArtifact, you can use `uv publish` as
described in the [Building and publishing guide](../package.md).

First, add a `publish-url` to the index you want to publish packages to. For example:

```toml title=&quot;pyproject.toml&quot; hl_lines=&quot;4&quot;
[[tool.uv.index]]
name = &quot;private-registry&quot;
url = &quot;https://&lt;DOMAIN&gt;-&lt;ACCOUNT_ID&gt;.d.codeartifact.&lt;REGION&gt;.amazonaws.com/pypi/&lt;REPOSITORY&gt;/simple/&quot;
publish-url = &quot;https://&lt;DOMAIN&gt;-&lt;ACCOUNT_ID&gt;.d.codeartifact.&lt;REGION&gt;.amazonaws.com/pypi/&lt;REPOSITORY&gt;/&quot;
```

Then, configure credentials (if not using keyring):

```console
$ export UV_PUBLISH_USERNAME=aws
$ export UV_PUBLISH_PASSWORD=&quot;$AWS_CODEARTIFACT_TOKEN&quot;
```

And publish the package:

```console
$ uv publish --index private-registry
```

To use `uv publish` without adding the `publish-url` to the project, you can set `UV_PUBLISH_URL`:

```console
$ export UV_PUBLISH_URL=https://&lt;DOMAIN&gt;-&lt;ACCOUNT_ID&gt;.d.codeartifact.&lt;REGION&gt;.amazonaws.com/pypi/&lt;REPOSITORY&gt;/
$ uv publish
```

Note this method is not preferable because uv cannot check if the package is already published
before uploading artifacts.

## Other package indexes

uv is also known to work with JFrog's Artifactory.
</file>
          <file path="docs/guides/integration/aws-lambda.md">---
title: Using uv with AWS Lambda
description:
  A complete guide to using uv with AWS Lambda to manage Python dependencies and deploy serverless
  functions via Docker containers or zip archives.
---

# Using uv with AWS Lambda

[AWS Lambda](https://aws.amazon.com/lambda/) is a serverless computing service that lets you run
code without provisioning or managing servers.

You can use uv with AWS Lambda to manage your Python dependencies, build your deployment package,
and deploy your Lambda functions.

!!! tip

    Check out the [`uv-aws-lambda-example`](https://github.com/astral-sh/uv-aws-lambda-example) project for
    an example of best practices when using uv to deploy an application to AWS Lambda.

## Getting started

To start, assume we have a minimal FastAPI application with the following structure:

```plaintext
project
‚îú‚îÄ‚îÄ pyproject.toml
‚îî‚îÄ‚îÄ app
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îî‚îÄ‚îÄ main.py
```

Where the `pyproject.toml` contains:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;uv-aws-lambda-example&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.13&quot;
dependencies = [
    # FastAPI is a modern web framework for building APIs with Python.
    &quot;fastapi&quot;,
    # Mangum is a library that adapts ASGI applications to AWS Lambda and API Gateway.
    &quot;mangum&quot;,
]

[dependency-groups]
dev = [
    # In development mode, include the FastAPI development server.
    &quot;fastapi[standard]&gt;=0.115&quot;,
]
```

And the `main.py` file contains:

```python title=&quot;app/main.py&quot;
import logging

from fastapi import FastAPI
from mangum import Mangum

logger = logging.getLogger()
logger.setLevel(logging.INFO)

app = FastAPI()
handler = Mangum(app)


@app.get(&quot;/&quot;)
async def root() -&gt; str:
    return &quot;Hello, world!&quot;
```

We can run this application locally with:

```console
$ uv run fastapi dev
```

From there, opening http://127.0.0.1:8000/ in a web browser will display &quot;Hello, world!&quot;

## Deploying a Docker image

To deploy to AWS Lambda, we need to build a container image that includes the application code and
dependencies in a single output directory.

We'll follow the principles outlined in the [Docker guide](./docker.md) (in particular, a
multi-stage build) to ensure that the final image is as small and cache-friendly as possible.

In the first stage, we'll populate a single directory with all application code and dependencies. In
the second stage, we'll copy this directory over to the final image, omitting the build tools and
other unnecessary files.

```dockerfile title=&quot;Dockerfile&quot;
FROM ghcr.io/astral-sh/uv:0.6.14 AS uv

# First, bundle the dependencies into the task root.
FROM public.ecr.aws/lambda/python:3.13 AS builder

# Enable bytecode compilation, to improve cold-start performance.
ENV UV_COMPILE_BYTECODE=1

# Disable installer metadata, to create a deterministic layer.
ENV UV_NO_INSTALLER_METADATA=1

# Enable copy mode to support bind mount caching.
ENV UV_LINK_MODE=copy

# Bundle the dependencies into the Lambda task root via `uv pip install --target`.
#
# Omit any local packages (`--no-emit-workspace`) and development dependencies (`--no-dev`).
# This ensures that the Docker layer cache is only invalidated when the `pyproject.toml` or `uv.lock`
# files change, but remains robust to changes in the application code.
RUN --mount=from=uv,source=/uv,target=/bin/uv \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv export --frozen --no-emit-workspace --no-dev --no-editable -o requirements.txt &amp;&amp; \
    uv pip install -r requirements.txt --target &quot;${LAMBDA_TASK_ROOT}&quot;

FROM public.ecr.aws/lambda/python:3.13

# Copy the runtime dependencies from the builder stage.
COPY --from=builder ${LAMBDA_TASK_ROOT} ${LAMBDA_TASK_ROOT}

# Copy the application code.
COPY ./app ${LAMBDA_TASK_ROOT}/app

# Set the AWS Lambda handler.
CMD [&quot;app.main.handler&quot;]
```

!!! tip

    To deploy to ARM-based AWS Lambda runtimes, replace `public.ecr.aws/lambda/python:3.13` with `public.ecr.aws/lambda/python:3.13-arm64`.

We can build the image with, e.g.:

```console
$ uv lock
$ docker build -t fastapi-app .
```

The core benefits of this Dockerfile structure are as follows:

1. **Minimal image size.** By using a multi-stage build, we can ensure that the final image only
   includes the application code and dependencies. For example, the uv binary itself is not included
   in the final image.
2. **Maximal cache reuse.** By installing application dependencies separately from the application
   code, we can ensure that the Docker layer cache is only invalidated when the dependencies change.

Concretely, rebuilding the image after modifying the application source code can reuse the cached
layers, resulting in millisecond builds:

```console
 =&gt; [internal] load build definition from Dockerfile                                                                 0.0s
 =&gt; =&gt; transferring dockerfile: 1.31kB                                                                               0.0s
 =&gt; [internal] load metadata for public.ecr.aws/lambda/python:3.13                                                   0.3s
 =&gt; [internal] load metadata for ghcr.io/astral-sh/uv:latest                                                         0.3s
 =&gt; [internal] load .dockerignore                                                                                    0.0s
 =&gt; =&gt; transferring context: 106B                                                                                    0.0s
 =&gt; [uv 1/1] FROM ghcr.io/astral-sh/uv:latest@sha256:ea61e006cfec0e8d81fae901ad703e09d2c6cf1aa58abcb6507d124b50286f  0.0s
 =&gt; [builder 1/2] FROM public.ecr.aws/lambda/python:3.13@sha256:f5b51b377b80bd303fe8055084e2763336ea8920d12955b23ef  0.0s
 =&gt; [internal] load build context                                                                                    0.0s
 =&gt; =&gt; transferring context: 185B                                                                                    0.0s
 =&gt; CACHED [builder 2/2] RUN --mount=from=uv,source=/uv,target=/bin/uv     --mount=type=cache,target=/root/.cache/u  0.0s
 =&gt; CACHED [stage-2 2/3] COPY --from=builder /var/task /var/task                                                     0.0s
 =&gt; CACHED [stage-2 3/3] COPY ./app /var/task                                                                        0.0s
 =&gt; exporting to image                                                                                               0.0s
 =&gt; =&gt; exporting layers                                                                                              0.0s
 =&gt; =&gt; writing image sha256:6f8f9ef715a7cda466b677a9df4046ebbb90c8e88595242ade3b4771f547652d                         0.0
```

After building, we can push the image to
[Elastic Container Registry (ECR)](https://aws.amazon.com/ecr/) with, e.g.:

```console
$ aws ecr get-login-password --region region | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com
$ docker tag fastapi-app:latest aws_account_id.dkr.ecr.region.amazonaws.com/fastapi-app:latest
$ docker push aws_account_id.dkr.ecr.region.amazonaws.com/fastapi-app:latest
```

Finally, we can deploy the image to AWS Lambda using the AWS Management Console or the AWS CLI,
e.g.:

```console
$ aws lambda create-function \
   --function-name myFunction \
   --package-type Image \
   --code ImageUri=aws_account_id.dkr.ecr.region.amazonaws.com/fastapi-app:latest \
   --role arn:aws:iam::111122223333:role/my-lambda-role
```

Where the
[execution role](https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html#permissions-executionrole-api)
is created via:

```console
$ aws iam create-role \
   --role-name my-lambda-role \
   --assume-role-policy-document '{&quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [{ &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: {&quot;Service&quot;: &quot;lambda.amazonaws.com&quot;}, &quot;Action&quot;: &quot;sts:AssumeRole&quot;}]}'
```

Or, update an existing function with:

```console
$ aws lambda update-function-code \
   --function-name myFunction \
   --image-uri aws_account_id.dkr.ecr.region.amazonaws.com/fastapi-app:latest \
   --publish
```

To test the Lambda, we can invoke it via the AWS Management Console or the AWS CLI, e.g.:

```console
$ aws lambda invoke \
   --function-name myFunction \
   --payload file://event.json \
   --cli-binary-format raw-in-base64-out \
   response.json
{
  &quot;StatusCode&quot;: 200,
  &quot;ExecutedVersion&quot;: &quot;$LATEST&quot;
}
```

Where `event.json` contains the event payload to pass to the Lambda function:

```json title=&quot;event.json&quot;
{
  &quot;httpMethod&quot;: &quot;GET&quot;,
  &quot;path&quot;: &quot;/&quot;,
  &quot;requestContext&quot;: {},
  &quot;version&quot;: &quot;1.0&quot;
}
```

And `response.json` contains the response from the Lambda function:

```json title=&quot;response.json&quot;
{
  &quot;statusCode&quot;: 200,
  &quot;headers&quot;: {
    &quot;content-length&quot;: &quot;14&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;
  },
  &quot;multiValueHeaders&quot;: {},
  &quot;body&quot;: &quot;\&quot;Hello, world!\&quot;&quot;,
  &quot;isBase64Encoded&quot;: false
}
```

For details, see the
[AWS Lambda documentation](https://docs.aws.amazon.com/lambda/latest/dg/python-image.html).

### Workspace support

If a project includes local dependencies (e.g., via
[Workspaces](../../concepts/projects/workspaces.md), those too must be included in the deployment
package.

We'll start by extending the above example to include a dependency on a locally-developed library
named `library`.

First, we'll create the library itself:

```console
$ uv init --lib library
$ uv add ./library
```

Running `uv init` within the `project` directory will automatically convert `project` to a workspace
and add `library` as a workspace member:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;uv-aws-lambda-example&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.13&quot;
dependencies = [
    # FastAPI is a modern web framework for building APIs with Python.
    &quot;fastapi&quot;,
    # A local library.
    &quot;library&quot;,
    # Mangum is a library that adapts ASGI applications to AWS Lambda and API Gateway.
    &quot;mangum&quot;,
]

[dependency-groups]
dev = [
    # In development mode, include the FastAPI development server.
    &quot;fastapi[standard]&quot;,
]

[tool.uv.workspace]
members = [&quot;library&quot;]

[tool.uv.sources]
lib = { workspace = true }
```

By default, `uv init --lib` will create a package that exports a `hello` function. We'll modify the
application source code to call that function:

```python title=&quot;app/main.py&quot;
import logging

from fastapi import FastAPI
from mangum import Mangum

from library import hello

logger = logging.getLogger()
logger.setLevel(logging.INFO)

app = FastAPI()
handler = Mangum(app)


@app.get(&quot;/&quot;)
async def root() -&gt; str:
    return hello()
```

We can run the modified application locally with:

```console
$ uv run fastapi dev
```

And confirm that opening http://127.0.0.1:8000/ in a web browser displays, &quot;Hello from library!&quot;
(instead of &quot;Hello, World!&quot;)

Finally, we'll update the Dockerfile to include the local library in the deployment package:

```dockerfile title=&quot;Dockerfile&quot;
FROM ghcr.io/astral-sh/uv:0.6.14 AS uv

# First, bundle the dependencies into the task root.
FROM public.ecr.aws/lambda/python:3.13 AS builder

# Enable bytecode compilation, to improve cold-start performance.
ENV UV_COMPILE_BYTECODE=1

# Disable installer metadata, to create a deterministic layer.
ENV UV_NO_INSTALLER_METADATA=1

# Enable copy mode to support bind mount caching.
ENV UV_LINK_MODE=copy

# Bundle the dependencies into the Lambda task root via `uv pip install --target`.
#
# Omit any local packages (`--no-emit-workspace`) and development dependencies (`--no-dev`).
# This ensures that the Docker layer cache is only invalidated when the `pyproject.toml` or `uv.lock`
# files change, but remains robust to changes in the application code.
RUN --mount=from=uv,source=/uv,target=/bin/uv \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv export --frozen --no-emit-workspace --no-dev --no-editable -o requirements.txt &amp;&amp; \
    uv pip install -r requirements.txt --target &quot;${LAMBDA_TASK_ROOT}&quot;

# If you have a workspace, copy it over and install it too.
#
# By omitting `--no-emit-workspace`, `library` will be copied into the task root. Using a separate
# `RUN` command ensures that all third-party dependencies are cached separately and remain
# robust to changes in the workspace.
RUN --mount=from=uv,source=/uv,target=/bin/uv \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    --mount=type=bind,source=library,target=library \
    uv export --frozen --no-dev --no-editable -o requirements.txt &amp;&amp; \
    uv pip install -r requirements.txt --target &quot;${LAMBDA_TASK_ROOT}&quot;

FROM public.ecr.aws/lambda/python:3.13

# Copy the runtime dependencies from the builder stage.
COPY --from=builder ${LAMBDA_TASK_ROOT} ${LAMBDA_TASK_ROOT}

# Copy the application code.
COPY ./app ${LAMBDA_TASK_ROOT}/app

# Set the AWS Lambda handler.
CMD [&quot;app.main.handler&quot;]
```

!!! tip

    To deploy to ARM-based AWS Lambda runtimes, replace `public.ecr.aws/lambda/python:3.13` with `public.ecr.aws/lambda/python:3.13-arm64`.

From there, we can build and deploy the updated image as before.

## Deploying a zip archive

AWS Lambda also supports deployment via zip archives. For simple applications, zip archives can be a
more straightforward and efficient deployment method than Docker images; however, zip archives are
limited to
[250 MB](https://docs.aws.amazon.com/lambda/latest/dg/python-package.html#python-package-create-update)
in size.

Returning to the FastAPI example, we can bundle the application dependencies into a local directory
for AWS Lambda via:

```console
$ uv export --frozen --no-dev --no-editable -o requirements.txt
$ uv pip install \
   --no-installer-metadata \
   --no-compile-bytecode \
   --python-platform x86_64-manylinux2014 \
   --python 3.13 \
   --target packages \
   -r requirements.txt
```

!!! tip

    To deploy to ARM-based AWS Lambda runtimes, replace `x86_64-manylinux2014` with `aarch64-manylinux2014`.

Following the
[AWS Lambda documentation](https://docs.aws.amazon.com/lambda/latest/dg/python-package.html), we can
then bundle these dependencies into a zip as follows:

```console
$ cd packages
$ zip -r ../package.zip .
$ cd ..
```

Finally, we can add the application code to the zip archive:

```console
$ zip -r package.zip app
```

We can then deploy the zip archive to AWS Lambda via the AWS Management Console or the AWS CLI,
e.g.:

```console
$ aws lambda create-function \
   --function-name myFunction \
   --runtime python3.13 \
   --zip-file fileb://package.zip \
   --handler app.main.handler \
   --role arn:aws:iam::111122223333:role/service-role/my-lambda-role
```

Where the
[execution role](https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html#permissions-executionrole-api)
is created via:

```console
$ aws iam create-role \
   --role-name my-lambda-role \
   --assume-role-policy-document '{&quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [{ &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: {&quot;Service&quot;: &quot;lambda.amazonaws.com&quot;}, &quot;Action&quot;: &quot;sts:AssumeRole&quot;}]}'
```

Or, update an existing function with:

```console
$ aws lambda update-function-code \
   --function-name myFunction \
   --zip-file fileb://package.zip
```

!!! note

    By default, the AWS Management Console assumes a Lambda entrypoint of `lambda_function.lambda_handler`.
    If your application uses a different entrypoint, you'll need to modify it in the AWS Management Console.
    For example, the above FastAPI application uses `app.main.handler`.

To test the Lambda, we can invoke it via the AWS Management Console or the AWS CLI, e.g.:

```console
$ aws lambda invoke \
   --function-name myFunction \
   --payload file://event.json \
   --cli-binary-format raw-in-base64-out \
   response.json
{
  &quot;StatusCode&quot;: 200,
  &quot;ExecutedVersion&quot;: &quot;$LATEST&quot;
}
```

Where `event.json` contains the event payload to pass to the Lambda function:

```json title=&quot;event.json&quot;
{
  &quot;httpMethod&quot;: &quot;GET&quot;,
  &quot;path&quot;: &quot;/&quot;,
  &quot;requestContext&quot;: {},
  &quot;version&quot;: &quot;1.0&quot;
}
```

And `response.json` contains the response from the Lambda function:

```json title=&quot;response.json&quot;
{
  &quot;statusCode&quot;: 200,
  &quot;headers&quot;: {
    &quot;content-length&quot;: &quot;14&quot;,
    &quot;content-type&quot;: &quot;application/json&quot;
  },
  &quot;multiValueHeaders&quot;: {},
  &quot;body&quot;: &quot;\&quot;Hello, world!\&quot;&quot;,
  &quot;isBase64Encoded&quot;: false
}
```

### Using a Lambda layer

AWS Lambda also supports the deployment of multiple composed
[Lambda layers](https://docs.aws.amazon.com/lambda/latest/dg/python-layers.html) when working with
zip archives. These layers are conceptually similar to layers in a Docker image, allowing you to
separate application code from dependencies.

In particular, we can create a lambda layer for application dependencies and attach it to the Lambda
function, separate from the application code itself. This setup can improve cold-start performance
for application updates, as the dependencies layer can be reused across deployments.

To create a Lambda layer, we'll follow similar steps, but create two separate zip archives: one for
the application code and one for the application dependencies.

First, we'll create the dependency layer. Lambda layers are expected to follow a slightly different
structure, so we'll use `--prefix` rather than `--target`:

```console
$ uv export --frozen --no-dev --no-editable -o requirements.txt
$ uv pip install \
   --no-installer-metadata \
   --no-compile-bytecode \
   --python-platform x86_64-manylinux2014 \
   --python 3.13 \
   --prefix packages \
   -r requirements.txt
```

We'll then zip the dependencies in adherence with the expected layout for Lambda layers:

```console
$ mkdir python
$ cp -r packages/lib python/
$ zip -r layer_content.zip python
```

!!! tip

    To generate deterministic zip archives, consider passing the `-X` flag to `zip` to exclude
    extended attributes and file system metadata.

And publish the Lambda layer:

```console
$ aws lambda publish-layer-version --layer-name dependencies-layer \
   --zip-file fileb://layer_content.zip \
   --compatible-runtimes python3.13 \
   --compatible-architectures &quot;x86_64&quot;
```

We can then create the Lambda function as in the previous example, omitting the dependencies:

```console
$ # Zip the application code.
$ zip -r app.zip app

$ # Create the Lambda function.
$ aws lambda create-function \
   --function-name myFunction \
   --runtime python3.13 \
   --zip-file fileb://app.zip \
   --handler app.main.handler \
   --role arn:aws:iam::111122223333:role/service-role/my-lambda-role
```

Finally, we can attach the dependencies layer to the Lambda function, using the ARN returned by the
`publish-layer-version` step:

```console
$ aws lambda update-function-configuration --function-name myFunction \
    --cli-binary-format raw-in-base64-out \
    --layers &quot;arn:aws:lambda:region:111122223333:layer:dependencies-layer:1&quot;
```

When the application dependencies change, the layer can be updated independently of the application
by republishing the layer and updating the Lambda function configuration:

```console
$ # Update the dependencies in the layer.
$ aws lambda publish-layer-version --layer-name dependencies-layer \
   --zip-file fileb://layer_content.zip \
   --compatible-runtimes python3.13 \
   --compatible-architectures &quot;x86_64&quot;

$ # Update the Lambda function configuration.
$ aws lambda update-function-configuration --function-name myFunction \
    --cli-binary-format raw-in-base64-out \
    --layers &quot;arn:aws:lambda:region:111122223333:layer:dependencies-layer:2&quot;
```
</file>
          <file path="docs/guides/integration/dependency-bots.md">---
title: Using uv with dependency bots
description: A guide to using uv with dependency bots like Renovate and Dependabot.
---

# Dependency bots

It is considered best practice to regularly update dependencies, to avoid being exposed to
vulnerabilities, limit incompatibilities between dependencies, and avoid complex upgrades when
upgrading from a too old version. A variety of tools can help staying up-to-date by creating
automated pull requests. Several of them support uv, or have work underway to support it.

## Renovate

uv is supported by [Renovate](https://github.com/renovatebot/renovate).

### `uv.lock` output

Renovate uses the presence of a `uv.lock` file to determine that uv is used for managing
dependencies, and will suggest upgrades to
[project dependencies](../../concepts/projects/dependencies.md#project-dependencies),
[optional dependencies](../../concepts/projects/dependencies.md#optional-dependencies) and
[development dependencies](../../concepts/projects/dependencies.md#development-dependencies).
Renovate will update both the `pyproject.toml` and `uv.lock` files.

The lockfile can also be refreshed on a regular basis (for instance to update transitive
dependencies) by enabling the
[`lockFileMaintenance`](https://docs.renovatebot.com/configuration-options/#lockfilemaintenance)
option:

```jsx title=&quot;renovate.json5&quot;
{
  $schema: &quot;https://docs.renovatebot.com/renovate-schema.json&quot;,
  lockFileMaintenance: {
    enabled: true,
  },
}
```

### Inline script metadata

Renovate supports updating dependencies defined using
[script inline metadata](../scripts.md/#declaring-script-dependencies).

Since it cannot automatically detect which Python files use script inline metadata, their locations
need to be explicitly defined using
[`fileMatch`](https://docs.renovatebot.com/configuration-options/#filematch), like so:

```jsx title=&quot;renovate.json5&quot;
{
  $schema: &quot;https://docs.renovatebot.com/renovate-schema.json&quot;,
  pep723: {
    fileMatch: [
      &quot;scripts/generate_docs\\.py&quot;,
      &quot;scripts/run_server\\.py&quot;,
    ],
  },
}
```

## Dependabot

Support for uv is not yet available. Progress can be tracked at
[dependabot/dependabot-core#10478](https://github.com/dependabot/dependabot-core/issues/10478).
</file>
          <file path="docs/guides/integration/docker.md">---
title: Using uv in Docker
description:
  A complete guide to using uv in Docker to manage Python dependencies while optimizing build times
  and image size via multi-stage builds, intermediate layers, and more.
---

# Using uv in Docker

## Getting started

!!! tip

    Check out the [`uv-docker-example`](https://github.com/astral-sh/uv-docker-example) project for
    an example of best practices when using uv to build an application in Docker.

uv provides both _distroless_ Docker images, which are useful for
[copying uv binaries](#installing-uv) into your own image builds, and images derived from popular
base images, which are useful for using uv in a container. The distroless images do not contain
anything but the uv binaries. In contrast, the derived images include an operating system with uv
pre-installed.

As an example, to run uv in a container using a Debian-based image:

```console
$ docker run --rm -it ghcr.io/astral-sh/uv:debian uv --help
```

### Available images

The following distroless images are available:

- `ghcr.io/astral-sh/uv:latest`
- `ghcr.io/astral-sh/uv:{major}.{minor}.{patch}`, e.g., `ghcr.io/astral-sh/uv:0.6.14`
- `ghcr.io/astral-sh/uv:{major}.{minor}`, e.g., `ghcr.io/astral-sh/uv:0.6` (the latest patch
  version)

And the following derived images are available:

&lt;!-- prettier-ignore --&gt;
- Based on `alpine:3.20`:
    - `ghcr.io/astral-sh/uv:alpine`
    - `ghcr.io/astral-sh/uv:alpine3.20`
- Based on `debian:bookworm-slim`:
    - `ghcr.io/astral-sh/uv:debian-slim`
    - `ghcr.io/astral-sh/uv:bookworm-slim`
- Based on `buildpack-deps:bookworm`:
    - `ghcr.io/astral-sh/uv:debian`
    - `ghcr.io/astral-sh/uv:bookworm`
- Based on `python3.x-alpine`:
    - `ghcr.io/astral-sh/uv:python3.13-alpine`
    - `ghcr.io/astral-sh/uv:python3.12-alpine`
    - `ghcr.io/astral-sh/uv:python3.11-alpine`
    - `ghcr.io/astral-sh/uv:python3.10-alpine`
    - `ghcr.io/astral-sh/uv:python3.9-alpine`
    - `ghcr.io/astral-sh/uv:python3.8-alpine`
- Based on `python3.x-bookworm`:
    - `ghcr.io/astral-sh/uv:python3.13-bookworm`
    - `ghcr.io/astral-sh/uv:python3.12-bookworm`
    - `ghcr.io/astral-sh/uv:python3.11-bookworm`
    - `ghcr.io/astral-sh/uv:python3.10-bookworm`
    - `ghcr.io/astral-sh/uv:python3.9-bookworm`
    - `ghcr.io/astral-sh/uv:python3.8-bookworm`
- Based on `python3.x-slim-bookworm`:
    - `ghcr.io/astral-sh/uv:python3.13-bookworm-slim`
    - `ghcr.io/astral-sh/uv:python3.12-bookworm-slim`
    - `ghcr.io/astral-sh/uv:python3.11-bookworm-slim`
    - `ghcr.io/astral-sh/uv:python3.10-bookworm-slim`
    - `ghcr.io/astral-sh/uv:python3.9-bookworm-slim`
    - `ghcr.io/astral-sh/uv:python3.8-bookworm-slim`
&lt;!-- prettier-ignore-end --&gt;

As with the distroless image, each derived image is published with uv version tags as
`ghcr.io/astral-sh/uv:{major}.{minor}.{patch}-{base}` and
`ghcr.io/astral-sh/uv:{major}.{minor}-{base}`, e.g., `ghcr.io/astral-sh/uv:0.6.14-alpine`.

For more details, see the [GitHub Container](https://github.com/astral-sh/uv/pkgs/container/uv)
page.

### Installing uv

Use one of the above images with uv pre-installed or install uv by copying the binary from the
official distroless Docker image:

```dockerfile title=&quot;Dockerfile&quot;
FROM python:3.12-slim-bookworm
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/
```

Or, with the installer:

```dockerfile title=&quot;Dockerfile&quot;
FROM python:3.12-slim-bookworm

# The installer requires curl (and certificates) to download the release archive
RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends curl ca-certificates

# Download the latest installer
ADD https://astral.sh/uv/install.sh /uv-installer.sh

# Run the installer then remove it
RUN sh /uv-installer.sh &amp;&amp; rm /uv-installer.sh

# Ensure the installed binary is on the `PATH`
ENV PATH=&quot;/root/.local/bin/:$PATH&quot;
```

Note this requires `curl` to be available.

In either case, it is best practice to pin to a specific uv version, e.g., with:

```dockerfile
COPY --from=ghcr.io/astral-sh/uv:0.6.14 /uv /uvx /bin/
```

!!! tip

    While the Dockerfile example above pins to a specific tag, it's also
    possible to pin a specific SHA256. Pinning a specific SHA256 is considered
    best practice in environments that require reproducible builds as tags can
    be moved across different commit SHAs.

    ```Dockerfile
    # e.g., using a hash from a previous release
    COPY --from=ghcr.io/astral-sh/uv@sha256:2381d6aa60c326b71fd40023f921a0a3b8f91b14d5db6b90402e65a635053709 /uv /uvx /bin/
    ```

Or, with the installer:

```dockerfile
ADD https://astral.sh/uv/0.6.14/install.sh /uv-installer.sh
```

### Installing a project

If you're using uv to manage your project, you can copy it into the image and install it:

```dockerfile title=&quot;Dockerfile&quot;
# Copy the project into the image
ADD . /app

# Sync the project into a new environment, asserting the lockfile is up to date
WORKDIR /app
RUN uv sync --locked
```

!!! important

    It is best practice to add `.venv` to a [`.dockerignore` file](https://docs.docker.com/build/concepts/context/#dockerignore-files)
    in your repository to prevent it from being included in image builds. The project virtual
    environment is dependent on your local platform and should be created from scratch in the image.

Then, to start your application by default:

```dockerfile title=&quot;Dockerfile&quot;
# Presuming there is a `my_app` command provided by the project
CMD [&quot;uv&quot;, &quot;run&quot;, &quot;my_app&quot;]
```

!!! tip

    It is best practice to use [intermediate layers](#intermediate-layers) separating installation
    of dependencies and the project itself to improve Docker image build times.

See a complete example in the
[`uv-docker-example` project](https://github.com/astral-sh/uv-docker-example/blob/main/Dockerfile).

### Using the environment

Once the project is installed, you can either _activate_ the project virtual environment by placing
its binary directory at the front of the path:

```dockerfile title=&quot;Dockerfile&quot;
ENV PATH=&quot;/app/.venv/bin:$PATH&quot;
```

Or, you can use `uv run` for any commands that require the environment:

```dockerfile title=&quot;Dockerfile&quot;
RUN uv run some_script.py
```

!!! tip

    Alternatively, the
    [`UV_PROJECT_ENVIRONMENT` setting](../../concepts/projects/config.md#project-environment-path) can
    be set before syncing to install to the system Python environment and skip environment activation
    entirely.

### Using installed tools

To use installed tools, ensure the [tool bin directory](../../concepts/tools.md#the-bin-directory)
is on the path:

```dockerfile title=&quot;Dockerfile&quot;
ENV PATH=/root/.local/bin:$PATH
RUN uv tool install cowsay
```

```console
$ docker run -it $(docker build -q .) /bin/bash -c &quot;cowsay -t hello&quot;
  _____
| hello |
  =====
     \
      \
        ^__^
        (oo)\_______
        (__)\       )\/\
            ||----w |
            ||     ||
```

!!! note

    The tool bin directory's location can be determined by running the `uv tool dir --bin` command
    in the container.

    Alternatively, it can be set to a constant location:

    ```dockerfile title=&quot;Dockerfile&quot;
    ENV UV_TOOL_BIN_DIR=/opt/uv-bin/
    ```

### Installing Python in ARM musl images

While uv will attempt to [install a compatible Python version](../install-python.md) if no such
version is available in the image, uv does not yet support installing Python for musl Linux on ARM.
For example, if you are using an Alpine Linux base image on an ARM machine, you may need to add it
with the system package manager:

```shell
apk add --no-cache python3~=3.12
```

## Developing in a container

When developing, it's useful to mount the project directory into a container. With this setup,
changes to the project can be immediately reflected in a containerized service without rebuilding
the image. However, it is important _not_ to include the project virtual environment (`.venv`) in
the mount, because the virtual environment is platform specific and the one built for the image
should be kept.

### Mounting the project with `docker run`

Bind mount the project (in the working directory) to `/app` while retaining the `.venv` directory
with an [anonymous volume](https://docs.docker.com/engine/storage/#volumes):

```console
$ docker run --rm --volume .:/app --volume /app/.venv [...]
```

!!! tip

    The `--rm` flag is included to ensure the container and anonymous volume are cleaned up when the
    container exits.

See a complete example in the
[`uv-docker-example` project](https://github.com/astral-sh/uv-docker-example/blob/main/run.sh).

### Configuring `watch` with `docker compose`

When using Docker compose, more sophisticated tooling is available for container development. The
[`watch`](https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts) option
allows for greater granularity than is practical with a bind mount and supports triggering updates
to the containerized service when files change.

!!! note

    This feature requires Compose 2.22.0 which is bundled with Docker Desktop 4.24.

Configure `watch` in your
[Docker compose file](https://docs.docker.com/compose/compose-application-model/#the-compose-file)
to mount the project directory without syncing the project virtual environment and to rebuild the
image when the configuration changes:

```yaml title=&quot;compose.yaml&quot;
services:
  example:
    build: .

    # ...

    develop:
      # Create a `watch` configuration to update the app
      #
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: .
          target: /app
          # Exclude the project virtual environment
          ignore:
            - .venv/

        # Rebuild the image on changes to the `pyproject.toml`
        - action: rebuild
          path: ./pyproject.toml
```

Then, run `docker compose watch` to run the container with the development setup.

See a complete example in the
[`uv-docker-example` project](https://github.com/astral-sh/uv-docker-example/blob/main/compose.yml).

## Optimizations

### Compiling bytecode

Compiling Python source files to bytecode is typically desirable for production images as it tends
to improve startup time (at the cost of increased installation time).

To enable bytecode compilation, use the `--compile-bytecode` flag:

```dockerfile title=&quot;Dockerfile&quot;
RUN uv sync --compile-bytecode
```

Alternatively, you can set the `UV_COMPILE_BYTECODE` environment variable to ensure that all
commands within the Dockerfile compile bytecode:

```dockerfile title=&quot;Dockerfile&quot;
ENV UV_COMPILE_BYTECODE=1
```

### Caching

A [cache mount](https://docs.docker.com/build/guide/mounts/#add-a-cache-mount) can be used to
improve performance across builds:

```dockerfile title=&quot;Dockerfile&quot;
ENV UV_LINK_MODE=copy

RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync
```

Changing the default [`UV_LINK_MODE`](../../reference/settings.md#link-mode) silences warnings about
not being able to use hard links since the cache and sync target are on separate file systems.

If you're not mounting the cache, image size can be reduced by using the `--no-cache` flag or
setting `UV_NO_CACHE`.

!!! note

    The cache directory's location can be determined by running the `uv cache dir` command in the
    container.

    Alternatively, the cache can be set to a constant location:

    ```dockerfile title=&quot;Dockerfile&quot;
    ENV UV_CACHE_DIR=/opt/uv-cache/
    ```

### Intermediate layers

If you're using uv to manage your project, you can improve build times by moving your transitive
dependency installation into its own layer via the `--no-install` options.

`uv sync --no-install-project` will install the dependencies of the project but not the project
itself. Since the project changes frequently, but its dependencies are generally static, this can be
a big time saver.

```dockerfile title=&quot;Dockerfile&quot;
# Install uv
FROM python:3.12-slim
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Change the working directory to the `app` directory
WORKDIR /app

# Install dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --locked --no-install-project

# Copy the project into the image
ADD . /app

# Sync the project
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked
```

Note that the `pyproject.toml` is required to identify the project root and name, but the project
_contents_ are not copied into the image until the final `uv sync` command.

!!! tip

    If you're using a [workspace](../../concepts/projects/workspaces.md), then use the
    `--no-install-workspace` flag which excludes the project _and_ any workspace members.

    If you want to remove specific packages from the sync, use `--no-install-package &lt;name&gt;`.

### Non-editable installs

By default, uv installs projects and workspace members in editable mode, such that changes to the
source code are immediately reflected in the environment.

`uv sync` and `uv run` both accept a `--no-editable` flag, which instructs uv to install the project
in non-editable mode, removing any dependency on the source code.

In the context of a multi-stage Docker image, `--no-editable` can be used to include the project in
the synced virtual environment from one stage, then copy the virtual environment alone (and not the
source code) into the final image.

For example:

```dockerfile title=&quot;Dockerfile&quot;
# Install uv
FROM python:3.12-slim AS builder
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Change the working directory to the `app` directory
WORKDIR /app

# Install dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --locked --no-install-project --no-editable

# Copy the project into the intermediate image
ADD . /app

# Sync the project
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked --no-editable

FROM python:3.12-slim

# Copy the environment, but not the source code
COPY --from=builder --chown=app:app /app/.venv /app/.venv

# Run the application
CMD [&quot;/app/.venv/bin/hello&quot;]
```

### Using uv temporarily

If uv isn't needed in the final image, the binary can be mounted in each invocation:

```dockerfile title=&quot;Dockerfile&quot;
RUN --mount=from=ghcr.io/astral-sh/uv,source=/uv,target=/bin/uv \
    uv sync
```

## Using the pip interface

### Installing a package

The system Python environment is safe to use this context, since a container is already isolated.
The `--system` flag can be used to install in the system environment:

```dockerfile title=&quot;Dockerfile&quot;
RUN uv pip install --system ruff
```

To use the system Python environment by default, set the `UV_SYSTEM_PYTHON` variable:

```dockerfile title=&quot;Dockerfile&quot;
ENV UV_SYSTEM_PYTHON=1
```

Alternatively, a virtual environment can be created and activated:

```dockerfile title=&quot;Dockerfile&quot;
RUN uv venv /opt/venv
# Use the virtual environment automatically
ENV VIRTUAL_ENV=/opt/venv
# Place entry points in the environment at the front of the path
ENV PATH=&quot;/opt/venv/bin:$PATH&quot;
```

When using a virtual environment, the `--system` flag should be omitted from uv invocations:

```dockerfile title=&quot;Dockerfile&quot;
RUN uv pip install ruff
```

### Installing requirements

To install requirements files, copy them into the container:

```dockerfile title=&quot;Dockerfile&quot;
COPY requirements.txt .
RUN uv pip install -r requirements.txt
```

### Installing a project

When installing a project alongside requirements, it is best practice to separate copying the
requirements from the rest of the source code. This allows the dependencies of the project (which do
not change often) to be cached separately from the project itself (which changes very frequently).

```dockerfile title=&quot;Dockerfile&quot;
COPY pyproject.toml .
RUN uv pip install -r pyproject.toml
COPY . .
RUN uv pip install -e .
```

## Verifying image provenance

The Docker images are signed during the build process to provide proof of their origin. These
attestations can be used to verify that an image was produced from an official channel.

For example, you can verify the attestations with the
[GitHub CLI tool `gh`](https://cli.github.com/):

```console
$ gh attestation verify --owner astral-sh oci://ghcr.io/astral-sh/uv:latest
Loaded digest sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx for oci://ghcr.io/astral-sh/uv:latest
Loaded 1 attestation from GitHub API

The following policy criteria will be enforced:
- OIDC Issuer must match:................... https://token.actions.githubusercontent.com
- Source Repository Owner URI must match:... https://github.com/astral-sh
- Predicate type must match:................ https://slsa.dev/provenance/v1
- Subject Alternative Name must match regex: (?i)^https://github.com/astral-sh/

‚úì Verification succeeded!

sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx was attested by:
REPO          PREDICATE_TYPE                  WORKFLOW
astral-sh/uv  https://slsa.dev/provenance/v1  .github/workflows/build-docker.yml@refs/heads/main
```

This tells you that the specific Docker image was built by the official uv Github release workflow
and hasn't been tampered with since.

GitHub attestations build on the [sigstore.dev infrastructure](https://www.sigstore.dev/). As such
you can also use the [`cosign` command](https://github.com/sigstore/cosign) to verify the
attestation blob against the (multi-platform) manifest for `uv`:

```console
$ REPO=astral-sh/uv
$ gh attestation download --repo $REPO oci://ghcr.io/${REPO}:latest
Wrote attestations to file sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.jsonl.
Any previous content has been overwritten

The trusted metadata is now available at sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.jsonl
$ docker buildx imagetools inspect ghcr.io/${REPO}:latest --format &quot;{{json .Manifest}}&quot; &gt; manifest.json
$ cosign verify-blob-attestation \
    --new-bundle-format \
    --bundle &quot;$(jq -r .digest manifest.json).jsonl&quot;  \
    --certificate-oidc-issuer=&quot;https://token.actions.githubusercontent.com&quot; \
    --certificate-identity-regexp=&quot;^https://github\.com/${REPO}/.*&quot; \
    &lt;(jq -j '.|del(.digest,.size)' manifest.json)
Verified OK
```

!!! tip

    These examples use `latest`, but best practice is to verify the attestation for a specific
    version tag, e.g., `ghcr.io/astral-sh/uv:0.6.14`, or (even better) the specific image digest,
    such as `ghcr.io/astral-sh/uv:0.5.27@sha256:5adf09a5a526f380237408032a9308000d14d5947eafa687ad6c6a2476787b4f`.
</file>
          <file path="docs/guides/integration/fastapi.md">---
title: Using uv with FastAPI
description:
  A guide to using uv with FastAPI to manage Python dependencies, run applications, and deploy with
  Docker.
---

# Using uv with FastAPI

[FastAPI](https://github.com/fastapi/fastapi) is a modern, high-performance Python web framework.
You can use uv to manage your FastAPI project, including installing dependencies, managing
environments, running FastAPI applications, and more.

!!! note

    You can view the source code for this guide in the [uv-fastapi-example](https://github.com/astral-sh/uv-fastapi-example) repository.

## Migrating an existing FastAPI project

As an example, consider the sample application defined in the
[FastAPI documentation](https://fastapi.tiangolo.com/tutorial/bigger-applications/), structured as
follows:

```plaintext
project
‚îî‚îÄ‚îÄ app
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îú‚îÄ‚îÄ main.py
    ‚îú‚îÄ‚îÄ dependencies.py
    ‚îú‚îÄ‚îÄ routers
    ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
    ‚îÇ   ‚îú‚îÄ‚îÄ items.py
    ‚îÇ   ‚îî‚îÄ‚îÄ users.py
    ‚îî‚îÄ‚îÄ internal
        ‚îú‚îÄ‚îÄ __init__.py
        ‚îî‚îÄ‚îÄ admin.py
```

To use uv with this application, inside the `project` directory run:

```console
$ uv init --app
```

This creates an [project with an application layout](../../concepts/projects/init.md#applications)
and a `pyproject.toml` file.

Then, add a dependency on FastAPI:

```console
$ uv add fastapi --extra standard
```

You should now have the following structure:

```plaintext
project
‚îú‚îÄ‚îÄ pyproject.toml
‚îî‚îÄ‚îÄ app
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îú‚îÄ‚îÄ main.py
    ‚îú‚îÄ‚îÄ dependencies.py
    ‚îú‚îÄ‚îÄ routers
    ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
    ‚îÇ   ‚îú‚îÄ‚îÄ items.py
    ‚îÇ   ‚îî‚îÄ‚îÄ users.py
    ‚îî‚îÄ‚îÄ internal
        ‚îú‚îÄ‚îÄ __init__.py
        ‚îî‚îÄ‚îÄ admin.py
```

And the contents of the `pyproject.toml` file should look something like this:

```toml title=&quot;pyproject.toml&quot;
[project]
name = &quot;uv-fastapi-example&quot;
version = &quot;0.1.0&quot;
description = &quot;FastAPI project&quot;
readme = &quot;README.md&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = [
    &quot;fastapi[standard]&quot;,
]
```

From there, you can run the FastAPI application with:

```console
$ uv run fastapi dev
```

`uv run` will automatically resolve and lock the project dependencies (i.e., create a `uv.lock`
alongside the `pyproject.toml`), create a virtual environment, and run the command in that
environment.

Test the app by opening http://127.0.0.1:8000/?token=jessica in a web browser.

## Deployment

To deploy the FastAPI application with Docker, you can use the following `Dockerfile`:

```dockerfile title=&quot;Dockerfile&quot;
FROM python:3.12-slim

# Install uv.
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Copy the application into the container.
COPY . /app

# Install the application dependencies.
WORKDIR /app
RUN uv sync --frozen --no-cache

# Run the application.
CMD [&quot;/app/.venv/bin/fastapi&quot;, &quot;run&quot;, &quot;app/main.py&quot;, &quot;--port&quot;, &quot;80&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;]
```

Build the Docker image with:

```console
$ docker build -t fastapi-app .
```

Run the Docker container locally with:

```console
$ docker run -p 8000:80 fastapi-app
```

Navigate to http://127.0.0.1:8000/?token=jessica in your browser to verify that the app is running
correctly.

!!! tip

    For more on using uv with Docker, see the [Docker guide](./docker.md).
</file>
          <file path="docs/guides/integration/github.md">---
title: Using uv in GitHub Actions
description:
  A guide to using uv in GitHub Actions, including installation, setting up Python, installing
  dependencies, and more.
---

# Using uv in GitHub Actions

## Installation

For use with GitHub Actions, we recommend the official
[`astral-sh/setup-uv`](https://github.com/astral-sh/setup-uv) action, which installs uv, adds it to
PATH, (optionally) persists the cache, and more, with support for all uv-supported platforms.

To install the latest version of uv:

```yaml title=&quot;example.yml&quot; hl_lines=&quot;11-12&quot;
name: Example

jobs:
  uv-example:
    name: python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
```

It is considered best practice to pin to a specific uv version, e.g., with:

```yaml title=&quot;example.yml&quot; hl_lines=&quot;14 15&quot;
name: Example

jobs:
  uv-example:
    name: python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          # Install a specific version of uv.
          version: &quot;0.6.14&quot;
```

## Setting up Python

Python can be installed with the `python install` command:

```yaml title=&quot;example.yml&quot; hl_lines=&quot;14 15&quot;
name: Example

jobs:
  uv-example:
    name: python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: uv python install
```

This will respect the Python version pinned in the project.

Alternatively, the official GitHub `setup-python` action can be used. This can be faster, because
GitHub caches the Python versions alongside the runner.

Set the
[`python-version-file`](https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#using-the-python-version-file-input)
option to use the pinned version for the project:

```yaml title=&quot;example.yml&quot; hl_lines=&quot;14 15 16 17&quot;
name: Example

jobs:
  uv-example:
    name: python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: &quot;Set up Python&quot;
        uses: actions/setup-python@v5
        with:
          python-version-file: &quot;.python-version&quot;
```

Or, specify the `pyproject.toml` file to ignore the pin and use the latest version compatible with
the project's `requires-python` constraint:

```yaml title=&quot;example.yml&quot; hl_lines=&quot;17&quot;
name: Example

jobs:
  uv-example:
    name: python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: &quot;Set up Python&quot;
        uses: actions/setup-python@v5
        with:
          python-version-file: &quot;pyproject.toml&quot;
```

## Multiple Python versions

When using a matrix to test multiple Python versions, set the Python version using
`astral-sh/setup-uv`, which will override the Python version specification in the `pyproject.toml`
or `.python-version` files:

```yaml title=&quot;example.yml&quot; hl_lines=&quot;17 18&quot;
jobs:
  build:
    name: continuous-integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - &quot;3.10&quot;
          - &quot;3.11&quot;
          - &quot;3.12&quot;

    steps:
      - uses: actions/checkout@v4

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
```

If not using the `setup-uv` action, you can set the `UV_PYTHON` environment variable:

```yaml title=&quot;example.yml&quot; hl_lines=&quot;12&quot;
jobs:
  build:
    name: continuous-integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - &quot;3.10&quot;
          - &quot;3.11&quot;
          - &quot;3.12&quot;
    env:
      UV_PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
```

## Syncing and running

Once uv and Python are installed, the project can be installed with `uv sync` and commands can be
run in the environment with `uv run`:

```yaml title=&quot;example.yml&quot; hl_lines=&quot;17-22&quot;
name: Example

jobs:
  uv-example:
    name: python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run tests
        # For example, using `pytest`
        run: uv run pytest tests
```

!!! tip

    The
    [`UV_PROJECT_ENVIRONMENT` setting](../../concepts/projects/config.md#project-environment-path) can
    be used to install to the system Python environment instead of creating a virtual environment.

## Caching

It may improve CI times to store uv's cache across workflow runs.

The [`astral-sh/setup-uv`](https://github.com/astral-sh/setup-uv) has built-in support for
persisting the cache:

```yaml title=&quot;example.yml&quot;
- name: Enable caching
  uses: astral-sh/setup-uv@v5
  with:
    enable-cache: true
```

You can configure the action to use a custom cache directory on the runner:

```yaml title=&quot;example.yml&quot;
- name: Define a custom uv cache path
  uses: astral-sh/setup-uv@v5
  with:
    enable-cache: true
    cache-local-path: &quot;/path/to/cache&quot;
```

Or invalidate it when the lockfile changes:

```yaml title=&quot;example.yml&quot;
- name: Define a cache dependency glob
  uses: astral-sh/setup-uv@v5
  with:
    enable-cache: true
    cache-dependency-glob: &quot;uv.lock&quot;
```

Or when any requirements file changes:

```yaml title=&quot;example.yml&quot;
- name: Define a cache dependency glob
  uses: astral-sh/setup-uv@v5
  with:
    enable-cache: true
    cache-dependency-glob: &quot;requirements**.txt&quot;
```

Note that `astral-sh/setup-uv` will automatically use a separate cache key for each host
architecture and platform.

Alternatively, you can manage the cache manually with the `actions/cache` action:

```yaml title=&quot;example.yml&quot;
jobs:
  install_job:
    env:
      # Configure a constant location for the uv cache
      UV_CACHE_DIR: /tmp/.uv-cache

    steps:
      # ... setup up Python and uv ...

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      # ... install packages, run tests, etc ...

      - name: Minimize uv cache
        run: uv cache prune --ci
```

The `uv cache prune --ci` command is used to reduce the size of the cache and is optimized for CI.
Its effect on performance is dependent on the packages being installed.

!!! tip

    If using `uv pip`, use `requirements.txt` instead of `uv.lock` in the cache key.

!!! note

    [post-job-hook]: https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/running-scripts-before-or-after-a-job

    When using non-ephemeral, self-hosted runners the default cache directory can grow unbounded.
    In this case, it may not be optimal to share the cache between jobs. Instead, move the cache
    inside the GitHub Workspace and remove it once the job finishes using a
    [Post Job Hook][post-job-hook].

    ```yaml
    install_job:
      env:
        # Configure a relative location for the uv cache
        UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
    ```

    Using a post job hook requires setting the `ACTIONS_RUNNER_HOOK_JOB_STARTED` environment
    variable on the self-hosted runner to the path of a cleanup script such as the one shown below.

    ```sh title=&quot;clean-uv-cache.sh&quot;
    #!/usr/bin/env sh
    uv cache clean
    ```

## Using `uv pip`

If using the `uv pip` interface instead of the uv project interface, uv requires a virtual
environment by default. To allow installing packages into the system environment, use the `--system`
flag on all `uv` invocations or set the `UV_SYSTEM_PYTHON` variable.

The `UV_SYSTEM_PYTHON` variable can be defined in at different scopes.

Opt-in for the entire workflow by defining it at the top level:

```yaml title=&quot;example.yml&quot;
env:
  UV_SYSTEM_PYTHON: 1

jobs: ...
```

Or, opt-in for a specific job in the workflow:

```yaml title=&quot;example.yml&quot;
jobs:
  install_job:
    env:
      UV_SYSTEM_PYTHON: 1
    ...
```

Or, opt-in for a specific step in a job:

```yaml title=&quot;example.yml&quot;
steps:
  - name: Install requirements
    run: uv pip install -r requirements.txt
    env:
      UV_SYSTEM_PYTHON: 1
```

To opt-out again, the `--no-system` flag can be used in any uv invocation.
</file>
          <file path="docs/guides/integration/gitlab.md">---
title: Using uv in GitLab CI/CD
description: A guide to using uv in GitLab CI/CD, including installation, setting up Python,
  installing dependencies, and more.
---

# Using uv in GitLab CI/CD

## Using the uv image

Astral provides [Docker images](docker.md#available-images) with uv preinstalled.
Select a variant that is suitable for your workflow.

```yaml title=&quot;gitlab-ci.yml&quot;
variables:
  UV_VERSION: 0.5
  PYTHON_VERSION: 3.12
  BASE_LAYER: bookworm-slim
  # GitLab CI creates a separate mountpoint for the build directory,
  # so we need to copy instead of using hard links.
  UV_LINK_MODE: copy

uv:
  image: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  script:
    # your `uv` commands
```

!!! note

    If you are using a distroless image, you have to specify the entrypoint:
    ```yaml
    uv:
      image:
        name: ghcr.io/astral-sh/uv:$UV_VERSION
        entrypoint: [&quot;&quot;]
      # ...
    ```

## Caching

Persisting the uv cache between workflow runs can improve performance.

```yaml
uv-install:
  variables:
    UV_CACHE_DIR: .uv-cache
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
  script:
    # Your `uv` commands
    - uv cache prune --ci
```

See the [GitLab caching documentation](https://docs.gitlab.com/ee/ci/caching/) for more details on
configuring caching.

Using `uv cache prune --ci` at the end of the job is recommended to reduce cache size. See the [uv
cache documentation](../../concepts/cache.md#caching-in-continuous-integration) for more details.

## Using `uv pip`

If using the `uv pip` interface instead of the uv project interface, uv requires a virtual
environment by default. To allow installing packages into the system environment, use the `--system`
flag on all uv invocations or set the `UV_SYSTEM_PYTHON` variable.

The `UV_SYSTEM_PYTHON` variable can be defined in at different scopes. You can read more about
how [variables and their precedence works in GitLab here](https://docs.gitlab.com/ee/ci/variables/)

Opt-in for the entire workflow by defining it at the top level:

```yaml title=&quot;gitlab-ci.yml&quot;
variables:
  UV_SYSTEM_PYTHON: 1

# [...]
```

To opt-out again, the `--no-system` flag can be used in any uv invocation.

When persisting the cache, you may want to use `requirements.txt` or `pyproject.toml` as
your cache key files instead of `uv.lock`.
</file>
          <file path="docs/guides/integration/jupyter.md">---
title: Using uv with Jupyter
description:
  A complete guide to using uv with Jupyter notebooks for interactive computing, data analysis, and
  visualization, including kernel management and virtual environment integration.
---

# Using uv with Jupyter

The [Jupyter](https://jupyter.org/) notebook is a popular tool for interactive computing, data
analysis, and visualization. You can use Jupyter with uv in a few different ways, either to interact
with a project, or as a standalone tool.

## Using Jupyter within a project

If you're working within a [project](../../concepts/projects/index.md), you can start a Jupyter
server with access to the project's virtual environment via the following:

```console
$ uv run --with jupyter jupyter lab
```

By default, `jupyter lab` will start the server at
[http://localhost:8888/lab](http://localhost:8888/lab).

Within a notebook, you can import your project's modules as you would in any other file in the
project. For example, if your project depends on `requests`, `import requests` will import
`requests` from the project's virtual environment.

If you're looking for read-only access to the project's virtual environment, then there's nothing
more to it. However, if you need to install additional packages from within the notebook, there are
a few extra details to consider.

### Creating a kernel

If you need to install packages from within the notebook, we recommend creating a dedicated kernel
for your project. Kernels enable the Jupyter server to run in one environment, with individual
notebooks running in their own, separate environments.

In the context of uv, we can create a kernel for a project while installing Jupyter itself in an
isolated environment, as in `uv run --with jupyter jupyter lab`. Creating a kernel for the project
ensures that the notebook is hooked up to the correct environment, and that any packages installed
from within the notebook are installed into the project's virtual environment.

To create a kernel, you'll need to install `ipykernel` as a development dependency:

```console
$ uv add --dev ipykernel
```

Then, you can create the kernel for `project` with:

```console
$ uv run ipython kernel install --user --env VIRTUAL_ENV $(pwd)/.venv --name=project
```

From there, start the server with:

```console
$ uv run --with jupyter jupyter lab
```

When creating a notebook, select the `project` kernel from the dropdown. Then use `!uv add pydantic`
to add `pydantic` to the project's dependencies, or `!uv pip install pydantic` to install `pydantic`
into the project's virtual environment without persisting the change to the project `pyproject.toml`
or `uv.lock` files. Either command will make `import pydantic` work within the notebook.

### Installing packages without a kernel

If you don't want to create a kernel, you can still install packages from within the notebook.
However, there are a few caveats to consider.

Though `uv run --with jupyter` runs in an isolated environment, within the notebook itself,
`!uv add` and related commands will modify the _project's_ environment, even without a kernel.

For example, running `!uv add pydantic` from within a notebook will add `pydantic` to the project's
dependencies and virtual environment, such that `import pydantic` will work immediately, without
further configuration or a server restart.

However, since the Jupyter server is the &quot;active&quot; environment, `!uv pip install` will install
package's into _Jupyter's_ environment, not the project environment. Such dependencies will persist
for the lifetime of the Jupyter server, but may disappear on subsequent `jupyter` invocations.

If you're working with a notebook that relies on pip (e.g., via the `%pip` magic), you can include
pip in your project's virtual environment by running `uv venv --seed` prior to starting the Jupyter
server. For example, given:

```console
$ uv venv --seed
$ uv run --with jupyter jupyter lab
```

Subsequent `%pip install` invocations within the notebook will install packages into the project's
virtual environment. However, such modifications will _not_ be reflected in the project's
`pyproject.toml` or `uv.lock` files.

## Using Jupyter as a standalone tool

If you ever need ad hoc access to a notebook (i.e., to run a Python snippet interactively), you can
start a Jupyter server at any time with `uv tool run jupyter lab`. This will run a Jupyter server in
an isolated environment.

## Using Jupyter with a non-project environment

If you need to run Jupyter in a virtual environment that isn't associated with a
[project](../../concepts/projects/index.md) (e.g., has no `pyproject.toml` or `uv.lock`), you can do
so by adding Jupyter to the environment directly. For example:

=== &quot;macOS and Linux&quot;

    ```console
    $ uv venv --seed
    $ uv pip install pydantic
    $ uv pip install jupyterlab
    $ .venv/bin/jupyter lab
    ```

=== &quot;Windows&quot;

    ```powershell
    uv venv --seed
    uv pip install pydantic
    uv pip install jupyterlab
    .venv\Scripts\jupyter lab
    ```

From here, `import pydantic` will work within the notebook, and you can install additional packages
via `!uv pip install`, or even `!pip install`.

## Using Jupyter from VS Code

You can also engage with Jupyter notebooks from within an editor like VS Code. To connect a
uv-managed project to a Jupyter notebook within VS Code, we recommend creating a kernel for the
project, as in the following:

```console
# Create a project.
$ uv init project

# Move into the project directory.
$ cd project

# Add ipykernel as a dev dependency.
$ uv add --dev ipykernel

# Open the project in VS Code.
$ code .
```

Once the project directory is open in VS Code, you can create a new Jupyter notebook by selecting
&quot;Create: New Jupyter Notebook&quot; from the command palette. When prompted to select a kernel, choose
&quot;Python Environments&quot; and select the virtual environment you created earlier (e.g.,
`.venv/bin/python` on macOS and Linux, or `.venv\Scripts\python` on Windows).

!!! note

    VS Code requires `ipykernel` to be present in the project environment. If you'd prefer to avoid
    adding `ipykernel` as a dev dependency, you can install it directly into the project environment
    with `uv pip install ipykernel`.

If you need to manipulate the project's environment from within the notebook, you may need to add
`uv` as an explicit development dependency:

```console
$ uv add --dev uv
```

From there, you can use `!uv add pydantic` to add `pydantic` to the project's dependencies, or
`!uv pip install pydantic` to install `pydantic` into the project's virtual environment without
updating the project's `pyproject.toml` or `uv.lock` files.
</file>
          <file path="docs/guides/integration/pre-commit.md">---
title: Using uv with pre-commit
description:
  A guide to using uv with pre-commit to automatically update lock files, export requirements, and
  compile requirements files.
---

# Using uv in pre-commit

An official pre-commit hook is provided at
[`astral-sh/uv-pre-commit`](https://github.com/astral-sh/uv-pre-commit).

To make sure your `uv.lock` file is up to date even if your `pyproject.toml` file was changed via
pre-commit, add the following to the `.pre-commit-config.yaml`:

```yaml title=&quot;.pre-commit-config.yaml&quot;
repos:
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.6.14
    hooks:
      - id: uv-lock
```

To keep your `requirements.txt` file updated using pre-commit:

```yaml title=&quot;.pre-commit-config.yaml&quot;
repos:
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.6.14
    hooks:
      - id: uv-export
```

To compile requirements via pre-commit, add the following to the `.pre-commit-config.yaml`:

```yaml title=&quot;.pre-commit-config.yaml&quot;
repos:
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.6.14
    hooks:
      # Compile requirements
      - id: pip-compile
        args: [requirements.in, -o, requirements.txt]
```

To compile alternative files, modify `args` and `files`:

```yaml title=&quot;.pre-commit-config.yaml&quot;
repos:
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.6.14
    hooks:
      # Compile requirements
      - id: pip-compile
        args: [requirements-dev.in, -o, requirements-dev.txt]
        files: ^requirements-dev\.(in|txt)$
```

To run the hook over multiple files at the same time:

```yaml title=&quot;.pre-commit-config.yaml&quot;
repos:
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.6.14
    hooks:
      # Compile requirements
      - id: pip-compile
        name: pip-compile requirements.in
        args: [requirements.in, -o, requirements.txt]
      - id: pip-compile
        name: pip-compile requirements-dev.in
        args: [requirements-dev.in, -o, requirements-dev.txt]
        files: ^requirements-dev\.(in|txt)$
```
</file>
          <file path="docs/guides/integration/pytorch.md">---
title: Using uv with PyTorch
description:
  A guide to using uv with PyTorch, including installing PyTorch, configuring per-platform and
  per-accelerator builds, and more.
---

# Using uv with PyTorch

The [PyTorch](https://pytorch.org/) ecosystem is a popular choice for deep learning research and
development. You can use uv to manage PyTorch projects and PyTorch dependencies across different
Python versions and environments, even controlling for the choice of accelerator (e.g., CPU-only vs.
CUDA).

!!! note

    Some of the features outlined in this guide require uv version 0.5.3 or later. We recommend upgrading prior to configuring PyTorch.

## Installing PyTorch

From a packaging perspective, PyTorch has a few uncommon characteristics:

- Many PyTorch wheels are hosted on a dedicated index, rather than the Python Package Index (PyPI).
  As such, installing PyTorch often requires configuring a project to use the PyTorch index.
- PyTorch produces distinct builds for each accelerator (e.g., CPU-only, CUDA). Since there's no
  standardized mechanism for specifying these accelerators when publishing or installing, PyTorch
  encodes them in the local version specifier. As such, PyTorch versions will often look like
  `2.5.1+cpu`, `2.5.1+cu121`, etc.
- Builds for different accelerators are published to different indexes. For example, the `+cpu`
  builds are published on https://download.pytorch.org/whl/cpu, while the `+cu121` builds are
  published on https://download.pytorch.org/whl/cu121.

As such, the necessary packaging configuration will vary depending on both the platforms you need to
support and the accelerators you want to enable.

To start, consider the following (default) configuration, which would be generated by running
`uv init --python 3.12` followed by `uv add torch torchvision`.

In this case, PyTorch would be installed from PyPI, which hosts CPU-only wheels for Windows and
macOS, and GPU-accelerated wheels on Linux (targeting CUDA 12.4):

```toml
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = [
  &quot;torch&gt;=2.6.0&quot;,
  &quot;torchvision&gt;=0.21.0&quot;,
]
```

!!! tip &quot;Supported Python versions&quot;

    At time of writing, PyTorch does not yet publish wheels for Python 3.14; as such projects with
    `requires-python = &quot;&gt;=3.14&quot;` may fail to resolve. See the
    [compatibility matrix](https://github.com/pytorch/pytorch/blob/main/RELEASE.md#release-compatibility-matrix).

This is a valid configuration for projects that want to use CPU builds on Windows and macOS, and
CUDA-enabled builds on Linux. However, if you need to support different platforms or accelerators,
you'll need to configure the project accordingly.

## Using a PyTorch index

In some cases, you may want to use a specific PyTorch variant across all platforms. For example, you
may want to use the CPU-only builds on Linux too.

In such cases, the first step is to add the relevant PyTorch index to your `pyproject.toml`:

=== &quot;CPU-only&quot;

    ```toml
    [[tool.uv.index]]
    name = &quot;pytorch-cpu&quot;
    url = &quot;https://download.pytorch.org/whl/cpu&quot;
    explicit = true
    ```

=== &quot;CUDA 11.8&quot;

    ```toml
    [[tool.uv.index]]
    name = &quot;pytorch-cu118&quot;
    url = &quot;https://download.pytorch.org/whl/cu118&quot;
    explicit = true
    ```

=== &quot;CUDA 12.1&quot;

    ```toml
    [[tool.uv.index]]
    name = &quot;pytorch-cu121&quot;
    url = &quot;https://download.pytorch.org/whl/cu121&quot;
    explicit = true
    ```

=== &quot;CUDA 12.4&quot;

    ```toml
    [[tool.uv.index]]
    name = &quot;pytorch-cu124&quot;
    url = &quot;https://download.pytorch.org/whl/cu124&quot;
    explicit = true
    ```

=== &quot;ROCm6&quot;

    ```toml
    [[tool.uv.index]]
    name = &quot;pytorch-rocm&quot;
    url = &quot;https://download.pytorch.org/whl/rocm6.2&quot;
    explicit = true
    ```

=== &quot;Intel GPUs&quot;

    ```toml
    [[tool.uv.index]]
    name = &quot;pytorch-xpu&quot;
    url = &quot;https://download.pytorch.org/whl/xpu&quot;
    explicit = true
    ```

We recommend the use of `explicit = true` to ensure that the index is _only_ used for `torch`,
`torchvision`, and other PyTorch-related packages, as opposed to generic dependencies like `jinja2`,
which should continue to be sourced from the default index (PyPI).

Next, update the `pyproject.toml` to point `torch` and `torchvision` to the desired index:

=== &quot;CPU-only&quot;

    ```toml
    [tool.uv.sources]
    torch = [
      { index = &quot;pytorch-cpu&quot; },
    ]
    torchvision = [
      { index = &quot;pytorch-cpu&quot; },
    ]
    ```

=== &quot;CUDA 11.8&quot;

    PyTorch doesn't publish CUDA builds for macOS. As such, we gate on `sys_platform` to instruct uv to use
    the PyTorch index on Linux and Windows, but fall back to PyPI on macOS:

    ```toml
    [tool.uv.sources]
    torch = [
      { index = &quot;pytorch-cu118&quot;, marker = &quot;sys_platform == 'linux' or sys_platform == 'win32'&quot; },
    ]
    torchvision = [
      { index = &quot;pytorch-cu118&quot;, marker = &quot;sys_platform == 'linux' or sys_platform == 'win32'&quot; },
    ]
    ```

=== &quot;CUDA 12.1&quot;

    PyTorch doesn't publish CUDA builds for macOS. As such, we gate on `sys_platform` to instruct uv to limit
    the PyTorch index to Linux and Windows, falling back to PyPI on macOS:

    ```toml
    [tool.uv.sources]
    torch = [
      { index = &quot;pytorch-cu121&quot;, marker = &quot;sys_platform == 'linux' or sys_platform == 'win32'&quot; },
    ]
    torchvision = [
      { index = &quot;pytorch-cu121&quot;, marker = &quot;sys_platform == 'linux' or sys_platform == 'win32'&quot; },
    ]
    ```

=== &quot;CUDA 12.4&quot;

    PyTorch doesn't publish CUDA builds for macOS. As such, we gate on `sys_platform` to instruct uv to limit
    the PyTorch index to Linux and Windows, falling back to PyPI on macOS:

    ```toml
    [tool.uv.sources]
    torch = [
      { index = &quot;pytorch-cu124&quot;, marker = &quot;sys_platform == 'linux' or sys_platform == 'win32'&quot; },
    ]
    torchvision = [
      { index = &quot;pytorch-cu124&quot;, marker = &quot;sys_platform == 'linux' or sys_platform == 'win32'&quot; },
    ]
    ```

=== &quot;ROCm6&quot;

    PyTorch doesn't publish ROCm6 builds for macOS or Windows. As such, we gate on `sys_platform` to instruct uv
    to limit the PyTorch index to Linux, falling back to PyPI on macOS and Windows:

    ```toml
    [tool.uv.sources]
    torch = [
      { index = &quot;pytorch-rocm&quot;, marker = &quot;sys_platform == 'linux'&quot; },
    ]
    torchvision = [
      { index = &quot;pytorch-rocm&quot;, marker = &quot;sys_platform == 'linux'&quot; },
    ]
    ```

=== &quot;Intel GPUs&quot;

    PyTorch doesn't publish Intel GPU builds for macOS. As such, we gate on `sys_platform` to instruct uv to limit
    the PyTorch index to Linux and Windows, falling back to PyPI on macOS:

    ```toml
    [tool.uv.sources]
    torch = [
      { index = &quot;pytorch-xpu&quot;, marker = &quot;sys_platform == 'linux' or sys_platform == 'win32'&quot; },
    ]
    torchvision = [
      { index = &quot;pytorch-xpu&quot;, marker = &quot;sys_platform == 'linux' or sys_platform == 'win32'&quot; },
    ]
    # Intel GPU support relies on `pytorch-triton-xpu` on Linux, which should also be installed from the PyTorch index
    # (and included in `project.dependencies`).
    pytorch-triton-xpu = [
      { index = &quot;pytorch-xpu&quot;, marker = &quot;sys_platform == 'linux'&quot; },
    ]
    ```

As a complete example, the following project would use PyTorch's CPU-only builds on all platforms:

```toml
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12.0&quot;
dependencies = [
  &quot;torch&gt;=2.6.0&quot;,
  &quot;torchvision&gt;=0.21.0&quot;,
]

[tool.uv.sources]
torch = [
    { index = &quot;pytorch-cpu&quot; },
]
torchvision = [
    { index = &quot;pytorch-cpu&quot; },
]

[[tool.uv.index]]
name = &quot;pytorch-cpu&quot;
url = &quot;https://download.pytorch.org/whl/cpu&quot;
explicit = true
```

## Configuring accelerators with environment markers

In some cases, you may want to use CPU-only builds in one environment (e.g., macOS and Windows), and
CUDA-enabled builds in another (e.g., Linux).

With `tool.uv.sources`, you can use environment markers to specify the desired index for each
platform. For example, the following configuration would use PyTorch's CUDA-enabled builds on Linux,
and CPU-only builds on all other platforms (e.g., macOS and Windows):

```toml
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12.0&quot;
dependencies = [
  &quot;torch&gt;=2.6.0&quot;,
  &quot;torchvision&gt;=0.21.0&quot;,
]

[tool.uv.sources]
torch = [
  { index = &quot;pytorch-cpu&quot;, marker = &quot;sys_platform != 'linux'&quot; },
  { index = &quot;pytorch-cu124&quot;, marker = &quot;sys_platform == 'linux'&quot; },
]
torchvision = [
  { index = &quot;pytorch-cpu&quot;, marker = &quot;sys_platform != 'linux'&quot; },
  { index = &quot;pytorch-cu124&quot;, marker = &quot;sys_platform == 'linux'&quot; },
]

[[tool.uv.index]]
name = &quot;pytorch-cpu&quot;
url = &quot;https://download.pytorch.org/whl/cpu&quot;
explicit = true

[[tool.uv.index]]
name = &quot;pytorch-cu124&quot;
url = &quot;https://download.pytorch.org/whl/cu124&quot;
explicit = true
```

Similarly, the following configuration would use PyTorch's Intel GPU builds on Windows and Linux,
and CPU-only builds on macOS (by way of falling back to PyPI):

```toml
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12.0&quot;
dependencies = [
  &quot;torch&gt;=2.6.0&quot;,
  &quot;torchvision&gt;=0.21.0&quot;,
  &quot;pytorch-triton-xpu&gt;=3.2.0 ; sys_platform == 'linux'&quot;,
]

[tool.uv.sources]
torch = [
  { index = &quot;pytorch-xpu&quot;, marker = &quot;sys_platform == 'win32' or sys_platform == 'linux'&quot; },
]
torchvision = [
  { index = &quot;pytorch-xpu&quot;, marker = &quot;sys_platform == 'win32' or sys_platform == 'linux'&quot; },
]
pytorch-triton-xpu = [
  { index = &quot;pytorch-xpu&quot;, marker = &quot;sys_platform == 'linux'&quot; },
]

[[tool.uv.index]]
name = &quot;pytorch-xpu&quot;
url = &quot;https://download.pytorch.org/whl/xpu&quot;
explicit = true
```

## Configuring accelerators with optional dependencies

In some cases, you may want to use CPU-only builds in some cases, but CUDA-enabled builds in others,
with the choice toggled by a user-provided extra (e.g., `uv sync --extra cpu` vs.
`uv sync --extra cu124`).

With `tool.uv.sources`, you can use extra markers to specify the desired index for each enabled
extra. For example, the following configuration would use PyTorch's CPU-only for
`uv sync --extra cpu` and CUDA-enabled builds for `uv sync --extra cu124`:

```toml
[project]
name = &quot;project&quot;
version = &quot;0.1.0&quot;
requires-python = &quot;&gt;=3.12.0&quot;
dependencies = []

[project.optional-dependencies]
cpu = [
  &quot;torch&gt;=2.6.0&quot;,
  &quot;torchvision&gt;=0.21.0&quot;,
]
cu124 = [
  &quot;torch&gt;=2.6.0&quot;,
  &quot;torchvision&gt;=0.21.0&quot;,
]

[tool.uv]
conflicts = [
  [
    { extra = &quot;cpu&quot; },
    { extra = &quot;cu124&quot; },
  ],
]

[tool.uv.sources]
torch = [
  { index = &quot;pytorch-cpu&quot;, extra = &quot;cpu&quot; },
  { index = &quot;pytorch-cu124&quot;, extra = &quot;cu124&quot; },
]
torchvision = [
  { index = &quot;pytorch-cpu&quot;, extra = &quot;cpu&quot; },
  { index = &quot;pytorch-cu124&quot;, extra = &quot;cu124&quot; },
]

[[tool.uv.index]]
name = &quot;pytorch-cpu&quot;
url = &quot;https://download.pytorch.org/whl/cpu&quot;
explicit = true

[[tool.uv.index]]
name = &quot;pytorch-cu124&quot;
url = &quot;https://download.pytorch.org/whl/cu124&quot;
explicit = true
```

!!! note

    Since GPU-accelerated builds aren't available on macOS, the above configuration will fail to install
    on macOS when the `cu124` extra is enabled.

## The `uv pip` interface

While the above examples are focused on uv's project interface (`uv lock`, `uv sync`, `uv run`,
etc.), PyTorch can also be installed via the `uv pip` interface.

PyTorch itself offers a [dedicated interface](https://pytorch.org/get-started/locally/) to determine
the appropriate pip command to run for a given target configuration. For example, you can install
stable, CPU-only PyTorch on Linux with:

```shell
$ pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
```

To use the same workflow with uv, replace `pip3` with `uv pip`:

```shell
$ uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
```

## Automatic backend selection

In [preview](../../reference/settings.md#preview), uv can automatically select the appropriate
PyTorch index at runtime by inspecting the system configuration via `--torch-backend=auto` (or
`UV_TORCH_BACKEND=auto`):

```shell
$ UV_TORCH_BACKEND=auto uv pip install torch
```

When enabled, uv will query for the installed CUDA driver version and use the most-compatible
PyTorch index for all relevant packages (e.g., `torch`, `torchvision`, etc.). If no such CUDA driver
is found, uv will fall back to the CPU-only index. uv will continue to respect existing index
configuration for any packages outside the PyTorch ecosystem.

To select a specific backend (e.g., `cu126`), set `--torch-backend=cu126` (or
`UV_TORCH_BACKEND=cu126`).

At present, `--torch-backend` is only available in the `uv pip` interface, and only supports
detection of CUDA drivers (as opposed to other accelerators like ROCm or Intel GPUs).

As `--torch-backend` is a preview feature, it should be considered experimental and is not governed
by uv's standard [versioning policy](../../reference/policies/versioning.md). `--torch-backend` may
change or be removed entirely in future versions of uv.
</file>
        </dir>
      </dir>
      <dir path="docs/pip">
        <file path="docs/pip/compatibility.md"># Compatibility with `pip` and `pip-tools`

uv is designed as a drop-in replacement for common `pip` and `pip-tools` workflows.

Informally, the intent is such that existing `pip` and `pip-tools` users can switch to uv without
making meaningful changes to their packaging workflows; and, in most cases, swapping out
`pip install` for `uv pip install` should &quot;just work&quot;.

However, uv is _not_ intended to be an _exact_ clone of `pip`, and the further you stray from common
`pip` workflows, the more likely you are to encounter differences in behavior. In some cases, those
differences may be known and intentional; in others, they may be the result of implementation
details; and in others, they may be bugs.

This document outlines the known differences between uv and `pip`, along with rationale,
workarounds, and a statement of intent for compatibility in the future.

## Configuration files and environment variables

uv does not read configuration files or environment variables that are specific to `pip`, like
`pip.conf` or `PIP_INDEX_URL`.

Reading configuration files and environment variables intended for other tools has a number of
drawbacks:

1. It requires bug-for-bug compatibility with the target tool, since users end up relying on bugs in
   the format, the parser, etc.
2. If the target tool _changes_ the format in some way, uv is then locked-in to changing it in
   equivalent ways.
3. If that configuration is versioned in some way, uv would need to know _which version_ of the
   target tool the user is expecting to use.
4. It prevents uv from introducing any settings or configuration that don't exist in the target
   tool, since otherwise `pip.conf` (or similar) would no longer be usable with `pip`.
5. It can lead to user confusion, since uv would be reading settings that don't actually affect its
   behavior, and many users may _not_ expect uv to read configuration files intended for other
   tools.

Instead, uv supports its own environment variables, like `UV_INDEX_URL`. uv also supports persistent
configuration in a `uv.toml` file or a `[tool.uv.pip]` section of `pyproject.toml`. For more
information, see [Configuration files](../configuration/files.md).

## Pre-release compatibility

By default, uv will accept pre-release versions during dependency resolution in two cases:

1. If the package is a direct dependency, and its version markers include a pre-release specifier
   (e.g., `flask&gt;=2.0.0rc1`).
1. If _all_ published versions of a package are pre-releases.

If dependency resolution fails due to a transitive pre-release, uv will prompt the user to re-run
with `--prerelease allow`, to allow pre-releases for all dependencies.

Alternatively, you can add the transitive dependency to your `requirements.in` file with pre-release
specifier (e.g., `flask&gt;=2.0.0rc1`) to opt in to pre-release support for that specific dependency.

In sum, uv needs to know upfront whether the resolver should accept pre-releases for a given
package. `pip`, meanwhile, _may_ respect pre-release identifiers in transitive dependencies
depending on the order in which the resolver encounters the relevant specifiers
([#1641](https://github.com/astral-sh/uv/issues/1641#issuecomment-1981402429)).

Pre-releases are
[notoriously difficult](https://pubgrub-rs-guide.netlify.app/limitations/prerelease_versions) to
model, and are a frequent source of bugs in packaging tools. Even `pip`, which is viewed as a
reference implementation, has a number of open questions around pre-release handling
([#12469](https://github.com/pypa/pip/issues/12469),
[#12470](https://github.com/pypa/pip/issues/12470),
[#40505](https://discuss.python.org/t/handling-of-pre-releases-when-backtracking/40505/20), etc.).
uv's pre-release handling is _intentionally_ limited and _intentionally_ requires user opt-in for
pre-releases, to ensure correctness.

In the future, uv _may_ support pre-release identifiers in transitive dependencies. However, it's
likely contingent on evolution in the Python packaging specifications. The existing PEPs
[do not cover &quot;dependency resolution&quot;](https://discuss.python.org/t/handling-of-pre-releases-when-backtracking/40505/17)
and are instead focused on behavior for a _single_ version specifier. As such, there are unresolved
questions around the correct and intended behavior for pre-releases in the packaging ecosystem more
broadly.

## Packages that exist on multiple indexes

In both uv and `pip`, users can specify multiple package indexes from which to search for the
available versions of a given package. However, uv and `pip` differ in how they handle packages that
exist on multiple indexes.

For example, imagine that a company publishes an internal version of `requests` on a private index
(`--extra-index-url`), but also allows installing packages from PyPI by default. In this case, the
private `requests` would conflict with the public [`requests`](https://pypi.org/project/requests/)
on PyPI.

When uv searches for a package across multiple indexes, it will iterate over the indexes in order
(preferring the `--extra-index-url` over the default index), and stop searching as soon as it finds
a match. This means that if a package exists on multiple indexes, uv will limit its candidate
versions to those present in the first index that contains the package.

`pip`, meanwhile, will combine the candidate versions from all indexes, and select the best version
from the combined set, though it makes
[no guarantees around the order](https://github.com/pypa/pip/issues/5045#issuecomment-369521345) in
which it searches indexes, and expects that packages are unique up to name and version, even across
indexes.

uv's behavior is such that if a package exists on an internal index, it should always be installed
from the internal index, and never from PyPI. The intent is to prevent &quot;dependency confusion&quot;
attacks, in which an attacker publishes a malicious package on PyPI with the same name as an
internal package, thus causing the malicious package to be installed instead of the internal
package. See, for example,
[the `torchtriton` attack](https://pytorch.org/blog/compromised-nightly-dependency/) from
December 2022.

As of v0.1.39, users can opt in to `pip`-style behavior for multiple indexes via the
`--index-strategy` command-line option, or the `UV_INDEX_STRATEGY` environment variable, which
supports the following values:

- `first-index` (default): Search for each package across all indexes, limiting the candidate
  versions to those present in the first index that contains the package, prioritizing the
  `--extra-index-url` indexes over the default index URL.
- `unsafe-first-match`: Search for each package across all indexes, but prefer the first index with
  a compatible version, even if newer versions are available on other indexes.
- `unsafe-best-match`: Search for each package across all indexes, and select the best version from
  the combined set of candidate versions.

While `unsafe-best-match` is the closest to `pip`'s behavior, it exposes users to the risk of
&quot;dependency confusion&quot; attacks.

uv also supports pinning packages to dedicated indexes (see:
[_Indexes_](../configuration/indexes.md#pinning-a-package-to-an-index)), such that a given package
is _always_ installed from a specific index.

## PEP 517 build isolation

uv uses [PEP 517](https://peps.python.org/pep-0517/) build isolation by default (akin to
`pip install --use-pep517`), following `pypa/build` and in anticipation of `pip` defaulting to PEP
517 builds in the future ([pypa/pip#9175](https://github.com/pypa/pip/issues/9175)).

If a package fails to install due to a missing build-time dependency, try using a newer version of
the package; if the problem persists, consider filing an issue with the package maintainer,
requesting that they update the packaging setup to declare the correct PEP 517 build-time
dependencies.

As an escape hatch, you can preinstall a package's build dependencies, then run `uv pip install`
with `--no-build-isolation`, as in:

```shell
uv pip install wheel &amp;&amp; uv pip install --no-build-isolation biopython==1.77
```

For a list of packages that are known to fail under PEP 517 build isolation, see
[#2252](https://github.com/astral-sh/uv/issues/2252).

## Transitive URL dependencies

While uv includes first-class support for URL dependencies (e.g., `ruff @ https://...`), it differs
from pip in its handling of _transitive_ URL dependencies in two ways.

First, uv makes the assumption that non-URL dependencies do not introduce URL dependencies into the
resolution. In other words, it assumes that dependencies fetched from a registry do not themselves
depend on URLs. If a non-URL dependency _does_ introduce a URL dependency, uv will reject the URL
dependency during resolution. (Note that PyPI does not allow published packages to depend on URL
dependencies; other registries may be more permissive.)

Second, if a constraint (`--constraint`) or override (`--override`) is defined using a direct URL
dependency, and the constrained package has a direct URL dependency of its own, uv _may_ reject that
transitive direct URL dependency during resolution, if the URL isn't referenced elsewhere in the set
of input requirements.

If uv rejects a transitive URL dependency, the best course of action is to provide the URL
dependency as a direct dependency in the relevant `pyproject.toml` or `requirement.in` file, as the
above constraints do not apply to direct dependencies.

## Virtual environments by default

`uv pip install` and `uv pip sync` are designed to work with virtual environments by default.

Specifically, uv will always install packages into the currently active virtual environment, or
search for a virtual environment named `.venv` in the current directory or any parent directory
(even if it is not activated).

This differs from `pip`, which will install packages into a global environment if no virtual
environment is active, and will not search for inactive virtual environments.

In uv, you can install into non-virtual environments by providing a path to a Python executable via
the `--python /path/to/python` option, or via the `--system` flag, which installs into the first
Python interpreter found on the `PATH`, like `pip`.

In other words, uv inverts the default, requiring explicit opt-in to installing into the system
Python, which can lead to breakages and other complications, and should only be done in limited
circumstances.

For more, see
[&quot;Using arbitrary Python environments&quot;](./environments.md#using-arbitrary-python-environments).

## Resolution strategy

For a given set of dependency specifiers, it's often the case that there is no single &quot;correct&quot; set
of packages to install. Instead, there are many valid sets of packages that satisfy the specifiers.

Neither `pip` nor uv make any guarantees about the _exact_ set of packages that will be installed;
only that the resolution will be consistent, deterministic, and compliant with the specifiers. As
such, in some cases, `pip` and uv will yield different resolutions; however, both resolutions
_should_ be equally valid.

For example, consider:

```python title=&quot;requirements.in&quot;
starlette
fastapi
```

At time of writing, the most recent `starlette` version is `0.37.2`, and the most recent `fastapi`
version is `0.110.0`. However, `fastapi==0.110.0` also depends on `starlette`, and introduces an
upper bound: `starlette&gt;=0.36.3,&lt;0.37.0`.

If a resolver prioritizes including the most recent version of `starlette`, it would need to use an
older version of `fastapi` that excludes the upper bound on `starlette`. In practice, this requires
falling back to `fastapi==0.1.17`:

```python title=&quot;requirements.txt&quot;
# This file was autogenerated by uv via the following command:
#    uv pip compile requirements.in
annotated-types==0.6.0
    # via pydantic
anyio==4.3.0
    # via starlette
fastapi==0.1.17
idna==3.6
    # via anyio
pydantic==2.6.3
    # via fastapi
pydantic-core==2.16.3
    # via pydantic
sniffio==1.3.1
    # via anyio
starlette==0.37.2
    # via fastapi
typing-extensions==4.10.0
    # via
    #   pydantic
    #   pydantic-core
```

Alternatively, if a resolver prioritizes including the most recent version of `fastapi`, it would
need to use an older version of `starlette` that satisfies the upper bound. In practice, this
requires falling back to `starlette==0.36.3`:

```python title=&quot;requirements.txt&quot;
# This file was autogenerated by uv via the following command:
#    uv pip compile requirements.in
annotated-types==0.6.0
    # via pydantic
anyio==4.3.0
    # via starlette
fastapi==0.110.0
idna==3.6
    # via anyio
pydantic==2.6.3
    # via fastapi
pydantic-core==2.16.3
    # via pydantic
sniffio==1.3.1
    # via anyio
starlette==0.36.3
    # via fastapi
typing-extensions==4.10.0
    # via
    #   fastapi
    #   pydantic
    #   pydantic-core
```

When uv resolutions differ from `pip` in undesirable ways, it's often a sign that the specifiers are
too loose, and that the user should consider tightening them. For example, in the case of
`starlette` and `fastapi`, the user could require `fastapi&gt;=0.110.0`.

## `pip check`

At present, `uv pip check` will surface the following diagnostics:

- A package has no `METADATA` file, or the `METADATA` file can't be parsed.
- A package has a `Requires-Python` that doesn't match the Python version of the running
  interpreter.
- A package has a dependency on a package that isn't installed.
- A package has a dependency on a package that's installed, but at an incompatible version.
- Multiple versions of a package are installed in the virtual environment.

In some cases, `uv pip check` will surface diagnostics that `pip check` does not, and vice versa.
For example, unlike `uv pip check`, `pip check` will _not_ warn when multiple versions of a package
are installed in the current environment.

## `--user` and the `user` install scheme

uv does not support the `--user` flag, which installs packages based on the `user` install scheme.
Instead, we recommend the use of virtual environments to isolate package installations.

Additionally, pip will fall back to the `user` install scheme if it detects that the user does not
have write permissions to the target directory, as is the case on some systems when installing into
the system Python. uv does not implement any such fallback.

For more, see [#2077](https://github.com/astral-sh/uv/issues/2077).

## `--only-binary` enforcement

The `--only-binary` argument is used to restrict installation to pre-built binary distributions.
When `--only-binary :all:` is provided, both pip and uv will refuse to build source distributions
from PyPI and other registries.

However, when a dependency is provided as a direct URL (e.g., `uv pip install https://...`), pip
does _not_ enforce `--only-binary`, and will build source distributions for all such packages.

uv, meanwhile, _does_ enforce `--only-binary` for direct URL dependencies, with one exception: given
`uv pip install https://... --only-binary flask`, uv _will_ build the source distribution at the
given URL if it cannot infer the package name ahead of time, since uv can't determine whether the
package is &quot;allowed&quot; in such cases without building its metadata.

Both pip and uv allow editables requirements to be built and installed even when `--only-binary` is
provided. For example, `uv pip install -e . --only-binary :all:` is allowed.

## `--no-binary` enforcement

The `--no-binary` argument is used to restrict installation to source distributions. When
`--no-binary` is provided, uv will refuse to install pre-built binary distributions, but _will_
reuse any binary distributions that are already present in the local cache.

Additionally, and in contrast to pip, uv's resolver will still read metadata from pre-built binary
distributions when `--no-binary` is provided.

## `manylinux_compatible` enforcement

[PEP 600](https://peps.python.org/pep-0600/#package-installers) describes a mechanism through which
Python distributors can opt out of `manylinux` compatibility by defining a `manylinux_compatible`
function on the `_manylinux` standard library module.

uv respects `manylinux_compatible`, but only tests against the current glibc version, and applies
the return value of `manylinux_compatible` globally.

In other words, if `manylinux_compatible` returns `True`, uv will treat the system as
`manylinux`-compatible; if it returns `False`, uv will treat the system as `manylinux`-incompatible,
without calling `manylinux_compatible` for every glibc version.

This approach is not a complete implementation of the spec, but is compatible with common blanket
`manylinux_compatible` implementations like
[`no-manylinux`](https://pypi.org/project/no-manylinux/):

```python
from __future__ import annotations
manylinux1_compatible = False
manylinux2010_compatible = False
manylinux2014_compatible = False


def manylinux_compatible(*_, **__):  # PEP 600
    return False
```

## Bytecode compilation

Unlike `pip`, uv does not compile `.py` files to `.pyc` files during installation by default (i.e.,
uv does not create or populate `__pycache__` directories). To enable bytecode compilation during
installs, pass the `--compile-bytecode` flag to `uv pip install` or `uv pip sync`, or set the
`UV_COMPILE_BYTECODE` environment variable to `1`.

Skipping bytecode compilation can be undesirable in workflows; for example, we recommend enabling
bytecode compilation in [Docker builds](../guides/integration/docker.md) to improve startup times
(at the cost of increased build times).

As bytecode compilation suppresses various warnings issued by the Python interpreter, in rare cases
you may seen `SyntaxWarning` or `DeprecationWarning` messages when running Python code that was
installed with uv that do not appear when using `pip`. These are valid warnings, but are typically
hidden by the bytecode compilation process, and can either be ignored, fixed upstream, or similarly
suppressed by enabling bytecode compilation in uv.

## Strictness and spec enforcement

uv tends to be stricter than `pip`, and will often reject packages that `pip` would install. For
example, uv rejects HTML indexes with invalid URL fragments (see:
[PEP 503](https://peps.python.org/pep-0503/)), while `pip` will ignore such fragments.

In some cases, uv implements lenient behavior for popular packages that are known to have specific
spec compliance issues.

If uv rejects a package that `pip` would install due to a spec violation, the best course of action
is to first attempt to install a newer version of the package; and, if that fails, to report the
issue to the package maintainer.

## `pip` command-line options and subcommands

uv does not support the complete set of `pip`'s command-line options and subcommands, although it
does support a large subset.

Missing options and subcommands are prioritized based on user demand and the complexity of the
implementation, and tend to be tracked in individual issues. For example:

- [`--trusted-host`](https://github.com/astral-sh/uv/issues/1339)
- [`--user`](https://github.com/astral-sh/uv/issues/2077)

If you encounter a missing option or subcommand, please search the issue tracker to see if it has
already been reported, and if not, consider opening a new issue. Feel free to upvote any existing
issues to convey your interest.

## Registry authentication

uv does not support `pip`'s `auto` or `import` options for `--keyring-provider`. At present, only
the `subprocess` option is supported.

Unlike `pip`, uv does not enable keyring authentication by default.

Unlike `pip`, uv does not wait until a request returns a HTTP 401 before searching for
authentication. uv attaches authentication to all requests for hosts with credentials available.

## `egg` support

uv does not support features that are considered legacy or deprecated in `pip`. For example, uv does
not support `.egg`-style distributions.

However, uv does have partial support for (1) `.egg-info`-style distributions (which are
occasionally found in Docker images and Conda environments) and (2) legacy editable
`.egg-link`-style distributions.

Specifically, uv does not support installing new `.egg-info`- or `.egg-link`-style distributions,
but will respect any such existing distributions during resolution, list them with `uv pip list` and
`uv pip freeze`, and uninstall them with `uv pip uninstall`.

## Build constraints

When constraints are provided via `--constraint` (or `UV_CONSTRAINT`), uv will _not_ apply the
constraints when resolving build dependencies (i.e., to build a source distribution). Instead, build
constraints should be provided via the dedicated `--build-constraint` (or `UV_BUILD_CONSTRAINT`)
setting.

pip, meanwhile, applies constraints to build dependencies when specified via `PIP_CONSTRAINT`, but
not when provided via `--constraint` on the command line.

For example, to ensure that `setuptools 60.0.0` is used to build any packages with a build
dependency on `setuptools`, use `--build-constraint`, rather than `--constraint`.

## `pip compile` defaults

There are a few small but notable differences in the default behaviors of `pip compile` and
`pip-tools`.

By default, uv does not write the compiled requirements to an output file. Instead, uv requires that
the user specify an output file explicitly with the `-o` or `--output-file` option.

By default, uv strips extras when outputting the compiled requirements. In other words, uv defaults
to `--strip-extras`, while `pip-compile` defaults to `--no-strip-extras`. `pip-compile` is scheduled
to change this default in the next major release (v8.0.0), at which point both tools will default to
`--strip-extras`. To retain extras with uv, pass the `--no-strip-extras` flag to `uv pip compile`.

By default, uv does not write any index URLs to the output file, while `pip-compile` outputs any
`--index-url` or `--extra-index-url` that does not match the default (PyPI). To include index URLs
in the output file, pass the `--emit-index-url` flag to `uv pip compile`. Unlike `pip-compile`, uv
will include all index URLs when `--emit-index-url` is passed, including the default index URL.

## `requires-python` enforcement

When evaluating `requires-python` ranges for dependencies, uv only considers lower bounds and
ignores upper bounds entirely. For example, `&gt;=3.8, &lt;4` is treated as `&gt;=3.8`. Respecting upper
bounds on `requires-python` often leads to formally correct but practically incorrect resolutions,
as, e.g., resolvers will backtrack to the first published version that omits the upper bound (see:
[`Requires-Python` upper limits](https://discuss.python.org/t/requires-python-upper-limits/12663)).

When evaluating Python versions against `requires-python` specifiers, uv truncates the candidate
version to the major, minor, and patch components, ignoring (e.g.) pre-release and post-release
identifiers.

For example, a project that declares `requires-python: &gt;=3.13` will accept Python 3.13.0b1. While
3.13.0b1 is not strictly greater than 3.13, it is greater than 3.13 when the pre-release identifier
is omitted.

While this is not strictly compliant with [PEP 440](https://peps.python.org/pep-0440/), it _is_
consistent with
[pip](https://github.com/pypa/pip/blob/24.1.1/src/pip/_internal/resolution/resolvelib/candidates.py#L540).

## Package priority

There are usually many possible solutions given a set of requirements, and a resolver must choose
between them. uv's resolver and pip's resolver have a different set of package priorities. While
both resolvers use the user-provided order as one of their priorities, pip has additional
[priorities](https://pip.pypa.io/en/stable/topics/more-dependency-resolution/#the-resolver-algorithm)
that uv does not have. Hence, uv is more likely to be affected by a change in user order than pip
is.

For example, `uv pip install foo bar` prioritizes newer versions of `foo` over `bar` and could
result in a different resolution than `uv pip install bar foo`. Similarly, this behavior applies to
the ordering of requirements in input files for `uv pip compile`.
</file>
        <file path="docs/pip/compile.md"># Locking environments

Locking is to take a dependency, e.g., `ruff`, and write an exact version to use to a file. When
working with many dependencies, it is useful to lock the exact versions so the environment can be
reproduced. Without locking, the versions of dependencies could change over time, when using a
different tool, or across platforms.

## Locking requirements

uv allows dependencies to be locked in the `requirements.txt` format. It is recommended to use the
standard `pyproject.toml` to define dependencies, but other dependency formats are supported as
well. See the documentation on [declaring dependencies](dependencies.md) for more details on how to
define dependencies.

To lock dependencies declared in a `pyproject.toml`:

```console
$ uv pip compile pyproject.toml -o requirements.txt
```

Note by default the `uv pip compile` output is just displayed and `--output-file` / `-o` argument is
needed to write to a file.

To lock dependencies declared in a `requirements.in`:

```console
$ uv pip compile requirements.in -o requirements.txt
```

To lock dependencies declared in multiple files:

```console
$ uv pip compile pyproject.toml requirements-dev.in -o requirements-dev.txt
```

uv also supports legacy `setup.py` and `setup.cfg` formats. To lock dependencies declared in a
`setup.py`:

```console
$ uv pip compile setup.py -o requirements.txt
```

To lock dependencies from stdin, use `-`:

```console
$ echo &quot;ruff&quot; | uv pip compile -
```

To lock with optional dependencies enabled, e.g., the &quot;foo&quot; extra:

```console
$ uv pip compile pyproject.toml --extra foo
```

To lock with all optional dependencies enabled:

```console
$ uv pip compile pyproject.toml --all-extras
```

Note extras are not supported with the `requirements.in` format.

To lock a dependency group in the current project directory's `pyproject.toml`, for example the
group `foo`:

```console
$ uv pip compile --group foo
```

!!! important

    A `--group` flag has to be added to pip-tools' `pip compile`, [although they're considering it](https://github.com/jazzband/pip-tools/issues/2062). We expect to support whatever syntax and semantics they adopt.

To specify the project directory where groups should be sourced from:

```console
$ uv pip compile --project some/path/ --group foo --group bar
```

Alternatively, you can specify a path to a `pyproject.toml` for each group:

```console
$ uv pip compile --group some/path/pyproject.toml:foo --group other/pyproject.toml:bar
```

!!! note

    `--group` flags do not apply to other specified sources. For instance,
    `uv pip compile some/path/pyproject.toml --group foo` sources `foo`
    from `./pyproject.toml` and **not** `some/path/pyproject.toml`.

## Upgrading requirements

When using an output file, uv will consider the versions pinned in an existing output file. If a
dependency is pinned it will not be upgraded on a subsequent compile run. For example:

```console
$ echo &quot;ruff==0.3.0&quot; &gt; requirements.txt
$ echo &quot;ruff&quot; | uv pip compile - -o requirements.txt
# This file was autogenerated by uv via the following command:
#    uv pip compile - -o requirements.txt
ruff==0.3.0
```

To upgrade a dependency, use the `--upgrade-package` flag:

```console
$ uv pip compile - -o requirements.txt --upgrade-package ruff
```

To upgrade all dependencies, there is an `--upgrade` flag.

## Syncing an environment

Dependencies can be installed directly from their definition files or from compiled
`requirements.txt` files with `uv pip install`. See the documentation on
[installing packages from files](packages.md#installing-packages-from-files) for more details.

When installing with `uv pip install`, packages that are already installed will not be removed
unless they conflict with the lockfile. This means that the environment can have dependencies that
aren't declared in the lockfile, which isn't great for reproducibility. To ensure the environment
exactly matches the lockfile, use `uv pip sync` instead.

To sync an environment with a `requirements.txt` file:

```console
$ uv pip sync requirements.txt
```

To sync an environment with a `pyproject.toml` file:

```console
$ uv pip sync pyproject.toml
```

## Adding constraints

Constraints files are `requirements.txt`-like files that only control the _version_ of a requirement
that's installed. However, including a package in a constraints file will _not_ trigger the
installation of that package. Constraints can be used to add bounds to dependencies that are not
dependencies of the current project.

To define a constraint, define a bound for a package:

```python title=&quot;constraints.txt&quot;
pydantic&lt;2.0
```

To use a constraints file:

```console
$ uv pip compile requirements.in --constraint constraints.txt
```

Note that multiple constraints can be defined in each file and multiple files can be used.

uv will also read `constraint-dependencies` from the `pyproject.toml` at the workspace root, and
append them to those specified in the constraints file.

## Adding build constraints

Similar to `constraints`, but specifically for build-time dependencies, including those required
when building runtime dependencies.

Build constraint files are `requirements.txt`-like files that only control the _version_ of a
build-time requirement. However, including a package in a build constraints file will _not_ trigger
its installation at build time; instead, constraints apply only when the package is required as a
direct or transitive build-time dependency. Build constraints can be used to add bounds to
dependencies that are not explicitly declared as build-time dependencies of the current project.

For example, if a package defines its build dependencies as follows:

```toml title=&quot;pyproject.toml&quot;
[build-system]
requires = [&quot;setuptools&quot;]
build-backend = &quot;setuptools.build_meta&quot;
```

Build constraints could be used to ensure that a specific version of `setuptools` is used for every
package in the workspace:

```python title=&quot;build-constraints.txt&quot;
setuptools==75.0.0
```

uv will also read `build-constraint-dependencies` from the `pyproject.toml` at the workspace root,
and append them to those specified in the build constraints file.

## Overriding dependency versions

Overrides files are `requirements.txt`-like files that force a specific version of a requirement to
be installed, regardless of the requirements declared by any constituent package, and regardless of
whether this would be considered an invalid resolution.

While constraints are _additive_, in that they're combined with the requirements of the constituent
packages, overrides are _absolute_, in that they completely replace the requirements of the
constituent packages.

Overrides are most often used to remove upper bounds from a transitive dependency. For example, if
`a` requires `c&gt;=1.0,&lt;2.0` and `b` requires `c&gt;=2.0` and the current project requires `a` and `b`
then the dependencies cannot be resolved.

To define an override, define the new requirement for the problematic package:

```python title=&quot;overrides.txt&quot;
c&gt;=2.0
```

To use an overrides file:

```console
$ uv pip compile requirements.in --override overrides.txt
```

Now, resolution can succeed. However, note that if `a` is _correct_ that it does not support
`c&gt;=2.0` then a runtime error will likely be encountered when using the packages.

Note that multiple overrides can be defined in each file and multiple files can be used.
</file>
        <file path="docs/pip/dependencies.md"># Declaring dependencies

It is best practice to declare dependencies in a static file instead of modifying environments with
ad-hoc installations. Once dependencies are defined, they can be [locked](./compile.md) to create a
consistent, reproducible environment.

## Using `pyproject.toml`

The `pyproject.toml` file is the Python standard for defining configuration for a project.

To define project dependencies in a `pyproject.toml` file:

```toml title=&quot;pyproject.toml&quot;
[project]
dependencies = [
  &quot;httpx&quot;,
  &quot;ruff&gt;=0.3.0&quot;
]
```

To define optional dependencies in a `pyproject.toml` file:

```toml title=&quot;pyproject.toml&quot;
[project.optional-dependencies]
cli = [
  &quot;rich&quot;,
  &quot;click&quot;,
]
```

Each of the keys defines an &quot;extra&quot;, which can be installed using the `--extra` and `--all-extras`
flags or `package[&lt;extra&gt;]` syntax. See the documentation on
[installing packages](./packages.md#installing-packages-from-files) for more details.

See the official
[`pyproject.toml` guide](https://packaging.python.org/en/latest/guides/writing-pyproject-toml/) for
more details on getting started with a `pyproject.toml`.

## Using `requirements.in`

It is also common to use a lightweight `requirements.txt` format to declare the dependencies for the
project. Each requirement is defined on its own line. Commonly, this file is called
`requirements.in` to distinguish it from `requirements.txt` which is used for the locked
dependencies.

To define dependencies in a `requirements.in` file:

```python title=&quot;requirements.in&quot;
httpx
ruff&gt;=0.3.0
```

Optional dependencies groups are not supported in this format.
</file>
        <file path="docs/pip/environments.md"># Using Python environments

Each Python installation has an environment that is active when Python is used. Packages can be
installed into an environment to make their modules available from your Python scripts. Generally,
it is considered best practice not to modify a Python installation's environment. This is especially
important for Python installations that come with the operating system which often manage the
packages themselves. A virtual environment is a lightweight way to isolate packages from a Python
installation's environment. Unlike `pip`, uv requires using a virtual environment by default.

## Creating a virtual environment

uv supports creating virtual environments, e.g., to create a virtual environment at `.venv`:

```console
$ uv venv
```

A specific name or path can be specified, e.g., to create a virtual environment at `my-name`:

```console
$ uv venv my-name
```

A Python version can be requested, e.g., to create a virtual environment with Python 3.11:

```console
$ uv venv --python 3.11
```

Note this requires the requested Python version to be available on the system. However, if
unavailable, uv will download Python for you. See the
[Python version](../concepts/python-versions.md) documentation for more details.

## Using a virtual environment

When using the default virtual environment name, uv will automatically find and use the virtual
environment during subsequent invocations.

```console
$ uv venv

$ # Install a package in the new virtual environment
$ uv pip install ruff
```

The virtual environment can be &quot;activated&quot; to make its packages available:

=== &quot;macOS and Linux&quot;

    ```console
    $ source .venv/bin/activate
    ```

=== &quot;Windows&quot;

    ```console
    $ .venv\Scripts\activate
    ```

!!! note

    The default activation script on Unix is for POSIX compliant shells like `sh`, `bash`, or `zsh`.
    There are additional activation scripts for common alternative shells.

    === &quot;fish&quot;

        ```console
        $ source .venv/bin/activate.fish
        ```

    === &quot;csh / tcsh&quot;


        ```console
        $ source .venv/bin/activate.csh
        ```

    === &quot;Nushell&quot;

        ```console
        $ use .venv\Scripts\activate.nu
        ```

## Deactivating an environment

To exit a virtual environment, use the `deactivate` command:

```console
$ deactivate
```

## Using arbitrary Python environments

Since uv has no dependency on Python, it can install into virtual environments other than its own.
For example, setting `VIRTUAL_ENV=/path/to/venv` will cause uv to install into `/path/to/venv`,
regardless of where uv is installed. Note that if `VIRTUAL_ENV` is set to a directory that is
**not** a [PEP 405 compliant](https://peps.python.org/pep-0405/#specification) virtual environment,
it will be ignored.

uv can also install into arbitrary, even non-virtual environments, with the `--python` argument
provided to `uv pip sync` or `uv pip install`. For example,
`uv pip install --python /path/to/python` will install into the environment linked to the
`/path/to/python` interpreter.

For convenience, `uv pip install --system` will install into the system Python environment. Using
`--system` is roughly equivalent to `uv pip install --python $(which python)`, but note that
executables that are linked to virtual environments will be skipped. Although we generally recommend
using virtual environments for dependency management, `--system` is appropriate in continuous
integration and containerized environments.

The `--system` flag is also used to opt in to mutating system environments. For example, the
`--python` argument can be used to request a Python version (e.g., `--python 3.12`), and uv will
search for an interpreter that meets the request. If uv finds a system interpreter (e.g.,
`/usr/lib/python3.12`), then the `--system` flag is required to allow modification of this
non-virtual Python environment. Without the `--system` flag, uv will ignore any interpreters that
are not in virtual environments. Conversely, when the `--system` flag is provided, uv will ignore
any interpreters that _are_ in virtual environments.

Installing into system Python across platforms and distributions is notoriously difficult. uv
supports the common cases, but will not work in all cases. For example, installing into system
Python on Debian prior to Python 3.10 is unsupported due to the
[distribution's patching of `distutils` (but not `sysconfig`)](https://ffy00.github.io/blog/02-python-debian-and-the-install-locations/).
While we always recommend the use of virtual environments, uv considers them to be required in these
non-standard environments.

If uv is installed in a Python environment, e.g., with `pip`, it can still be used to modify other
environments. However, when invoked with `python -m uv`, uv will default to using the parent
interpreter's environment. Invoking uv via Python adds startup overhead and is not recommended for
general usage.

uv itself does not depend on Python, but it does need to locate a Python environment to (1) install
dependencies into the environment and (2) build source distributions.

## Discovery of Python environments

When running a command that mutates an environment such as `uv pip sync` or `uv pip install`, uv
will search for a virtual environment in the following order:

- An activated virtual environment based on the `VIRTUAL_ENV` environment variable.
- An activated Conda environment based on the `CONDA_PREFIX` environment variable.
- A virtual environment at `.venv` in the current directory, or in the nearest parent directory.

If no virtual environment is found, uv will prompt the user to create one in the current directory
via `uv venv`.

If the `--system` flag is included, uv will skip virtual environments search for an installed Python
version. Similarly, when running a command that does not mutate the environment such as
`uv pip compile`, uv does not _require_ a virtual environment ‚Äî however, a Python interpreter is
still required. See the documentation on
[Python discovery](../concepts/python-versions.md#discovery-of-python-versions) for details on the
discovery of installed Python versions.
</file>
        <file path="docs/pip/inspection.md"># Inspecting environments

## Listing installed packages

To list all of the packages in the environment:

```console
$ uv pip list
```

To list the packages in a JSON format:

```console
$ uv pip list --format json
```

To list all of the packages in the environment in a `requirements.txt` format:

```console
$ uv pip freeze
```

## Inspecting a package

To show information about an installed package, e.g., `numpy`:

```console
$ uv pip show numpy
```

Multiple packages can be inspected at once.

## Verifying an environment

It is possible to install packages with conflicting requirements into an environment if installed in
multiple steps.

To check for conflicts or missing dependencies in the environment:

```console
$ uv pip check
```
</file>
        <file path="docs/pip/packages.md"># Managing packages

## Installing a package

To install a package into the virtual environment, e.g., Flask:

```console
$ uv pip install flask
```

To install a package with optional dependencies enabled, e.g., Flask with the &quot;dotenv&quot; extra:

```console
$ uv pip install &quot;flask[dotenv]&quot;
```

To install multiple packages, e.g., Flask and Ruff:

```console
$ uv pip install flask ruff
```

To install a package with a constraint, e.g., Ruff v0.2.0 or newer:

```console
$ uv pip install 'ruff&gt;=0.2.0'
```

To install a package at a specific version, e.g., Ruff v0.3.0:

```console
$ uv pip install 'ruff==0.3.0'
```

To install a package from the disk:

```console
$ uv pip install &quot;ruff @ ./projects/ruff&quot;
```

To install a package from GitHub:

```console
$ uv pip install &quot;git+https://github.com/astral-sh/ruff&quot;
```

To install a package from GitHub at a specific reference:

```console
$ # Install a tag
$ uv pip install &quot;git+https://github.com/astral-sh/ruff@v0.2.0&quot;

$ # Install a commit
$ uv pip install &quot;git+https://github.com/astral-sh/ruff@1fadefa67b26508cc59cf38e6130bde2243c929d&quot;

$ # Install a branch
$ uv pip install &quot;git+https://github.com/astral-sh/ruff@main&quot;
```

See the [Git authentication](../configuration/authentication.md#git-authentication) documentation
for installation from a private repository.

## Editable packages

Editable packages do not need to be reinstalled for changes to their source code to be active.

To install the current project as an editable package

```console
$ uv pip install -e .
```

To install a project in another directory as an editable package:

```console
$ uv pip install -e &quot;ruff @ ./project/ruff&quot;
```

## Installing packages from files

Multiple packages can be installed at once from standard file formats.

Install from a `requirements.txt` file:

```console
$ uv pip install -r requirements.txt
```

See the [`uv pip compile`](./compile.md) documentation for more information on `requirements.txt`
files.

Install from a `pyproject.toml` file:

```console
$ uv pip install -r pyproject.toml
```

Install from a `pyproject.toml` file with optional dependencies enabled, e.g., the &quot;foo&quot; extra:

```console
$ uv pip install -r pyproject.toml --extra foo
```

Install from a `pyproject.toml` file with all optional dependencies enabled:

```console
$ uv pip install -r pyproject.toml --all-extras
```

To install dependency groups in the current project directory's `pyproject.toml`, for example the
group `foo`:

```console
$ uv pip install --group foo
```

To specify the project directory where groups should be sourced from:

```console
$ uv pip install --project some/path/ --group foo --group bar
```

Alternatively, you can specify a path to a `pyproject.toml` for each group:

```console
$ uv pip install --group some/path/pyproject.toml:foo --group other/pyproject.toml:bar
```

!!! note

    As in pip, `--group` flags do not apply to other sources specified with flags like `-r` or -e`.
    For instance, `uv pip install -r some/path/pyproject.toml --group foo` sources `foo`
    from `./pyproject.toml` and **not** `some/path/pyproject.toml`.

## Uninstalling a package

To uninstall a package, e.g., Flask:

```console
$ uv pip uninstall flask
```

To uninstall multiple packages, e.g., Flask and Ruff:

```console
$ uv pip uninstall flask ruff
```
</file>
      </dir>
      <dir path="docs/reference">
        <file path="docs/reference/cli.md"># CLI Reference

## uv

An extremely fast Python package manager.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv [OPTIONS] &lt;COMMAND&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Commands&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt&gt;&lt;a href=&quot;#uv-run&quot;&gt;&lt;code&gt;uv run&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run a command or script&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-init&quot;&gt;&lt;code&gt;uv init&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Create a new project&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-add&quot;&gt;&lt;code&gt;uv add&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Add dependencies to the project&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-remove&quot;&gt;&lt;code&gt;uv remove&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Remove dependencies from the project&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-sync&quot;&gt;&lt;code&gt;uv sync&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Update the project&amp;#8217;s environment&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-lock&quot;&gt;&lt;code&gt;uv lock&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Update the project&amp;#8217;s lockfile&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-export&quot;&gt;&lt;code&gt;uv export&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Export the project&amp;#8217;s lockfile to an alternate format&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-tree&quot;&gt;&lt;code&gt;uv tree&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the project&amp;#8217;s dependency tree&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-tool&quot;&gt;&lt;code&gt;uv tool&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run and install commands provided by Python packages&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-python&quot;&gt;&lt;code&gt;uv python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Manage Python versions and installations&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-pip&quot;&gt;&lt;code&gt;uv pip&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Manage Python packages with a pip-compatible interface&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-venv&quot;&gt;&lt;code&gt;uv venv&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Create a virtual environment&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-build&quot;&gt;&lt;code&gt;uv build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Build Python packages into source distributions and wheels&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-publish&quot;&gt;&lt;code&gt;uv publish&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Upload distributions to an index&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-cache&quot;&gt;&lt;code&gt;uv cache&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Manage uv&amp;#8217;s cache&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-self&quot;&gt;&lt;code&gt;uv self&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Manage the uv executable&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-version&quot;&gt;&lt;code&gt;uv version&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display uv&amp;#8217;s version&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-help&quot;&gt;&lt;code&gt;uv help&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display documentation for a command&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

## uv run

Run a command or script.

Ensures that the command runs in a Python environment.

When used with a file ending in `.py` or an HTTP(S) URL, the file will be treated as a script and run with a Python interpreter, i.e., `uv run file.py` is equivalent to `uv run python file.py`. For URLs, the script is temporarily downloaded before execution. If the script contains inline dependency metadata, it will be installed into an isolated, ephemeral environment. When used with `-`, the input will be read from stdin, and treated as a Python script.

When used in a project, the project environment will be created and updated before invoking the command.

When used outside a project, if a virtual environment can be found in the current directory or a parent directory, the command will be run in that environment. Otherwise, the command will be run in the environment of the discovered interpreter.

Arguments following the command (or script) are not interpreted as arguments to uv. All options to uv must be provided before the command, e.g., `uv run --verbose foo`. A `--` can be used to separate the command from uv options for clarity, e.g., `uv run --python 3.12 -- python`.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv run [OPTIONS] [COMMAND]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-run--active&quot;&gt;&lt;a href=&quot;#uv-run--active&quot;&gt;&lt;code&gt;--active&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Prefer the active virtual environment over the project&amp;#8217;s virtual environment.&lt;/p&gt;

&lt;p&gt;If the project virtual environment is active or no virtual environment is active, this has no effect.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--all-extras&quot;&gt;&lt;a href=&quot;#uv-run--all-extras&quot;&gt;&lt;code&gt;--all-extras&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include all optional dependencies.&lt;/p&gt;

&lt;p&gt;Optional dependencies are defined via &lt;code&gt;project.optional-dependencies&lt;/code&gt; in a &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This option is only available when running in a project.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--all-groups&quot;&gt;&lt;a href=&quot;#uv-run--all-groups&quot;&gt;&lt;code&gt;--all-groups&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include dependencies from all dependency groups.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--no-group&lt;/code&gt; can be used to exclude specific groups.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--all-packages&quot;&gt;&lt;a href=&quot;#uv-run--all-packages&quot;&gt;&lt;code&gt;--all-packages&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command with all workspace members installed.&lt;/p&gt;

&lt;p&gt;The workspace&amp;#8217;s environment (&lt;code&gt;.venv&lt;/code&gt;) is updated to include all workspace members.&lt;/p&gt;

&lt;p&gt;Any extras or groups specified via &lt;code&gt;--extra&lt;/code&gt;, &lt;code&gt;--group&lt;/code&gt;, or related options will be applied to all workspace members.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-run--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--cache-dir&quot;&gt;&lt;a href=&quot;#uv-run--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--color&quot;&gt;&lt;a href=&quot;#uv-run--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--compile-bytecode&quot;&gt;&lt;a href=&quot;#uv-run--compile-bytecode&quot;&gt;&lt;code&gt;--compile-bytecode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--compile&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Compile Python files to bytecode after installation.&lt;/p&gt;

&lt;p&gt;By default, uv does not compile Python (&lt;code&gt;.py&lt;/code&gt;) files to bytecode (&lt;code&gt;__pycache__/*.pyc&lt;/code&gt;); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.&lt;/p&gt;

&lt;p&gt;When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_COMPILE_BYTECODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--config-file&quot;&gt;&lt;a href=&quot;#uv-run--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--config-setting&quot;&gt;&lt;a href=&quot;#uv-run--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--default-index&quot;&gt;&lt;a href=&quot;#uv-run--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--directory&quot;&gt;&lt;a href=&quot;#uv-run--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--env-file&quot;&gt;&lt;a href=&quot;#uv-run--env-file&quot;&gt;&lt;code&gt;--env-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;env-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Load environment variables from a &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times, with subsequent files overriding values defined in previous files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_ENV_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--exact&quot;&gt;&lt;a href=&quot;#uv-run--exact&quot;&gt;&lt;code&gt;--exact&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Perform an exact sync, removing extraneous packages.&lt;/p&gt;

&lt;p&gt;When enabled, uv will remove any extraneous packages from the environment. By default, &lt;code&gt;uv run&lt;/code&gt; will make the minimum necessary changes to satisfy the requirements.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-run--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--extra&quot;&gt;&lt;a href=&quot;#uv-run--extra&quot;&gt;&lt;code&gt;--extra&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include optional dependencies from the specified extra name.&lt;/p&gt;

&lt;p&gt;May be provided more than once.&lt;/p&gt;

&lt;p&gt;Optional dependencies are defined via &lt;code&gt;project.optional-dependencies&lt;/code&gt; in a &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This option is only available when running in a project.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-run--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--find-links&quot;&gt;&lt;a href=&quot;#uv-run--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-run--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--frozen&quot;&gt;&lt;a href=&quot;#uv-run--frozen&quot;&gt;&lt;code&gt;--frozen&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run without updating the &lt;code&gt;uv.lock&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Instead of checking if the lockfile is up-to-date, uses the versions in the lockfile as the source of truth. If the lockfile is missing, uv will exit with an error. If the &lt;code&gt;pyproject.toml&lt;/code&gt; includes changes to dependencies that have not been included in the lockfile yet, they will not be present in the environment.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FROZEN&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--group&quot;&gt;&lt;a href=&quot;#uv-run--group&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include dependencies from the specified dependency group.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--gui-script&quot;&gt;&lt;a href=&quot;#uv-run--gui-script&quot;&gt;&lt;code&gt;--gui-script&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the given path as a Python GUI script.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;--gui-script&lt;/code&gt; will attempt to parse the path as a PEP 723 script and run it with &lt;code&gt;pythonw.exe&lt;/code&gt;, irrespective of its extension. Only available on Windows.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--help&quot;&gt;&lt;a href=&quot;#uv-run--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--index&quot;&gt;&lt;a href=&quot;#uv-run--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--index-strategy&quot;&gt;&lt;a href=&quot;#uv-run--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--index-url&quot;&gt;&lt;a href=&quot;#uv-run--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--isolated&quot;&gt;&lt;a href=&quot;#uv-run--isolated&quot;&gt;&lt;code&gt;--isolated&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command in an isolated virtual environment.&lt;/p&gt;

&lt;p&gt;Usually, the project environment is reused for performance. This option forces a fresh environment to be used for the project, enforcing strict isolation between dependencies and declaration of requirements.&lt;/p&gt;

&lt;p&gt;An editable installation is still used for the project.&lt;/p&gt;

&lt;p&gt;When used with &lt;code&gt;--with&lt;/code&gt; or &lt;code&gt;--with-requirements&lt;/code&gt;, the additional dependencies will still be layered in a second environment.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-run--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--link-mode&quot;&gt;&lt;a href=&quot;#uv-run--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--locked&quot;&gt;&lt;a href=&quot;#uv-run--locked&quot;&gt;&lt;code&gt;--locked&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Assert that the &lt;code&gt;uv.lock&lt;/code&gt; will remain unchanged.&lt;/p&gt;

&lt;p&gt;Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LOCKED&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--managed-python&quot;&gt;&lt;a href=&quot;#uv-run--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--module&quot;&gt;&lt;a href=&quot;#uv-run--module&quot;&gt;&lt;code&gt;--module&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-m&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run a Python module.&lt;/p&gt;

&lt;p&gt;Equivalent to &lt;code&gt;python -m &amp;lt;module&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--native-tls&quot;&gt;&lt;a href=&quot;#uv-run--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-binary&quot;&gt;&lt;a href=&quot;#uv-run--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-run--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-build&quot;&gt;&lt;a href=&quot;#uv-run--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-run--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-run--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-build-package&quot;&gt;&lt;a href=&quot;#uv-run--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-cache&quot;&gt;&lt;a href=&quot;#uv-run--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-config&quot;&gt;&lt;a href=&quot;#uv-run--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-default-groups&quot;&gt;&lt;a href=&quot;#uv-run--no-default-groups&quot;&gt;&lt;code&gt;--no-default-groups&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the default dependency groups.&lt;/p&gt;

&lt;p&gt;uv includes the groups defined in &lt;code&gt;tool.uv.default-groups&lt;/code&gt; by default. This disables that option, however, specific groups can still be included with &lt;code&gt;--group&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-dev&quot;&gt;&lt;a href=&quot;#uv-run--no-dev&quot;&gt;&lt;code&gt;--no-dev&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable the development dependency group.&lt;/p&gt;

&lt;p&gt;This option is an alias of &lt;code&gt;--no-group dev&lt;/code&gt;. See &lt;code&gt;--no-default-groups&lt;/code&gt; to disable all default groups instead.&lt;/p&gt;

&lt;p&gt;This option is only available when running in a project.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-editable&quot;&gt;&lt;a href=&quot;#uv-run--no-editable&quot;&gt;&lt;code&gt;--no-editable&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install any editable dependencies, including the project and any workspace members, as non-editable&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_EDITABLE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-env-file&quot;&gt;&lt;a href=&quot;#uv-run--no-env-file&quot;&gt;&lt;code&gt;--no-env-file&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading environment variables from a &lt;code&gt;.env&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_ENV_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-extra&quot;&gt;&lt;a href=&quot;#uv-run--no-extra&quot;&gt;&lt;code&gt;--no-extra&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-extra&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Exclude the specified optional dependencies, if &lt;code&gt;--all-extras&lt;/code&gt; is supplied.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-group&quot;&gt;&lt;a href=&quot;#uv-run--no-group&quot;&gt;&lt;code&gt;--no-group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable the specified dependency group.&lt;/p&gt;

&lt;p&gt;This options always takes precedence over default groups, &lt;code&gt;--all-groups&lt;/code&gt;, and &lt;code&gt;--group&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-index&quot;&gt;&lt;a href=&quot;#uv-run--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-run--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-progress&quot;&gt;&lt;a href=&quot;#uv-run--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-project&quot;&gt;&lt;a href=&quot;#uv-run--no-project&quot;&gt;&lt;code&gt;--no-project&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no_workspace&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering the project or workspace.&lt;/p&gt;

&lt;p&gt;Instead of searching for projects in the current directory and parent directories, run in an isolated, ephemeral environment populated by the &lt;code&gt;--with&lt;/code&gt; requirements.&lt;/p&gt;

&lt;p&gt;If a virtual environment is active or found in a current or parent directory, it will be used as if there was no project or workspace.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-run--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-sources&quot;&gt;&lt;a href=&quot;#uv-run--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--no-sync&quot;&gt;&lt;a href=&quot;#uv-run--no-sync&quot;&gt;&lt;code&gt;--no-sync&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid syncing the virtual environment.&lt;/p&gt;

&lt;p&gt;Implies &lt;code&gt;--frozen&lt;/code&gt;, as the project dependencies will be ignored (i.e., the lockfile will not be updated, since the environment will not be synced regardless).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_SYNC&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--offline&quot;&gt;&lt;a href=&quot;#uv-run--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--only-dev&quot;&gt;&lt;a href=&quot;#uv-run--only-dev&quot;&gt;&lt;code&gt;--only-dev&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only include the development dependency group.&lt;/p&gt;

&lt;p&gt;The project and its dependencies will be omitted.&lt;/p&gt;

&lt;p&gt;This option is an alias for &lt;code&gt;--only-group dev&lt;/code&gt;. Implies &lt;code&gt;--no-default-groups&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--only-group&quot;&gt;&lt;a href=&quot;#uv-run--only-group&quot;&gt;&lt;code&gt;--only-group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;only-group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only include dependencies from the specified dependency group.&lt;/p&gt;

&lt;p&gt;The project and its dependencies will be omitted.&lt;/p&gt;

&lt;p&gt;May be provided multiple times. Implies &lt;code&gt;--no-default-groups&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--package&quot;&gt;&lt;a href=&quot;#uv-run--package&quot;&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command in a specific package in the workspace.&lt;/p&gt;

&lt;p&gt;If the workspace member does not exist, uv will exit with an error.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--prerelease&quot;&gt;&lt;a href=&quot;#uv-run--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--project&quot;&gt;&lt;a href=&quot;#uv-run--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--python&quot;&gt;&lt;a href=&quot;#uv-run--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use for the run environment.&lt;/p&gt;

&lt;p&gt;If the interpreter request is satisfied by a discovered environment, the environment will be used.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; to view supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--quiet&quot;&gt;&lt;a href=&quot;#uv-run--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--refresh&quot;&gt;&lt;a href=&quot;#uv-run--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--refresh-package&quot;&gt;&lt;a href=&quot;#uv-run--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--reinstall&quot;&gt;&lt;a href=&quot;#uv-run--reinstall&quot;&gt;&lt;code&gt;--reinstall&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--force-reinstall&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall all packages, regardless of whether they&amp;#8217;re already installed. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--reinstall-package&quot;&gt;&lt;a href=&quot;#uv-run--reinstall-package&quot;&gt;&lt;code&gt;--reinstall-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;reinstall-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall a specific package, regardless of whether it&amp;#8217;s already installed. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--resolution&quot;&gt;&lt;a href=&quot;#uv-run--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-run--script&quot;&gt;&lt;a href=&quot;#uv-run--script&quot;&gt;&lt;code&gt;--script&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-s&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the given path as a Python script.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;--script&lt;/code&gt; will attempt to parse the path as a PEP 723 script, irrespective of its extension.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--upgrade&quot;&gt;&lt;a href=&quot;#uv-run--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-run--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--verbose&quot;&gt;&lt;a href=&quot;#uv-run--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--version&quot;&gt;&lt;a href=&quot;#uv-run--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--with&quot;&gt;&lt;a href=&quot;#uv-run--with&quot;&gt;&lt;code&gt;--with&lt;/code&gt;&lt;/a&gt; &lt;i&gt;with&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run with the given packages installed.&lt;/p&gt;

&lt;p&gt;When used in a project, these dependencies will be layered on top of the project environment in a separate, ephemeral environment. These dependencies are allowed to conflict with those specified by the project.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--with-editable&quot;&gt;&lt;a href=&quot;#uv-run--with-editable&quot;&gt;&lt;code&gt;--with-editable&lt;/code&gt;&lt;/a&gt; &lt;i&gt;with-editable&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run with the given packages installed in editable mode.&lt;/p&gt;

&lt;p&gt;When used in a project, these dependencies will be layered on top of the project environment in a separate, ephemeral environment. These dependencies are allowed to conflict with those specified by the project.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-run--with-requirements&quot;&gt;&lt;a href=&quot;#uv-run--with-requirements&quot;&gt;&lt;code&gt;--with-requirements&lt;/code&gt;&lt;/a&gt; &lt;i&gt;with-requirements&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run with all packages listed in the given &lt;code&gt;requirements.txt&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;The same environment semantics as &lt;code&gt;--with&lt;/code&gt; apply.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, or &lt;code&gt;setup.cfg&lt;/code&gt; files is not allowed.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv init

Create a new project.

Follows the `pyproject.toml` specification.

If a `pyproject.toml` already exists at the target, uv will exit with an error.

If a `pyproject.toml` is found in any of the parent directories of the target path, the project will be added as a workspace member of the parent.

Some project state is not created until needed, e.g., the project virtual environment (`.venv`) and lockfile (`uv.lock`) are lazily created during the first sync.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv init [OPTIONS] [PATH]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-init--path&quot;&gt;&lt;a href=&quot;#uv-init--path&quot;&lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to use for the project/script.&lt;/p&gt;

&lt;p&gt;Defaults to the current working directory when initializing an app or library; required when initializing a script. Accepts relative and absolute paths.&lt;/p&gt;

&lt;p&gt;If a &lt;code&gt;pyproject.toml&lt;/code&gt; is found in any of the parent directories of the target path, the project will be added as a workspace member of the parent, unless &lt;code&gt;--no-workspace&lt;/code&gt; is provided.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-init--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-init--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--app&quot;&gt;&lt;a href=&quot;#uv-init--app&quot;&gt;&lt;code&gt;--app&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--application&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Create a project for an application.&lt;/p&gt;

&lt;p&gt;This is the default behavior if &lt;code&gt;--lib&lt;/code&gt; is not requested.&lt;/p&gt;

&lt;p&gt;This project kind is for web servers, scripts, and command-line interfaces.&lt;/p&gt;

&lt;p&gt;By default, an application is not intended to be built and distributed as a Python package. The &lt;code&gt;--package&lt;/code&gt; option can be used to create an application that is distributable, e.g., if you want to distribute a command-line interface via PyPI.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--author-from&quot;&gt;&lt;a href=&quot;#uv-init--author-from&quot;&gt;&lt;code&gt;--author-from&lt;/code&gt;&lt;/a&gt; &lt;i&gt;author-from&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Fill in the &lt;code&gt;authors&lt;/code&gt; field in the &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default, uv will attempt to infer the author information from some sources (e.g., Git) (&lt;code&gt;auto&lt;/code&gt;). Use &lt;code&gt;--author-from git&lt;/code&gt; to only infer from Git configuration. Use &lt;code&gt;--author-from none&lt;/code&gt; to avoid inferring the author information.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Fetch the author information from some sources (e.g., Git) automatically&lt;/li&gt;

&lt;li&gt;&lt;code&gt;git&lt;/code&gt;:  Fetch the author information from Git configuration only&lt;/li&gt;

&lt;li&gt;&lt;code&gt;none&lt;/code&gt;:  Do not infer the author information&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--bare&quot;&gt;&lt;a href=&quot;#uv-init--bare&quot;&gt;&lt;code&gt;--bare&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only create a &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Disables creating extra files like &lt;code&gt;README.md&lt;/code&gt;, the &lt;code&gt;src/&lt;/code&gt; tree, &lt;code&gt;.python-version&lt;/code&gt; files, etc.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--build-backend&quot;&gt;&lt;a href=&quot;#uv-init--build-backend&quot;&gt;&lt;code&gt;--build-backend&lt;/code&gt;&lt;/a&gt; &lt;i&gt;build-backend&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Initialize a build-backend of choice for the project.&lt;/p&gt;

&lt;p&gt;Implicitly sets &lt;code&gt;--package&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hatch&lt;/code&gt;:  Use &lt;a href='https://pypi.org/project/hatchling'&gt;hatchling&lt;/a&gt; as the project build backend&lt;/li&gt;

&lt;li&gt;&lt;code&gt;flit&lt;/code&gt;:  Use &lt;a href='https://pypi.org/project/flit-core'&gt;flit-core&lt;/a&gt; as the project build backend&lt;/li&gt;

&lt;li&gt;&lt;code&gt;pdm&lt;/code&gt;:  Use &lt;a href='https://pypi.org/project/pdm-backend'&gt;pdm-backend&lt;/a&gt; as the project build backend&lt;/li&gt;

&lt;li&gt;&lt;code&gt;setuptools&lt;/code&gt;:  Use &lt;a href='https://pypi.org/project/setuptools'&gt;setuptools&lt;/a&gt; as the project build backend&lt;/li&gt;

&lt;li&gt;&lt;code&gt;maturin&lt;/code&gt;:  Use &lt;a href='https://pypi.org/project/maturin'&gt;maturin&lt;/a&gt; as the project build backend&lt;/li&gt;

&lt;li&gt;&lt;code&gt;scikit&lt;/code&gt;:  Use &lt;a href='https://pypi.org/project/scikit-build-core'&gt;scikit-build-core&lt;/a&gt; as the project build backend&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--cache-dir&quot;&gt;&lt;a href=&quot;#uv-init--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--color&quot;&gt;&lt;a href=&quot;#uv-init--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--config-file&quot;&gt;&lt;a href=&quot;#uv-init--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--description&quot;&gt;&lt;a href=&quot;#uv-init--description&quot;&gt;&lt;code&gt;--description&lt;/code&gt;&lt;/a&gt; &lt;i&gt;description&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Set the project description&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--directory&quot;&gt;&lt;a href=&quot;#uv-init--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--help&quot;&gt;&lt;a href=&quot;#uv-init--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--lib&quot;&gt;&lt;a href=&quot;#uv-init--lib&quot;&gt;&lt;code&gt;--lib&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--library&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Create a project for a library.&lt;/p&gt;

&lt;p&gt;A library is a project that is intended to be built and distributed as a Python package.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--managed-python&quot;&gt;&lt;a href=&quot;#uv-init--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--name&quot;&gt;&lt;a href=&quot;#uv-init--name&quot;&gt;&lt;code&gt;--name&lt;/code&gt;&lt;/a&gt; &lt;i&gt;name&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The name of the project.&lt;/p&gt;

&lt;p&gt;Defaults to the name of the directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--native-tls&quot;&gt;&lt;a href=&quot;#uv-init--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--no-cache&quot;&gt;&lt;a href=&quot;#uv-init--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--no-config&quot;&gt;&lt;a href=&quot;#uv-init--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--no-description&quot;&gt;&lt;a href=&quot;#uv-init--no-description&quot;&gt;&lt;code&gt;--no-description&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable the description for the project&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-init--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--no-package&quot;&gt;&lt;a href=&quot;#uv-init--no-package&quot;&gt;&lt;code&gt;--no-package&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not set up the project to be built as a Python package.&lt;/p&gt;

&lt;p&gt;Does not include a &lt;code&gt;[build-system]&lt;/code&gt; for the project.&lt;/p&gt;

&lt;p&gt;This is the default behavior when using &lt;code&gt;--app&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--no-pin-python&quot;&gt;&lt;a href=&quot;#uv-init--no-pin-python&quot;&gt;&lt;code&gt;--no-pin-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not create a &lt;code&gt;.python-version&lt;/code&gt; file for the project.&lt;/p&gt;

&lt;p&gt;By default, uv will create a &lt;code&gt;.python-version&lt;/code&gt; file containing the minor version of the discovered Python interpreter, which will cause subsequent uv commands to use that version.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--no-progress&quot;&gt;&lt;a href=&quot;#uv-init--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-init--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--no-readme&quot;&gt;&lt;a href=&quot;#uv-init--no-readme&quot;&gt;&lt;code&gt;--no-readme&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not create a &lt;code&gt;README.md&lt;/code&gt; file&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--no-workspace&quot;&gt;&lt;a href=&quot;#uv-init--no-workspace&quot;&gt;&lt;code&gt;--no-workspace&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-project&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering a workspace and create a standalone project.&lt;/p&gt;

&lt;p&gt;By default, uv searches for workspaces in the current directory or any parent directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--offline&quot;&gt;&lt;a href=&quot;#uv-init--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--package&quot;&gt;&lt;a href=&quot;#uv-init--package&quot;&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Set up the project to be built as a Python package.&lt;/p&gt;

&lt;p&gt;Defines a &lt;code&gt;[build-system]&lt;/code&gt; for the project.&lt;/p&gt;

&lt;p&gt;This is the default behavior when using &lt;code&gt;--lib&lt;/code&gt; or &lt;code&gt;--build-backend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;--app&lt;/code&gt;, this will include a &lt;code&gt;[project.scripts]&lt;/code&gt; entrypoint and use a &lt;code&gt;src/&lt;/code&gt; project structure.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--project&quot;&gt;&lt;a href=&quot;#uv-init--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--python&quot;&gt;&lt;a href=&quot;#uv-init--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use to determine the minimum supported Python version.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; to view supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--quiet&quot;&gt;&lt;a href=&quot;#uv-init--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--script&quot;&gt;&lt;a href=&quot;#uv-init--script&quot;&gt;&lt;code&gt;--script&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Create a script.&lt;/p&gt;

&lt;p&gt;A script is a standalone file with embedded metadata enumerating its dependencies, along with any Python version requirements, as defined in the PEP 723 specification.&lt;/p&gt;

&lt;p&gt;PEP 723 scripts can be executed directly with &lt;code&gt;uv run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default, adds a requirement on the system Python version; use &lt;code&gt;--python&lt;/code&gt; to specify an alternative Python version requirement.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--vcs&quot;&gt;&lt;a href=&quot;#uv-init--vcs&quot;&gt;&lt;code&gt;--vcs&lt;/code&gt;&lt;/a&gt; &lt;i&gt;vcs&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Initialize a version control system for the project.&lt;/p&gt;

&lt;p&gt;By default, uv will initialize a Git repository (&lt;code&gt;git&lt;/code&gt;). Use &lt;code&gt;--vcs none&lt;/code&gt; to explicitly avoid initializing a version control system.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt;:  Use Git for version control&lt;/li&gt;

&lt;li&gt;&lt;code&gt;none&lt;/code&gt;:  Do not use any version control system&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-init--verbose&quot;&gt;&lt;a href=&quot;#uv-init--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-init--version&quot;&gt;&lt;a href=&quot;#uv-init--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv add

Add dependencies to the project.

Dependencies are added to the project's `pyproject.toml` file.

If a given dependency exists already, it will be updated to the new version specifier unless it includes markers that differ from the existing specifier in which case another entry for the dependency will be added.

If no constraint or URL is provided for a dependency, a lower bound is added equal to the latest compatible version of the package, e.g., `&gt;=1.2.3`, unless `--frozen` is provided, in which case no resolution is performed.

The lockfile and project environment will be updated to reflect the added dependencies. To skip updating the lockfile, use `--frozen`. To skip updating the environment, use `--no-sync`.

If any of the requested dependencies cannot be found, uv will exit with an error, unless the `--frozen` flag is provided, in which case uv will add the dependencies verbatim without checking that they exist or are compatible with the project.

uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv add [OPTIONS] &lt;PACKAGES|--requirements &lt;REQUIREMENTS&gt;&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-add--packages&quot;&gt;&lt;a href=&quot;#uv-add--packages&quot;&lt;code&gt;PACKAGES&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The packages to add, as PEP 508 requirements (e.g., &lt;code&gt;ruff==0.5.0&lt;/code&gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-add--active&quot;&gt;&lt;a href=&quot;#uv-add--active&quot;&gt;&lt;code&gt;--active&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Prefer the active virtual environment over the project&amp;#8217;s virtual environment.&lt;/p&gt;

&lt;p&gt;If the project virtual environment is active or no virtual environment is active, this has no effect.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-add--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--branch&quot;&gt;&lt;a href=&quot;#uv-add--branch&quot;&gt;&lt;code&gt;--branch&lt;/code&gt;&lt;/a&gt; &lt;i&gt;branch&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Branch to use when adding a dependency from Git&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--cache-dir&quot;&gt;&lt;a href=&quot;#uv-add--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--color&quot;&gt;&lt;a href=&quot;#uv-add--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--compile-bytecode&quot;&gt;&lt;a href=&quot;#uv-add--compile-bytecode&quot;&gt;&lt;code&gt;--compile-bytecode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--compile&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Compile Python files to bytecode after installation.&lt;/p&gt;

&lt;p&gt;By default, uv does not compile Python (&lt;code&gt;.py&lt;/code&gt;) files to bytecode (&lt;code&gt;__pycache__/*.pyc&lt;/code&gt;); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.&lt;/p&gt;

&lt;p&gt;When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_COMPILE_BYTECODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--config-file&quot;&gt;&lt;a href=&quot;#uv-add--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--config-setting&quot;&gt;&lt;a href=&quot;#uv-add--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--constraints&quot;&gt;&lt;a href=&quot;#uv-add--constraints&quot;&gt;&lt;code&gt;--constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--constraint&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; &lt;i&gt;constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain versions using the given requirements files.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. The constraints will &lt;em&gt;not&lt;/em&gt; be added to the project&amp;#8217;s &lt;code&gt;pyproject.toml&lt;/code&gt; file, but &lt;em&gt;will&lt;/em&gt; be respected during dependency resolution.&lt;/p&gt;

&lt;p&gt;This is equivalent to pip&amp;#8217;s &lt;code&gt;--constraint&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--default-index&quot;&gt;&lt;a href=&quot;#uv-add--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--dev&quot;&gt;&lt;a href=&quot;#uv-add--dev&quot;&gt;&lt;code&gt;--dev&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Add the requirements to the development dependency group.&lt;/p&gt;

&lt;p&gt;This option is an alias for &lt;code&gt;--group dev&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--directory&quot;&gt;&lt;a href=&quot;#uv-add--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--editable&quot;&gt;&lt;a href=&quot;#uv-add--editable&quot;&gt;&lt;code&gt;--editable&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Add the requirements as editable&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-add--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--extra&quot;&gt;&lt;a href=&quot;#uv-add--extra&quot;&gt;&lt;code&gt;--extra&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Extras to enable for the dependency.&lt;/p&gt;

&lt;p&gt;May be provided more than once.&lt;/p&gt;

&lt;p&gt;To add this dependency to an optional extra instead, see &lt;code&gt;--optional&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-add--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--find-links&quot;&gt;&lt;a href=&quot;#uv-add--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-add--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--frozen&quot;&gt;&lt;a href=&quot;#uv-add--frozen&quot;&gt;&lt;code&gt;--frozen&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Add dependencies without re-locking the project.&lt;/p&gt;

&lt;p&gt;The project environment will not be synced.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FROZEN&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--group&quot;&gt;&lt;a href=&quot;#uv-add--group&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Add the requirements to the specified dependency group.&lt;/p&gt;

&lt;p&gt;These requirements will not be included in the published metadata for the project.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--help&quot;&gt;&lt;a href=&quot;#uv-add--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--index&quot;&gt;&lt;a href=&quot;#uv-add--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--index-strategy&quot;&gt;&lt;a href=&quot;#uv-add--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--index-url&quot;&gt;&lt;a href=&quot;#uv-add--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-add--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--link-mode&quot;&gt;&lt;a href=&quot;#uv-add--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--locked&quot;&gt;&lt;a href=&quot;#uv-add--locked&quot;&gt;&lt;code&gt;--locked&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Assert that the &lt;code&gt;uv.lock&lt;/code&gt; will remain unchanged.&lt;/p&gt;

&lt;p&gt;Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LOCKED&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--managed-python&quot;&gt;&lt;a href=&quot;#uv-add--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--marker&quot;&gt;&lt;a href=&quot;#uv-add--marker&quot;&gt;&lt;code&gt;--marker&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-m&lt;/code&gt; &lt;i&gt;marker&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Apply this marker to all added packages&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--native-tls&quot;&gt;&lt;a href=&quot;#uv-add--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-binary&quot;&gt;&lt;a href=&quot;#uv-add--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-add--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-build&quot;&gt;&lt;a href=&quot;#uv-add--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-add--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-add--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-build-package&quot;&gt;&lt;a href=&quot;#uv-add--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-cache&quot;&gt;&lt;a href=&quot;#uv-add--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-config&quot;&gt;&lt;a href=&quot;#uv-add--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-index&quot;&gt;&lt;a href=&quot;#uv-add--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-add--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-progress&quot;&gt;&lt;a href=&quot;#uv-add--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-add--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-sources&quot;&gt;&lt;a href=&quot;#uv-add--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--no-sync&quot;&gt;&lt;a href=&quot;#uv-add--no-sync&quot;&gt;&lt;code&gt;--no-sync&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid syncing the virtual environment&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_SYNC&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--offline&quot;&gt;&lt;a href=&quot;#uv-add--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--optional&quot;&gt;&lt;a href=&quot;#uv-add--optional&quot;&gt;&lt;code&gt;--optional&lt;/code&gt;&lt;/a&gt; &lt;i&gt;optional&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Add the requirements to the package&amp;#8217;s optional dependencies for the specified extra.&lt;/p&gt;

&lt;p&gt;The group may then be activated when installing the project with the &lt;code&gt;--extra&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;To enable an optional extra for this requirement instead, see &lt;code&gt;--extra&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--package&quot;&gt;&lt;a href=&quot;#uv-add--package&quot;&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Add the dependency to a specific package in the workspace&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--prerelease&quot;&gt;&lt;a href=&quot;#uv-add--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--project&quot;&gt;&lt;a href=&quot;#uv-add--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--python&quot;&gt;&lt;a href=&quot;#uv-add--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use for resolving and syncing.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--quiet&quot;&gt;&lt;a href=&quot;#uv-add--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--raw-sources&quot;&gt;&lt;a href=&quot;#uv-add--raw-sources&quot;&gt;&lt;code&gt;--raw-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Add source requirements to &lt;code&gt;project.dependencies&lt;/code&gt;, rather than &lt;code&gt;tool.uv.sources&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default, uv will use the &lt;code&gt;tool.uv.sources&lt;/code&gt; section to record source information for Git, local, editable, and direct URL requirements.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--refresh&quot;&gt;&lt;a href=&quot;#uv-add--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--refresh-package&quot;&gt;&lt;a href=&quot;#uv-add--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--reinstall&quot;&gt;&lt;a href=&quot;#uv-add--reinstall&quot;&gt;&lt;code&gt;--reinstall&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--force-reinstall&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall all packages, regardless of whether they&amp;#8217;re already installed. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--reinstall-package&quot;&gt;&lt;a href=&quot;#uv-add--reinstall-package&quot;&gt;&lt;code&gt;--reinstall-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;reinstall-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall a specific package, regardless of whether it&amp;#8217;s already installed. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--requirements&quot;&gt;&lt;a href=&quot;#uv-add--requirements&quot;&gt;&lt;code&gt;--requirements&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--requirement&lt;/code&gt;, &lt;code&gt;-r&lt;/code&gt; &lt;i&gt;requirements&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Add all packages listed in the given &lt;code&gt;requirements.txt&lt;/code&gt; files&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--resolution&quot;&gt;&lt;a href=&quot;#uv-add--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-add--rev&quot;&gt;&lt;a href=&quot;#uv-add--rev&quot;&gt;&lt;code&gt;--rev&lt;/code&gt;&lt;/a&gt; &lt;i&gt;rev&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Commit to use when adding a dependency from Git&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--script&quot;&gt;&lt;a href=&quot;#uv-add--script&quot;&gt;&lt;code&gt;--script&lt;/code&gt;&lt;/a&gt; &lt;i&gt;script&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Add the dependency to the specified Python script, rather than to a project.&lt;/p&gt;

&lt;p&gt;If provided, uv will add the dependency to the script&amp;#8217;s inline metadata table, in adherence with PEP 723. If no such inline metadata table is present, a new one will be created and added to the script. When executed via &lt;code&gt;uv run&lt;/code&gt;, uv will create a temporary environment for the script with all inline dependencies installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--tag&quot;&gt;&lt;a href=&quot;#uv-add--tag&quot;&gt;&lt;code&gt;--tag&lt;/code&gt;&lt;/a&gt; &lt;i&gt;tag&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Tag to use when adding a dependency from Git&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--upgrade&quot;&gt;&lt;a href=&quot;#uv-add--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-add--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--verbose&quot;&gt;&lt;a href=&quot;#uv-add--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-add--version&quot;&gt;&lt;a href=&quot;#uv-add--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv remove

Remove dependencies from the project.

Dependencies are removed from the project's `pyproject.toml` file.

If multiple entries exist for a given dependency, i.e., each with different markers, all of the entries will be removed.

The lockfile and project environment will be updated to reflect the removed dependencies. To skip updating the lockfile, use `--frozen`. To skip updating the environment, use `--no-sync`.

If any of the requested dependencies are not present in the project, uv will exit with an error.

If a package has been manually installed in the environment, i.e., with `uv pip install`, it will not be removed by `uv remove`.

uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv remove [OPTIONS] &lt;PACKAGES&gt;...
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-remove--packages&quot;&gt;&lt;a href=&quot;#uv-remove--packages&quot;&lt;code&gt;PACKAGES&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The names of the dependencies to remove (e.g., &lt;code&gt;ruff&lt;/code&gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-remove--active&quot;&gt;&lt;a href=&quot;#uv-remove--active&quot;&gt;&lt;code&gt;--active&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Prefer the active virtual environment over the project&amp;#8217;s virtual environment.&lt;/p&gt;

&lt;p&gt;If the project virtual environment is active or no virtual environment is active, this has no effect.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-remove--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--cache-dir&quot;&gt;&lt;a href=&quot;#uv-remove--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--color&quot;&gt;&lt;a href=&quot;#uv-remove--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--compile-bytecode&quot;&gt;&lt;a href=&quot;#uv-remove--compile-bytecode&quot;&gt;&lt;code&gt;--compile-bytecode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--compile&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Compile Python files to bytecode after installation.&lt;/p&gt;

&lt;p&gt;By default, uv does not compile Python (&lt;code&gt;.py&lt;/code&gt;) files to bytecode (&lt;code&gt;__pycache__/*.pyc&lt;/code&gt;); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.&lt;/p&gt;

&lt;p&gt;When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_COMPILE_BYTECODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--config-file&quot;&gt;&lt;a href=&quot;#uv-remove--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--config-setting&quot;&gt;&lt;a href=&quot;#uv-remove--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--default-index&quot;&gt;&lt;a href=&quot;#uv-remove--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--dev&quot;&gt;&lt;a href=&quot;#uv-remove--dev&quot;&gt;&lt;code&gt;--dev&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Remove the packages from the development dependency group.&lt;/p&gt;

&lt;p&gt;This option is an alias for &lt;code&gt;--group dev&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--directory&quot;&gt;&lt;a href=&quot;#uv-remove--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-remove--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-remove--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--find-links&quot;&gt;&lt;a href=&quot;#uv-remove--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-remove--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--frozen&quot;&gt;&lt;a href=&quot;#uv-remove--frozen&quot;&gt;&lt;code&gt;--frozen&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Remove dependencies without re-locking the project.&lt;/p&gt;

&lt;p&gt;The project environment will not be synced.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FROZEN&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--group&quot;&gt;&lt;a href=&quot;#uv-remove--group&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Remove the packages from the specified dependency group&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--help&quot;&gt;&lt;a href=&quot;#uv-remove--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--index&quot;&gt;&lt;a href=&quot;#uv-remove--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--index-strategy&quot;&gt;&lt;a href=&quot;#uv-remove--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--index-url&quot;&gt;&lt;a href=&quot;#uv-remove--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-remove--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--link-mode&quot;&gt;&lt;a href=&quot;#uv-remove--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--locked&quot;&gt;&lt;a href=&quot;#uv-remove--locked&quot;&gt;&lt;code&gt;--locked&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Assert that the &lt;code&gt;uv.lock&lt;/code&gt; will remain unchanged.&lt;/p&gt;

&lt;p&gt;Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LOCKED&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--managed-python&quot;&gt;&lt;a href=&quot;#uv-remove--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--native-tls&quot;&gt;&lt;a href=&quot;#uv-remove--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-binary&quot;&gt;&lt;a href=&quot;#uv-remove--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-remove--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-build&quot;&gt;&lt;a href=&quot;#uv-remove--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-remove--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-remove--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-build-package&quot;&gt;&lt;a href=&quot;#uv-remove--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-cache&quot;&gt;&lt;a href=&quot;#uv-remove--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-config&quot;&gt;&lt;a href=&quot;#uv-remove--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-index&quot;&gt;&lt;a href=&quot;#uv-remove--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-remove--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-progress&quot;&gt;&lt;a href=&quot;#uv-remove--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-remove--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-sources&quot;&gt;&lt;a href=&quot;#uv-remove--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--no-sync&quot;&gt;&lt;a href=&quot;#uv-remove--no-sync&quot;&gt;&lt;code&gt;--no-sync&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid syncing the virtual environment after re-locking the project&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_SYNC&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--offline&quot;&gt;&lt;a href=&quot;#uv-remove--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--optional&quot;&gt;&lt;a href=&quot;#uv-remove--optional&quot;&gt;&lt;code&gt;--optional&lt;/code&gt;&lt;/a&gt; &lt;i&gt;optional&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Remove the packages from the project&amp;#8217;s optional dependencies for the specified extra&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--package&quot;&gt;&lt;a href=&quot;#uv-remove--package&quot;&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Remove the dependencies from a specific package in the workspace&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--prerelease&quot;&gt;&lt;a href=&quot;#uv-remove--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--project&quot;&gt;&lt;a href=&quot;#uv-remove--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--python&quot;&gt;&lt;a href=&quot;#uv-remove--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use for resolving and syncing.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--quiet&quot;&gt;&lt;a href=&quot;#uv-remove--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--refresh&quot;&gt;&lt;a href=&quot;#uv-remove--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--refresh-package&quot;&gt;&lt;a href=&quot;#uv-remove--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--reinstall&quot;&gt;&lt;a href=&quot;#uv-remove--reinstall&quot;&gt;&lt;code&gt;--reinstall&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--force-reinstall&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall all packages, regardless of whether they&amp;#8217;re already installed. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--reinstall-package&quot;&gt;&lt;a href=&quot;#uv-remove--reinstall-package&quot;&gt;&lt;code&gt;--reinstall-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;reinstall-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall a specific package, regardless of whether it&amp;#8217;s already installed. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--resolution&quot;&gt;&lt;a href=&quot;#uv-remove--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-remove--script&quot;&gt;&lt;a href=&quot;#uv-remove--script&quot;&gt;&lt;code&gt;--script&lt;/code&gt;&lt;/a&gt; &lt;i&gt;script&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Remove the dependency from the specified Python script, rather than from a project.&lt;/p&gt;

&lt;p&gt;If provided, uv will remove the dependency from the script&amp;#8217;s inline metadata table, in adherence with PEP 723.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--upgrade&quot;&gt;&lt;a href=&quot;#uv-remove--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-remove--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--verbose&quot;&gt;&lt;a href=&quot;#uv-remove--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-remove--version&quot;&gt;&lt;a href=&quot;#uv-remove--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv sync

Update the project's environment.

Syncing ensures that all project dependencies are installed and up-to-date with the lockfile.

By default, an exact sync is performed: uv removes packages that are not declared as dependencies of the project. Use the `--inexact` flag to keep extraneous packages. Note that if an extraneous package conflicts with a project dependency, it will still be removed. Additionally, if `--no-build-isolation` is used, uv will not remove extraneous packages to avoid removing possible build dependencies.

If the project virtual environment (`.venv`) does not exist, it will be created.

The project is re-locked before syncing unless the `--locked` or `--frozen` flag is provided.

uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.

Note that, when installing from a lockfile, uv will not provide warnings for yanked package versions.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv sync [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-sync--active&quot;&gt;&lt;a href=&quot;#uv-sync--active&quot;&gt;&lt;code&gt;--active&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Sync dependencies to the active virtual environment.&lt;/p&gt;

&lt;p&gt;Instead of creating or updating the virtual environment for the project or script, the active virtual environment will be preferred, if the &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; environment variable is set.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--all-extras&quot;&gt;&lt;a href=&quot;#uv-sync--all-extras&quot;&gt;&lt;code&gt;--all-extras&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include all optional dependencies.&lt;/p&gt;

&lt;p&gt;When two or more extras are declared as conflicting in &lt;code&gt;tool.uv.conflicts&lt;/code&gt;, using this flag will always result in an error.&lt;/p&gt;

&lt;p&gt;Note that all optional dependencies are always included in the resolution; this option only affects the selection of packages to install.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--all-groups&quot;&gt;&lt;a href=&quot;#uv-sync--all-groups&quot;&gt;&lt;code&gt;--all-groups&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include dependencies from all dependency groups.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--no-group&lt;/code&gt; can be used to exclude specific groups.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--all-packages&quot;&gt;&lt;a href=&quot;#uv-sync--all-packages&quot;&gt;&lt;code&gt;--all-packages&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Sync all packages in the workspace.&lt;/p&gt;

&lt;p&gt;The workspace&amp;#8217;s environment (&lt;code&gt;.venv&lt;/code&gt;) is updated to include all workspace members.&lt;/p&gt;

&lt;p&gt;Any extras or groups specified via &lt;code&gt;--extra&lt;/code&gt;, &lt;code&gt;--group&lt;/code&gt;, or related options will be applied to all workspace members.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-sync--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--cache-dir&quot;&gt;&lt;a href=&quot;#uv-sync--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--check&quot;&gt;&lt;a href=&quot;#uv-sync--check&quot;&gt;&lt;code&gt;--check&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Check if the Python environment is synchronized with the project.&lt;/p&gt;

&lt;p&gt;If the environment is not up to date, uv will exit with an error.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--color&quot;&gt;&lt;a href=&quot;#uv-sync--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--compile-bytecode&quot;&gt;&lt;a href=&quot;#uv-sync--compile-bytecode&quot;&gt;&lt;code&gt;--compile-bytecode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--compile&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Compile Python files to bytecode after installation.&lt;/p&gt;

&lt;p&gt;By default, uv does not compile Python (&lt;code&gt;.py&lt;/code&gt;) files to bytecode (&lt;code&gt;__pycache__/*.pyc&lt;/code&gt;); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.&lt;/p&gt;

&lt;p&gt;When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_COMPILE_BYTECODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--config-file&quot;&gt;&lt;a href=&quot;#uv-sync--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--config-setting&quot;&gt;&lt;a href=&quot;#uv-sync--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--default-index&quot;&gt;&lt;a href=&quot;#uv-sync--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--directory&quot;&gt;&lt;a href=&quot;#uv-sync--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--dry-run&quot;&gt;&lt;a href=&quot;#uv-sync--dry-run&quot;&gt;&lt;code&gt;--dry-run&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Perform a dry run, without writing the lockfile or modifying the project environment.&lt;/p&gt;

&lt;p&gt;In dry-run mode, uv will resolve the project&amp;#8217;s dependencies and report on the resulting changes to both the lockfile and the project environment, but will not modify either.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-sync--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--extra&quot;&gt;&lt;a href=&quot;#uv-sync--extra&quot;&gt;&lt;code&gt;--extra&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include optional dependencies from the specified extra name.&lt;/p&gt;

&lt;p&gt;May be provided more than once.&lt;/p&gt;

&lt;p&gt;When multiple extras or groups are specified that appear in &lt;code&gt;tool.uv.conflicts&lt;/code&gt;, uv will report an error.&lt;/p&gt;

&lt;p&gt;Note that all optional dependencies are always included in the resolution; this option only affects the selection of packages to install.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-sync--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--find-links&quot;&gt;&lt;a href=&quot;#uv-sync--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-sync--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--frozen&quot;&gt;&lt;a href=&quot;#uv-sync--frozen&quot;&gt;&lt;code&gt;--frozen&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Sync without updating the &lt;code&gt;uv.lock&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Instead of checking if the lockfile is up-to-date, uses the versions in the lockfile as the source of truth. If the lockfile is missing, uv will exit with an error. If the &lt;code&gt;pyproject.toml&lt;/code&gt; includes changes to dependencies that have not been included in the lockfile yet, they will not be present in the environment.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FROZEN&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--group&quot;&gt;&lt;a href=&quot;#uv-sync--group&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include dependencies from the specified dependency group.&lt;/p&gt;

&lt;p&gt;When multiple extras or groups are specified that appear in &lt;code&gt;tool.uv.conflicts&lt;/code&gt;, uv will report an error.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--help&quot;&gt;&lt;a href=&quot;#uv-sync--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--index&quot;&gt;&lt;a href=&quot;#uv-sync--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--index-strategy&quot;&gt;&lt;a href=&quot;#uv-sync--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--index-url&quot;&gt;&lt;a href=&quot;#uv-sync--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--inexact&quot;&gt;&lt;a href=&quot;#uv-sync--inexact&quot;&gt;&lt;code&gt;--inexact&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-exact&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not remove extraneous packages present in the environment.&lt;/p&gt;

&lt;p&gt;When enabled, uv will make the minimum necessary changes to satisfy the requirements. By default, syncing will remove any extraneous packages from the environment&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-sync--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--link-mode&quot;&gt;&lt;a href=&quot;#uv-sync--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--locked&quot;&gt;&lt;a href=&quot;#uv-sync--locked&quot;&gt;&lt;code&gt;--locked&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Assert that the &lt;code&gt;uv.lock&lt;/code&gt; will remain unchanged.&lt;/p&gt;

&lt;p&gt;Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LOCKED&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--managed-python&quot;&gt;&lt;a href=&quot;#uv-sync--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--native-tls&quot;&gt;&lt;a href=&quot;#uv-sync--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-binary&quot;&gt;&lt;a href=&quot;#uv-sync--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-sync--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-build&quot;&gt;&lt;a href=&quot;#uv-sync--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-sync--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-sync--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-build-package&quot;&gt;&lt;a href=&quot;#uv-sync--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-cache&quot;&gt;&lt;a href=&quot;#uv-sync--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-config&quot;&gt;&lt;a href=&quot;#uv-sync--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-default-groups&quot;&gt;&lt;a href=&quot;#uv-sync--no-default-groups&quot;&gt;&lt;code&gt;--no-default-groups&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the default dependency groups.&lt;/p&gt;

&lt;p&gt;uv includes the groups defined in &lt;code&gt;tool.uv.default-groups&lt;/code&gt; by default. This disables that option, however, specific groups can still be included with &lt;code&gt;--group&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-dev&quot;&gt;&lt;a href=&quot;#uv-sync--no-dev&quot;&gt;&lt;code&gt;--no-dev&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable the development dependency group.&lt;/p&gt;

&lt;p&gt;This option is an alias of &lt;code&gt;--no-group dev&lt;/code&gt;. See &lt;code&gt;--no-default-groups&lt;/code&gt; to disable all default groups instead.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-editable&quot;&gt;&lt;a href=&quot;#uv-sync--no-editable&quot;&gt;&lt;code&gt;--no-editable&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install any editable dependencies, including the project and any workspace members, as non-editable&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_EDITABLE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-extra&quot;&gt;&lt;a href=&quot;#uv-sync--no-extra&quot;&gt;&lt;code&gt;--no-extra&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-extra&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Exclude the specified optional dependencies, if &lt;code&gt;--all-extras&lt;/code&gt; is supplied.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-group&quot;&gt;&lt;a href=&quot;#uv-sync--no-group&quot;&gt;&lt;code&gt;--no-group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable the specified dependency group.&lt;/p&gt;

&lt;p&gt;This options always takes precedence over default groups, &lt;code&gt;--all-groups&lt;/code&gt;, and &lt;code&gt;--group&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-index&quot;&gt;&lt;a href=&quot;#uv-sync--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-install-package&quot;&gt;&lt;a href=&quot;#uv-sync--no-install-package&quot;&gt;&lt;code&gt;--no-install-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-install-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not install the given package(s).&lt;/p&gt;

&lt;p&gt;By default, all of the project&amp;#8217;s dependencies are installed into the environment. The &lt;code&gt;--no-install-package&lt;/code&gt; option allows exclusion of specific packages. Note this can result in a broken environment, and should be used with caution.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-install-project&quot;&gt;&lt;a href=&quot;#uv-sync--no-install-project&quot;&gt;&lt;code&gt;--no-install-project&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not install the current project.&lt;/p&gt;

&lt;p&gt;By default, the current project is installed into the environment with all of its dependencies. The &lt;code&gt;--no-install-project&lt;/code&gt; option allows the project to be excluded, but all of its dependencies are still installed. This is particularly useful in situations like building Docker images where installing the project separately from its dependencies allows optimal layer caching.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-install-workspace&quot;&gt;&lt;a href=&quot;#uv-sync--no-install-workspace&quot;&gt;&lt;code&gt;--no-install-workspace&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not install any workspace members, including the root project.&lt;/p&gt;

&lt;p&gt;By default, all of the workspace members and their dependencies are installed into the environment. The &lt;code&gt;--no-install-workspace&lt;/code&gt; option allows exclusion of all the workspace members while retaining their dependencies. This is particularly useful in situations like building Docker images where installing the workspace separately from its dependencies allows optimal layer caching.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-sync--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-progress&quot;&gt;&lt;a href=&quot;#uv-sync--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-sync--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--no-sources&quot;&gt;&lt;a href=&quot;#uv-sync--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--offline&quot;&gt;&lt;a href=&quot;#uv-sync--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--only-dev&quot;&gt;&lt;a href=&quot;#uv-sync--only-dev&quot;&gt;&lt;code&gt;--only-dev&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only include the development dependency group.&lt;/p&gt;

&lt;p&gt;The project and its dependencies will be omitted.&lt;/p&gt;

&lt;p&gt;This option is an alias for &lt;code&gt;--only-group dev&lt;/code&gt;. Implies &lt;code&gt;--no-default-groups&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--only-group&quot;&gt;&lt;a href=&quot;#uv-sync--only-group&quot;&gt;&lt;code&gt;--only-group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;only-group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only include dependencies from the specified dependency group.&lt;/p&gt;

&lt;p&gt;The project and its dependencies will be omitted.&lt;/p&gt;

&lt;p&gt;May be provided multiple times. Implies &lt;code&gt;--no-default-groups&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--package&quot;&gt;&lt;a href=&quot;#uv-sync--package&quot;&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Sync for a specific package in the workspace.&lt;/p&gt;

&lt;p&gt;The workspace&amp;#8217;s environment (&lt;code&gt;.venv&lt;/code&gt;) is updated to reflect the subset of dependencies declared by the specified workspace member package.&lt;/p&gt;

&lt;p&gt;If the workspace member does not exist, uv will exit with an error.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--prerelease&quot;&gt;&lt;a href=&quot;#uv-sync--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--project&quot;&gt;&lt;a href=&quot;#uv-sync--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--python&quot;&gt;&lt;a href=&quot;#uv-sync--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use for the project environment.&lt;/p&gt;

&lt;p&gt;By default, the first interpreter that meets the project&amp;#8217;s &lt;code&gt;requires-python&lt;/code&gt; constraint is used.&lt;/p&gt;

&lt;p&gt;If a Python interpreter in a virtual environment is provided, the packages will not be synced to the given environment. The interpreter will be used to create a virtual environment in the project.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--quiet&quot;&gt;&lt;a href=&quot;#uv-sync--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--refresh&quot;&gt;&lt;a href=&quot;#uv-sync--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--refresh-package&quot;&gt;&lt;a href=&quot;#uv-sync--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--reinstall&quot;&gt;&lt;a href=&quot;#uv-sync--reinstall&quot;&gt;&lt;code&gt;--reinstall&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--force-reinstall&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall all packages, regardless of whether they&amp;#8217;re already installed. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--reinstall-package&quot;&gt;&lt;a href=&quot;#uv-sync--reinstall-package&quot;&gt;&lt;code&gt;--reinstall-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;reinstall-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall a specific package, regardless of whether it&amp;#8217;s already installed. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--resolution&quot;&gt;&lt;a href=&quot;#uv-sync--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-sync--script&quot;&gt;&lt;a href=&quot;#uv-sync--script&quot;&gt;&lt;code&gt;--script&lt;/code&gt;&lt;/a&gt; &lt;i&gt;script&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Sync the environment for a Python script, rather than the current project.&lt;/p&gt;

&lt;p&gt;If provided, uv will sync the dependencies based on the script&amp;#8217;s inline metadata table, in adherence with PEP 723.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--upgrade&quot;&gt;&lt;a href=&quot;#uv-sync--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-sync--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--verbose&quot;&gt;&lt;a href=&quot;#uv-sync--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-sync--version&quot;&gt;&lt;a href=&quot;#uv-sync--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv lock

Update the project's lockfile.

If the project lockfile (`uv.lock`) does not exist, it will be created. If a lockfile is present, its contents will be used as preferences for the resolution.

If there are no changes to the project's dependencies, locking will have no effect unless the `--upgrade` flag is provided.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv lock [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-lock--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-lock--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--cache-dir&quot;&gt;&lt;a href=&quot;#uv-lock--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--check&quot;&gt;&lt;a href=&quot;#uv-lock--check&quot;&gt;&lt;code&gt;--check&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--locked&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Check if the lockfile is up-to-date.&lt;/p&gt;

&lt;p&gt;Asserts that the &lt;code&gt;uv.lock&lt;/code&gt; would remain unchanged after a resolution. If the lockfile is missing or needs to be updated, uv will exit with an error.&lt;/p&gt;

&lt;p&gt;Equivalent to &lt;code&gt;--locked&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LOCKED&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--check-exists&quot;&gt;&lt;a href=&quot;#uv-lock--check-exists&quot;&gt;&lt;code&gt;--check-exists&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--frozen&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Assert that a &lt;code&gt;uv.lock&lt;/code&gt; exists without checking if it is up-to-date.&lt;/p&gt;

&lt;p&gt;Equivalent to &lt;code&gt;--frozen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FROZEN&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--color&quot;&gt;&lt;a href=&quot;#uv-lock--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--config-file&quot;&gt;&lt;a href=&quot;#uv-lock--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--config-setting&quot;&gt;&lt;a href=&quot;#uv-lock--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--default-index&quot;&gt;&lt;a href=&quot;#uv-lock--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--directory&quot;&gt;&lt;a href=&quot;#uv-lock--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--dry-run&quot;&gt;&lt;a href=&quot;#uv-lock--dry-run&quot;&gt;&lt;code&gt;--dry-run&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Perform a dry run, without writing the lockfile.&lt;/p&gt;

&lt;p&gt;In dry-run mode, uv will resolve the project&amp;#8217;s dependencies and report on the resulting changes, but will not write the lockfile to disk.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-lock--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-lock--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--find-links&quot;&gt;&lt;a href=&quot;#uv-lock--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-lock--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--help&quot;&gt;&lt;a href=&quot;#uv-lock--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--index&quot;&gt;&lt;a href=&quot;#uv-lock--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--index-strategy&quot;&gt;&lt;a href=&quot;#uv-lock--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--index-url&quot;&gt;&lt;a href=&quot;#uv-lock--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-lock--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--link-mode&quot;&gt;&lt;a href=&quot;#uv-lock--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;This option is only used when building source distributions.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--managed-python&quot;&gt;&lt;a href=&quot;#uv-lock--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--native-tls&quot;&gt;&lt;a href=&quot;#uv-lock--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-binary&quot;&gt;&lt;a href=&quot;#uv-lock--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-lock--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-build&quot;&gt;&lt;a href=&quot;#uv-lock--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-lock--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-lock--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-build-package&quot;&gt;&lt;a href=&quot;#uv-lock--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-cache&quot;&gt;&lt;a href=&quot;#uv-lock--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-config&quot;&gt;&lt;a href=&quot;#uv-lock--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-index&quot;&gt;&lt;a href=&quot;#uv-lock--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-lock--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-progress&quot;&gt;&lt;a href=&quot;#uv-lock--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-lock--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--no-sources&quot;&gt;&lt;a href=&quot;#uv-lock--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--offline&quot;&gt;&lt;a href=&quot;#uv-lock--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--prerelease&quot;&gt;&lt;a href=&quot;#uv-lock--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--project&quot;&gt;&lt;a href=&quot;#uv-lock--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--python&quot;&gt;&lt;a href=&quot;#uv-lock--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use during resolution.&lt;/p&gt;

&lt;p&gt;A Python interpreter is required for building source distributions to determine package metadata when there are not wheels.&lt;/p&gt;

&lt;p&gt;The interpreter is also used as the fallback value for the minimum Python version if &lt;code&gt;requires-python&lt;/code&gt; is not set.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--quiet&quot;&gt;&lt;a href=&quot;#uv-lock--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--refresh&quot;&gt;&lt;a href=&quot;#uv-lock--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--refresh-package&quot;&gt;&lt;a href=&quot;#uv-lock--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--resolution&quot;&gt;&lt;a href=&quot;#uv-lock--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-lock--script&quot;&gt;&lt;a href=&quot;#uv-lock--script&quot;&gt;&lt;code&gt;--script&lt;/code&gt;&lt;/a&gt; &lt;i&gt;script&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Lock the specified Python script, rather than the current project.&lt;/p&gt;

&lt;p&gt;If provided, uv will lock the script (based on its inline metadata table, in adherence with PEP 723) to a &lt;code&gt;.lock&lt;/code&gt; file adjacent to the script itself.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--upgrade&quot;&gt;&lt;a href=&quot;#uv-lock--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-lock--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--verbose&quot;&gt;&lt;a href=&quot;#uv-lock--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-lock--version&quot;&gt;&lt;a href=&quot;#uv-lock--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv export

Export the project's lockfile to an alternate format.

At present, only `requirements-txt` is supported.

The project is re-locked before exporting unless the `--locked` or `--frozen` flag is provided.

uv will search for a project in the current directory or any parent directory. If a project cannot be found, uv will exit with an error.

If operating in a workspace, the root will be exported by default; however, a specific member can be selected using the `--package` option.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv export [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-export--all-extras&quot;&gt;&lt;a href=&quot;#uv-export--all-extras&quot;&gt;&lt;code&gt;--all-extras&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include all optional dependencies&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--all-groups&quot;&gt;&lt;a href=&quot;#uv-export--all-groups&quot;&gt;&lt;code&gt;--all-groups&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include dependencies from all dependency groups.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--no-group&lt;/code&gt; can be used to exclude specific groups.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--all-packages&quot;&gt;&lt;a href=&quot;#uv-export--all-packages&quot;&gt;&lt;code&gt;--all-packages&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Export the entire workspace.&lt;/p&gt;

&lt;p&gt;The dependencies for all workspace members will be included in the exported requirements file.&lt;/p&gt;

&lt;p&gt;Any extras or groups specified via &lt;code&gt;--extra&lt;/code&gt;, &lt;code&gt;--group&lt;/code&gt;, or related options will be applied to all workspace members.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-export--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--cache-dir&quot;&gt;&lt;a href=&quot;#uv-export--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--color&quot;&gt;&lt;a href=&quot;#uv-export--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--config-file&quot;&gt;&lt;a href=&quot;#uv-export--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--config-setting&quot;&gt;&lt;a href=&quot;#uv-export--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--default-index&quot;&gt;&lt;a href=&quot;#uv-export--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--directory&quot;&gt;&lt;a href=&quot;#uv-export--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-export--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--extra&quot;&gt;&lt;a href=&quot;#uv-export--extra&quot;&gt;&lt;code&gt;--extra&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include optional dependencies from the specified extra name.&lt;/p&gt;

&lt;p&gt;May be provided more than once.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-export--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--find-links&quot;&gt;&lt;a href=&quot;#uv-export--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-export--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--format&quot;&gt;&lt;a href=&quot;#uv-export--format&quot;&gt;&lt;code&gt;--format&lt;/code&gt;&lt;/a&gt; &lt;i&gt;format&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The format to which &lt;code&gt;uv.lock&lt;/code&gt; should be exported.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;requirements-txt&lt;/code&gt; is supported.&lt;/p&gt;

&lt;p&gt;[default: requirements-txt]&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requirements-txt&lt;/code&gt;:  Export in &lt;code&gt;requirements.txt&lt;/code&gt; format&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--frozen&quot;&gt;&lt;a href=&quot;#uv-export--frozen&quot;&gt;&lt;code&gt;--frozen&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not update the &lt;code&gt;uv.lock&lt;/code&gt; before exporting.&lt;/p&gt;

&lt;p&gt;If a &lt;code&gt;uv.lock&lt;/code&gt; does not exist, uv will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FROZEN&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--group&quot;&gt;&lt;a href=&quot;#uv-export--group&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include dependencies from the specified dependency group.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--help&quot;&gt;&lt;a href=&quot;#uv-export--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--index&quot;&gt;&lt;a href=&quot;#uv-export--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--index-strategy&quot;&gt;&lt;a href=&quot;#uv-export--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--index-url&quot;&gt;&lt;a href=&quot;#uv-export--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-export--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--link-mode&quot;&gt;&lt;a href=&quot;#uv-export--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;This option is only used when building source distributions.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--locked&quot;&gt;&lt;a href=&quot;#uv-export--locked&quot;&gt;&lt;code&gt;--locked&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Assert that the &lt;code&gt;uv.lock&lt;/code&gt; will remain unchanged.&lt;/p&gt;

&lt;p&gt;Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LOCKED&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--managed-python&quot;&gt;&lt;a href=&quot;#uv-export--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--native-tls&quot;&gt;&lt;a href=&quot;#uv-export--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-annotate&quot;&gt;&lt;a href=&quot;#uv-export--no-annotate&quot;&gt;&lt;code&gt;--no-annotate&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Exclude comment annotations indicating the source of each package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-binary&quot;&gt;&lt;a href=&quot;#uv-export--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-export--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-build&quot;&gt;&lt;a href=&quot;#uv-export--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-export--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-export--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-build-package&quot;&gt;&lt;a href=&quot;#uv-export--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-cache&quot;&gt;&lt;a href=&quot;#uv-export--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-config&quot;&gt;&lt;a href=&quot;#uv-export--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-default-groups&quot;&gt;&lt;a href=&quot;#uv-export--no-default-groups&quot;&gt;&lt;code&gt;--no-default-groups&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the default dependency groups.&lt;/p&gt;

&lt;p&gt;uv includes the groups defined in &lt;code&gt;tool.uv.default-groups&lt;/code&gt; by default. This disables that option, however, specific groups can still be included with &lt;code&gt;--group&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-dev&quot;&gt;&lt;a href=&quot;#uv-export--no-dev&quot;&gt;&lt;code&gt;--no-dev&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable the development dependency group.&lt;/p&gt;

&lt;p&gt;This option is an alias of &lt;code&gt;--no-group dev&lt;/code&gt;. See &lt;code&gt;--no-default-groups&lt;/code&gt; to disable all default groups instead.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-editable&quot;&gt;&lt;a href=&quot;#uv-export--no-editable&quot;&gt;&lt;code&gt;--no-editable&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install any editable dependencies, including the project and any workspace members, as non-editable&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-emit-package&quot;&gt;&lt;a href=&quot;#uv-export--no-emit-package&quot;&gt;&lt;code&gt;--no-emit-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-install-package&lt;/code&gt; &lt;i&gt;no-emit-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not emit the given package(s).&lt;/p&gt;

&lt;p&gt;By default, all of the project&amp;#8217;s dependencies are included in the exported requirements file. The &lt;code&gt;--no-install-package&lt;/code&gt; option allows exclusion of specific packages.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-emit-project&quot;&gt;&lt;a href=&quot;#uv-export--no-emit-project&quot;&gt;&lt;code&gt;--no-emit-project&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-install-project&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not emit the current project.&lt;/p&gt;

&lt;p&gt;By default, the current project is included in the exported requirements file with all of its dependencies. The &lt;code&gt;--no-emit-project&lt;/code&gt; option allows the project to be excluded, but all of its dependencies to remain included.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-emit-workspace&quot;&gt;&lt;a href=&quot;#uv-export--no-emit-workspace&quot;&gt;&lt;code&gt;--no-emit-workspace&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-install-workspace&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not emit any workspace members, including the root project.&lt;/p&gt;

&lt;p&gt;By default, all workspace members and their dependencies are included in the exported requirements file, with all of their dependencies. The &lt;code&gt;--no-emit-workspace&lt;/code&gt; option allows exclusion of all the workspace members while retaining their dependencies.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-extra&quot;&gt;&lt;a href=&quot;#uv-export--no-extra&quot;&gt;&lt;code&gt;--no-extra&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-extra&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Exclude the specified optional dependencies, if &lt;code&gt;--all-extras&lt;/code&gt; is supplied.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-group&quot;&gt;&lt;a href=&quot;#uv-export--no-group&quot;&gt;&lt;code&gt;--no-group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable the specified dependency group.&lt;/p&gt;

&lt;p&gt;This options always takes precedence over default groups, &lt;code&gt;--all-groups&lt;/code&gt;, and &lt;code&gt;--group&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-hashes&quot;&gt;&lt;a href=&quot;#uv-export--no-hashes&quot;&gt;&lt;code&gt;--no-hashes&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Omit hashes in the generated output&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-header&quot;&gt;&lt;a href=&quot;#uv-export--no-header&quot;&gt;&lt;code&gt;--no-header&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Exclude the comment header at the top of the generated output file&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-index&quot;&gt;&lt;a href=&quot;#uv-export--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-export--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-progress&quot;&gt;&lt;a href=&quot;#uv-export--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-export--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--no-sources&quot;&gt;&lt;a href=&quot;#uv-export--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--offline&quot;&gt;&lt;a href=&quot;#uv-export--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--only-dev&quot;&gt;&lt;a href=&quot;#uv-export--only-dev&quot;&gt;&lt;code&gt;--only-dev&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only include the development dependency group.&lt;/p&gt;

&lt;p&gt;The project and its dependencies will be omitted.&lt;/p&gt;

&lt;p&gt;This option is an alias for &lt;code&gt;--only-group dev&lt;/code&gt;. Implies &lt;code&gt;--no-default-groups&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--only-group&quot;&gt;&lt;a href=&quot;#uv-export--only-group&quot;&gt;&lt;code&gt;--only-group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;only-group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only include dependencies from the specified dependency group.&lt;/p&gt;

&lt;p&gt;The project and its dependencies will be omitted.&lt;/p&gt;

&lt;p&gt;May be provided multiple times. Implies &lt;code&gt;--no-default-groups&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--output-file&quot;&gt;&lt;a href=&quot;#uv-export--output-file&quot;&gt;&lt;code&gt;--output-file&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-o&lt;/code&gt; &lt;i&gt;output-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Write the exported requirements to the given file&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--package&quot;&gt;&lt;a href=&quot;#uv-export--package&quot;&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Export the dependencies for a specific package in the workspace.&lt;/p&gt;

&lt;p&gt;If the workspace member does not exist, uv will exit with an error.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--prerelease&quot;&gt;&lt;a href=&quot;#uv-export--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--project&quot;&gt;&lt;a href=&quot;#uv-export--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--prune&quot;&gt;&lt;a href=&quot;#uv-export--prune&quot;&gt;&lt;code&gt;--prune&lt;/code&gt;&lt;/a&gt; &lt;i&gt;package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Prune the given package from the dependency tree.&lt;/p&gt;

&lt;p&gt;Pruned packages will be excluded from the exported requirements file, as will any dependencies that are no longer required after the pruned package is removed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--python&quot;&gt;&lt;a href=&quot;#uv-export--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use during resolution.&lt;/p&gt;

&lt;p&gt;A Python interpreter is required for building source distributions to determine package metadata when there are not wheels.&lt;/p&gt;

&lt;p&gt;The interpreter is also used as the fallback value for the minimum Python version if &lt;code&gt;requires-python&lt;/code&gt; is not set.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--quiet&quot;&gt;&lt;a href=&quot;#uv-export--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--refresh&quot;&gt;&lt;a href=&quot;#uv-export--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--refresh-package&quot;&gt;&lt;a href=&quot;#uv-export--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--resolution&quot;&gt;&lt;a href=&quot;#uv-export--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-export--script&quot;&gt;&lt;a href=&quot;#uv-export--script&quot;&gt;&lt;code&gt;--script&lt;/code&gt;&lt;/a&gt; &lt;i&gt;script&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Export the dependencies for the specified PEP 723 Python script, rather than the current project.&lt;/p&gt;

&lt;p&gt;If provided, uv will resolve the dependencies based on its inline metadata table, in adherence with PEP 723.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--upgrade&quot;&gt;&lt;a href=&quot;#uv-export--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-export--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--verbose&quot;&gt;&lt;a href=&quot;#uv-export--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-export--version&quot;&gt;&lt;a href=&quot;#uv-export--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv tree

Display the project's dependency tree

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv tree [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tree--all-groups&quot;&gt;&lt;a href=&quot;#uv-tree--all-groups&quot;&gt;&lt;code&gt;--all-groups&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include dependencies from all dependency groups.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--no-group&lt;/code&gt; can be used to exclude specific groups.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-tree--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--cache-dir&quot;&gt;&lt;a href=&quot;#uv-tree--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--color&quot;&gt;&lt;a href=&quot;#uv-tree--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--config-file&quot;&gt;&lt;a href=&quot;#uv-tree--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--config-setting&quot;&gt;&lt;a href=&quot;#uv-tree--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--default-index&quot;&gt;&lt;a href=&quot;#uv-tree--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--depth&quot;&gt;&lt;a href=&quot;#uv-tree--depth&quot;&gt;&lt;code&gt;--depth&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-d&lt;/code&gt; &lt;i&gt;depth&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Maximum display depth of the dependency tree&lt;/p&gt;

&lt;p&gt;[default: 255]&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--directory&quot;&gt;&lt;a href=&quot;#uv-tree--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-tree--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-tree--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--find-links&quot;&gt;&lt;a href=&quot;#uv-tree--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-tree--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--frozen&quot;&gt;&lt;a href=&quot;#uv-tree--frozen&quot;&gt;&lt;code&gt;--frozen&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the requirements without locking the project.&lt;/p&gt;

&lt;p&gt;If the lockfile is missing, uv will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FROZEN&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--group&quot;&gt;&lt;a href=&quot;#uv-tree--group&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include dependencies from the specified dependency group.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--help&quot;&gt;&lt;a href=&quot;#uv-tree--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--index&quot;&gt;&lt;a href=&quot;#uv-tree--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--index-strategy&quot;&gt;&lt;a href=&quot;#uv-tree--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--index-url&quot;&gt;&lt;a href=&quot;#uv-tree--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--invert&quot;&gt;&lt;a href=&quot;#uv-tree--invert&quot;&gt;&lt;code&gt;--invert&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--reverse&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-tree--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--link-mode&quot;&gt;&lt;a href=&quot;#uv-tree--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;This option is only used when building source distributions.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--locked&quot;&gt;&lt;a href=&quot;#uv-tree--locked&quot;&gt;&lt;code&gt;--locked&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Assert that the &lt;code&gt;uv.lock&lt;/code&gt; will remain unchanged.&lt;/p&gt;

&lt;p&gt;Requires that the lockfile is up-to-date. If the lockfile is missing or needs to be updated, uv will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LOCKED&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--managed-python&quot;&gt;&lt;a href=&quot;#uv-tree--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--native-tls&quot;&gt;&lt;a href=&quot;#uv-tree--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-binary&quot;&gt;&lt;a href=&quot;#uv-tree--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-tree--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-build&quot;&gt;&lt;a href=&quot;#uv-tree--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-tree--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-tree--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-build-package&quot;&gt;&lt;a href=&quot;#uv-tree--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-cache&quot;&gt;&lt;a href=&quot;#uv-tree--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-config&quot;&gt;&lt;a href=&quot;#uv-tree--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-dedupe&quot;&gt;&lt;a href=&quot;#uv-tree--no-dedupe&quot;&gt;&lt;code&gt;--no-dedupe&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-default-groups&quot;&gt;&lt;a href=&quot;#uv-tree--no-default-groups&quot;&gt;&lt;code&gt;--no-default-groups&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the default dependency groups.&lt;/p&gt;

&lt;p&gt;uv includes the groups defined in &lt;code&gt;tool.uv.default-groups&lt;/code&gt; by default. This disables that option, however, specific groups can still be included with &lt;code&gt;--group&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-dev&quot;&gt;&lt;a href=&quot;#uv-tree--no-dev&quot;&gt;&lt;code&gt;--no-dev&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable the development dependency group.&lt;/p&gt;

&lt;p&gt;This option is an alias of &lt;code&gt;--no-group dev&lt;/code&gt;. See &lt;code&gt;--no-default-groups&lt;/code&gt; to disable all default groups instead.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-group&quot;&gt;&lt;a href=&quot;#uv-tree--no-group&quot;&gt;&lt;code&gt;--no-group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable the specified dependency group.&lt;/p&gt;

&lt;p&gt;This options always takes precedence over default groups, &lt;code&gt;--all-groups&lt;/code&gt;, and &lt;code&gt;--group&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-index&quot;&gt;&lt;a href=&quot;#uv-tree--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-tree--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-progress&quot;&gt;&lt;a href=&quot;#uv-tree--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-tree--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--no-sources&quot;&gt;&lt;a href=&quot;#uv-tree--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--offline&quot;&gt;&lt;a href=&quot;#uv-tree--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--only-dev&quot;&gt;&lt;a href=&quot;#uv-tree--only-dev&quot;&gt;&lt;code&gt;--only-dev&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only include the development dependency group.&lt;/p&gt;

&lt;p&gt;The project and its dependencies will be omitted.&lt;/p&gt;

&lt;p&gt;This option is an alias for &lt;code&gt;--only-group dev&lt;/code&gt;. Implies &lt;code&gt;--no-default-groups&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--only-group&quot;&gt;&lt;a href=&quot;#uv-tree--only-group&quot;&gt;&lt;code&gt;--only-group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;only-group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only include dependencies from the specified dependency group.&lt;/p&gt;

&lt;p&gt;The project and its dependencies will be omitted.&lt;/p&gt;

&lt;p&gt;May be provided multiple times. Implies &lt;code&gt;--no-default-groups&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--outdated&quot;&gt;&lt;a href=&quot;#uv-tree--outdated&quot;&gt;&lt;code&gt;--outdated&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the latest available version of each package in the tree&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--package&quot;&gt;&lt;a href=&quot;#uv-tree--package&quot;&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display only the specified packages&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--prerelease&quot;&gt;&lt;a href=&quot;#uv-tree--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--project&quot;&gt;&lt;a href=&quot;#uv-tree--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--prune&quot;&gt;&lt;a href=&quot;#uv-tree--prune&quot;&gt;&lt;code&gt;--prune&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prune&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Prune the given package from the display of the dependency tree&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--python&quot;&gt;&lt;a href=&quot;#uv-tree--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use for locking and filtering.&lt;/p&gt;

&lt;p&gt;By default, the tree is filtered to match the platform as reported by the Python interpreter. Use &lt;code&gt;--universal&lt;/code&gt; to display the tree for all platforms, or use &lt;code&gt;--python-version&lt;/code&gt; or &lt;code&gt;--python-platform&lt;/code&gt; to override a subset of markers.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--python-platform&quot;&gt;&lt;a href=&quot;#uv-tree--python-platform&quot;&gt;&lt;code&gt;--python-platform&lt;/code&gt;&lt;/a&gt; &lt;i&gt;python-platform&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The platform to use when filtering the tree.&lt;/p&gt;

&lt;p&gt;For example, pass &lt;code&gt;--platform windows&lt;/code&gt; to display the dependencies that would be included when installing on Windows.&lt;/p&gt;

&lt;p&gt;Represented as a &amp;quot;target triple&amp;quot;, a string that describes the target platform in terms of its CPU, vendor, and operating system name, like &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; or &lt;code&gt;aarch64-apple-darwin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;windows&lt;/code&gt;:  An alias for &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;, the default target for Windows&lt;/li&gt;

&lt;li&gt;&lt;code&gt;linux&lt;/code&gt;:  An alias for &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;, the default target for Linux&lt;/li&gt;

&lt;li&gt;&lt;code&gt;macos&lt;/code&gt;:  An alias for &lt;code&gt;aarch64-apple-darwin&lt;/code&gt;, the default target for macOS&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;:  A 64-bit x86 Windows target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;i686-pc-windows-msvc&lt;/code&gt;:  A 32-bit x86 Windows target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;:  An x86 Linux target. Equivalent to &lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-apple-darwin&lt;/code&gt;:  An ARM-based macOS target, as seen on Apple Silicon devices&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-apple-darwin&lt;/code&gt;:  An x86 macOS target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-gnu&lt;/code&gt;:  An ARM64 Linux target. Equivalent to &lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-musl&lt;/code&gt;:  An ARM64 Linux target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; Linux target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux2014&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux2014&lt;/code&gt; platform. Equivalent to &lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_17&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_28&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_28&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_31&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_31&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_32&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_32&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_33&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_33&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_34&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_34&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_35&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_35&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_36&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_36&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_37&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_37&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_38&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_38&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_39&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_39&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_40&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_40&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux2014&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux2014&lt;/code&gt; platform. Equivalent to &lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_17&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_28&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_28&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_31&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_31&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_32&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_32&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_33&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_33&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_34&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_34&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_35&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_35&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_36&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_36&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_37&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_37&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_38&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_38&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_39&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_39&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_40&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_40&lt;/code&gt; platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--python-version&quot;&gt;&lt;a href=&quot;#uv-tree--python-version&quot;&gt;&lt;code&gt;--python-version&lt;/code&gt;&lt;/a&gt; &lt;i&gt;python-version&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python version to use when filtering the tree.&lt;/p&gt;

&lt;p&gt;For example, pass &lt;code&gt;--python-version 3.10&lt;/code&gt; to display the dependencies that would be included when installing on Python 3.10.&lt;/p&gt;

&lt;p&gt;Defaults to the version of the discovered Python interpreter.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--quiet&quot;&gt;&lt;a href=&quot;#uv-tree--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--resolution&quot;&gt;&lt;a href=&quot;#uv-tree--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tree--script&quot;&gt;&lt;a href=&quot;#uv-tree--script&quot;&gt;&lt;code&gt;--script&lt;/code&gt;&lt;/a&gt; &lt;i&gt;script&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the dependency tree the specified PEP 723 Python script, rather than the current project.&lt;/p&gt;

&lt;p&gt;If provided, uv will resolve the dependencies based on its inline metadata table, in adherence with PEP 723.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--universal&quot;&gt;&lt;a href=&quot;#uv-tree--universal&quot;&gt;&lt;code&gt;--universal&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show a platform-independent dependency tree.&lt;/p&gt;

&lt;p&gt;Shows resolved package versions for all Python versions and platforms, rather than filtering to those that are relevant for the current environment.&lt;/p&gt;

&lt;p&gt;Multiple versions may be shown for a each package.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--upgrade&quot;&gt;&lt;a href=&quot;#uv-tree--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-tree--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--verbose&quot;&gt;&lt;a href=&quot;#uv-tree--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tree--version&quot;&gt;&lt;a href=&quot;#uv-tree--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv tool

Run and install commands provided by Python packages

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv tool [OPTIONS] &lt;COMMAND&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Commands&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt&gt;&lt;a href=&quot;#uv-tool-run&quot;&gt;&lt;code&gt;uv tool run&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run a command provided by a Python package&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-tool-install&quot;&gt;&lt;code&gt;uv tool install&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install commands provided by a Python package&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-tool-upgrade&quot;&gt;&lt;code&gt;uv tool upgrade&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Upgrade installed tools&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-tool-list&quot;&gt;&lt;code&gt;uv tool list&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List installed tools&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-tool-uninstall&quot;&gt;&lt;code&gt;uv tool uninstall&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Uninstall a tool&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-tool-update-shell&quot;&gt;&lt;code&gt;uv tool update-shell&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ensure that the tool executable directory is on the &lt;code&gt;PATH&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-tool-dir&quot;&gt;&lt;code&gt;uv tool dir&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the path to the uv tools directory&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

### uv tool run

Run a command provided by a Python package.

By default, the package to install is assumed to match the command name.

The name of the command can include an exact version in the format `&lt;package&gt;@&lt;version&gt;`, e.g., `uv tool run ruff@0.3.0`. If more complex version specification is desired or if the command is provided by a different package, use `--from`.

`uvx` can be used to invoke Python, e.g., with `uvx python` or `uvx python@&lt;version&gt;`. A Python interpreter will be started in an isolated virtual environment.

If the tool was previously installed, i.e., via `uv tool install`, the installed version will be used unless a version is requested or the `--isolated` flag is used.

`uvx` is provided as a convenient alias for `uv tool run`, their behavior is identical.

If no command is provided, the installed tools are displayed.

Packages are installed into an ephemeral virtual environment in the uv cache directory.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv tool run [OPTIONS] [COMMAND]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tool-run--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-tool-run--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--build-constraints&quot;&gt;&lt;a href=&quot;#uv-tool-run--build-constraints&quot;&gt;&lt;code&gt;--build-constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--build-constraint&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt; &lt;i&gt;build-constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain build dependencies using the given requirements files when building source distributions.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the installation of that package.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_BUILD_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--cache-dir&quot;&gt;&lt;a href=&quot;#uv-tool-run--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--color&quot;&gt;&lt;a href=&quot;#uv-tool-run--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--compile-bytecode&quot;&gt;&lt;a href=&quot;#uv-tool-run--compile-bytecode&quot;&gt;&lt;code&gt;--compile-bytecode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--compile&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Compile Python files to bytecode after installation.&lt;/p&gt;

&lt;p&gt;By default, uv does not compile Python (&lt;code&gt;.py&lt;/code&gt;) files to bytecode (&lt;code&gt;__pycache__/*.pyc&lt;/code&gt;); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.&lt;/p&gt;

&lt;p&gt;When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_COMPILE_BYTECODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--config-file&quot;&gt;&lt;a href=&quot;#uv-tool-run--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--config-setting&quot;&gt;&lt;a href=&quot;#uv-tool-run--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--constraints&quot;&gt;&lt;a href=&quot;#uv-tool-run--constraints&quot;&gt;&lt;code&gt;--constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--constraint&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; &lt;i&gt;constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain versions using the given requirements files.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the installation of that package.&lt;/p&gt;

&lt;p&gt;This is equivalent to pip&amp;#8217;s &lt;code&gt;--constraint&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--default-index&quot;&gt;&lt;a href=&quot;#uv-tool-run--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--directory&quot;&gt;&lt;a href=&quot;#uv-tool-run--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--env-file&quot;&gt;&lt;a href=&quot;#uv-tool-run--env-file&quot;&gt;&lt;code&gt;--env-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;env-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Load environment variables from a &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times, with subsequent files overriding values defined in previous files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_ENV_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-tool-run--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-tool-run--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--find-links&quot;&gt;&lt;a href=&quot;#uv-tool-run--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-tool-run--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--from&quot;&gt;&lt;a href=&quot;#uv-tool-run--from&quot;&gt;&lt;code&gt;--from&lt;/code&gt;&lt;/a&gt; &lt;i&gt;from&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use the given package to provide the command.&lt;/p&gt;

&lt;p&gt;By default, the package name is assumed to match the command name.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--help&quot;&gt;&lt;a href=&quot;#uv-tool-run--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--index&quot;&gt;&lt;a href=&quot;#uv-tool-run--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--index-strategy&quot;&gt;&lt;a href=&quot;#uv-tool-run--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--index-url&quot;&gt;&lt;a href=&quot;#uv-tool-run--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--isolated&quot;&gt;&lt;a href=&quot;#uv-tool-run--isolated&quot;&gt;&lt;code&gt;--isolated&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the tool in an isolated virtual environment, ignoring any already-installed tools&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-tool-run--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--link-mode&quot;&gt;&lt;a href=&quot;#uv-tool-run--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-run--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--native-tls&quot;&gt;&lt;a href=&quot;#uv-tool-run--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-binary&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-build&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-build-package&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-cache&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-config&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-env-file&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-env-file&quot;&gt;&lt;code&gt;--no-env-file&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading environment variables from a &lt;code&gt;.env&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_ENV_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-index&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-progress&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--no-sources&quot;&gt;&lt;a href=&quot;#uv-tool-run--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--offline&quot;&gt;&lt;a href=&quot;#uv-tool-run--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--overrides&quot;&gt;&lt;a href=&quot;#uv-tool-run--overrides&quot;&gt;&lt;code&gt;--overrides&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--override&lt;/code&gt; &lt;i&gt;overrides&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Override versions using the given requirements files.&lt;/p&gt;

&lt;p&gt;Overrides files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.&lt;/p&gt;

&lt;p&gt;While constraints are &lt;em&gt;additive&lt;/em&gt;, in that they&amp;#8217;re combined with the requirements of the constituent packages, overrides are &lt;em&gt;absolute&lt;/em&gt;, in that they completely replace the requirements of the constituent packages.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OVERRIDE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--prerelease&quot;&gt;&lt;a href=&quot;#uv-tool-run--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--project&quot;&gt;&lt;a href=&quot;#uv-tool-run--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--python&quot;&gt;&lt;a href=&quot;#uv-tool-run--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use to build the run environment.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--quiet&quot;&gt;&lt;a href=&quot;#uv-tool-run--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--refresh&quot;&gt;&lt;a href=&quot;#uv-tool-run--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--refresh-package&quot;&gt;&lt;a href=&quot;#uv-tool-run--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--reinstall&quot;&gt;&lt;a href=&quot;#uv-tool-run--reinstall&quot;&gt;&lt;code&gt;--reinstall&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--force-reinstall&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall all packages, regardless of whether they&amp;#8217;re already installed. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--reinstall-package&quot;&gt;&lt;a href=&quot;#uv-tool-run--reinstall-package&quot;&gt;&lt;code&gt;--reinstall-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;reinstall-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall a specific package, regardless of whether it&amp;#8217;s already installed. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--resolution&quot;&gt;&lt;a href=&quot;#uv-tool-run--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--upgrade&quot;&gt;&lt;a href=&quot;#uv-tool-run--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-tool-run--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--verbose&quot;&gt;&lt;a href=&quot;#uv-tool-run--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--version&quot;&gt;&lt;a href=&quot;#uv-tool-run--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--with&quot;&gt;&lt;a href=&quot;#uv-tool-run--with&quot;&gt;&lt;code&gt;--with&lt;/code&gt;&lt;/a&gt; &lt;i&gt;with&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run with the given packages installed&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--with-editable&quot;&gt;&lt;a href=&quot;#uv-tool-run--with-editable&quot;&gt;&lt;code&gt;--with-editable&lt;/code&gt;&lt;/a&gt; &lt;i&gt;with-editable&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run with the given packages installed in editable mode&lt;/p&gt;

&lt;p&gt;When used in a project, these dependencies will be layered on top of the uv tool&amp;#8217;s environment in a separate, ephemeral environment. These dependencies are allowed to conflict with those specified.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-run--with-requirements&quot;&gt;&lt;a href=&quot;#uv-tool-run--with-requirements&quot;&gt;&lt;code&gt;--with-requirements&lt;/code&gt;&lt;/a&gt; &lt;i&gt;with-requirements&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run with all packages listed in the given &lt;code&gt;requirements.txt&lt;/code&gt; files&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv tool install

Install commands provided by a Python package.

Packages are installed into an isolated virtual environment in the uv tools directory. The executables are linked the tool executable directory, which is determined according to the XDG standard and can be retrieved with `uv tool dir --bin`.

If the tool was previously installed, the existing tool will generally be replaced.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv tool install [OPTIONS] &lt;PACKAGE&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tool-install--package&quot;&gt;&lt;a href=&quot;#uv-tool-install--package&quot;&lt;code&gt;PACKAGE&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The package to install commands from&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tool-install--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-tool-install--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--build-constraints&quot;&gt;&lt;a href=&quot;#uv-tool-install--build-constraints&quot;&gt;&lt;code&gt;--build-constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--build-constraint&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt; &lt;i&gt;build-constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain build dependencies using the given requirements files when building source distributions.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the installation of that package.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_BUILD_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--cache-dir&quot;&gt;&lt;a href=&quot;#uv-tool-install--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--color&quot;&gt;&lt;a href=&quot;#uv-tool-install--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--compile-bytecode&quot;&gt;&lt;a href=&quot;#uv-tool-install--compile-bytecode&quot;&gt;&lt;code&gt;--compile-bytecode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--compile&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Compile Python files to bytecode after installation.&lt;/p&gt;

&lt;p&gt;By default, uv does not compile Python (&lt;code&gt;.py&lt;/code&gt;) files to bytecode (&lt;code&gt;__pycache__/*.pyc&lt;/code&gt;); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.&lt;/p&gt;

&lt;p&gt;When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_COMPILE_BYTECODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--config-file&quot;&gt;&lt;a href=&quot;#uv-tool-install--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--config-setting&quot;&gt;&lt;a href=&quot;#uv-tool-install--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--constraints&quot;&gt;&lt;a href=&quot;#uv-tool-install--constraints&quot;&gt;&lt;code&gt;--constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--constraint&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; &lt;i&gt;constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain versions using the given requirements files.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the installation of that package.&lt;/p&gt;

&lt;p&gt;This is equivalent to pip&amp;#8217;s &lt;code&gt;--constraint&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--default-index&quot;&gt;&lt;a href=&quot;#uv-tool-install--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--directory&quot;&gt;&lt;a href=&quot;#uv-tool-install--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--editable&quot;&gt;&lt;a href=&quot;#uv-tool-install--editable&quot;&gt;&lt;code&gt;--editable&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-e&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install the target package in editable mode, such that changes in the package&amp;#8217;s source directory are reflected without reinstallation&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-tool-install--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-tool-install--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--find-links&quot;&gt;&lt;a href=&quot;#uv-tool-install--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--force&quot;&gt;&lt;a href=&quot;#uv-tool-install--force&quot;&gt;&lt;code&gt;--force&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Force installation of the tool.&lt;/p&gt;

&lt;p&gt;Will replace any existing entry points with the same name in the executable directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-tool-install--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--help&quot;&gt;&lt;a href=&quot;#uv-tool-install--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--index&quot;&gt;&lt;a href=&quot;#uv-tool-install--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--index-strategy&quot;&gt;&lt;a href=&quot;#uv-tool-install--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--index-url&quot;&gt;&lt;a href=&quot;#uv-tool-install--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-tool-install--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--link-mode&quot;&gt;&lt;a href=&quot;#uv-tool-install--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-install--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--native-tls&quot;&gt;&lt;a href=&quot;#uv-tool-install--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-binary&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-build&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-build-package&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-cache&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-config&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-index&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-progress&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--no-sources&quot;&gt;&lt;a href=&quot;#uv-tool-install--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--offline&quot;&gt;&lt;a href=&quot;#uv-tool-install--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--overrides&quot;&gt;&lt;a href=&quot;#uv-tool-install--overrides&quot;&gt;&lt;code&gt;--overrides&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--override&lt;/code&gt; &lt;i&gt;overrides&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Override versions using the given requirements files.&lt;/p&gt;

&lt;p&gt;Overrides files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.&lt;/p&gt;

&lt;p&gt;While constraints are &lt;em&gt;additive&lt;/em&gt;, in that they&amp;#8217;re combined with the requirements of the constituent packages, overrides are &lt;em&gt;absolute&lt;/em&gt;, in that they completely replace the requirements of the constituent packages.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OVERRIDE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--prerelease&quot;&gt;&lt;a href=&quot;#uv-tool-install--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--project&quot;&gt;&lt;a href=&quot;#uv-tool-install--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--python&quot;&gt;&lt;a href=&quot;#uv-tool-install--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use to build the tool environment.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--quiet&quot;&gt;&lt;a href=&quot;#uv-tool-install--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--refresh&quot;&gt;&lt;a href=&quot;#uv-tool-install--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--refresh-package&quot;&gt;&lt;a href=&quot;#uv-tool-install--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--reinstall&quot;&gt;&lt;a href=&quot;#uv-tool-install--reinstall&quot;&gt;&lt;code&gt;--reinstall&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--force-reinstall&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall all packages, regardless of whether they&amp;#8217;re already installed. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--reinstall-package&quot;&gt;&lt;a href=&quot;#uv-tool-install--reinstall-package&quot;&gt;&lt;code&gt;--reinstall-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;reinstall-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall a specific package, regardless of whether it&amp;#8217;s already installed. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--resolution&quot;&gt;&lt;a href=&quot;#uv-tool-install--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--upgrade&quot;&gt;&lt;a href=&quot;#uv-tool-install--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-tool-install--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--verbose&quot;&gt;&lt;a href=&quot;#uv-tool-install--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--version&quot;&gt;&lt;a href=&quot;#uv-tool-install--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--with&quot;&gt;&lt;a href=&quot;#uv-tool-install--with&quot;&gt;&lt;code&gt;--with&lt;/code&gt;&lt;/a&gt; &lt;i&gt;with&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include the following extra requirements&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--with-editable&quot;&gt;&lt;a href=&quot;#uv-tool-install--with-editable&quot;&gt;&lt;code&gt;--with-editable&lt;/code&gt;&lt;/a&gt; &lt;i&gt;with-editable&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include the given packages in editable mode&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-install--with-requirements&quot;&gt;&lt;a href=&quot;#uv-tool-install--with-requirements&quot;&gt;&lt;code&gt;--with-requirements&lt;/code&gt;&lt;/a&gt; &lt;i&gt;with-requirements&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run all requirements listed in the given &lt;code&gt;requirements.txt&lt;/code&gt; files&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv tool upgrade

Upgrade installed tools.

If a tool was installed with version constraints, they will be respected on upgrade ‚Äî to upgrade a tool beyond the originally provided constraints, use `uv tool install` again.

If a tool was installed with specific settings, they will be respected on upgraded. For example, if `--prereleases allow` was provided during installation, it will continue to be respected in upgrades.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv tool upgrade [OPTIONS] &lt;NAME&gt;...
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tool-upgrade--name&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--name&quot;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The name of the tool to upgrade, along with an optional version specifier&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tool-upgrade--all&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--all&quot;&gt;&lt;code&gt;--all&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Upgrade all tools&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--cache-dir&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--color&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--compile-bytecode&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--compile-bytecode&quot;&gt;&lt;code&gt;--compile-bytecode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--compile&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Compile Python files to bytecode after installation.&lt;/p&gt;

&lt;p&gt;By default, uv does not compile Python (&lt;code&gt;.py&lt;/code&gt;) files to bytecode (&lt;code&gt;__pycache__/*.pyc&lt;/code&gt;); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.&lt;/p&gt;

&lt;p&gt;When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_COMPILE_BYTECODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--config-file&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--config-setting&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--default-index&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--directory&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--find-links&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--help&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--index&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--index-strategy&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--index-url&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--link-mode&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--native-tls&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-binary&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-build&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-build-package&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-cache&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-config&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-index&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-progress&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--no-sources&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--offline&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--prerelease&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--project&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--python&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Upgrade a tool, and specify it to use the given Python interpreter to build its environment. Use with &lt;code&gt;--all&lt;/code&gt; to apply to all tools.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--quiet&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--reinstall&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--reinstall&quot;&gt;&lt;code&gt;--reinstall&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--force-reinstall&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall all packages, regardless of whether they&amp;#8217;re already installed. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--reinstall-package&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--reinstall-package&quot;&gt;&lt;code&gt;--reinstall-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;reinstall-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall a specific package, regardless of whether it&amp;#8217;s already installed. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--resolution&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--verbose&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-upgrade--version&quot;&gt;&lt;a href=&quot;#uv-tool-upgrade--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv tool list

List installed tools

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv tool list [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tool-list--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-tool-list--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--cache-dir&quot;&gt;&lt;a href=&quot;#uv-tool-list--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--color&quot;&gt;&lt;a href=&quot;#uv-tool-list--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--config-file&quot;&gt;&lt;a href=&quot;#uv-tool-list--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--directory&quot;&gt;&lt;a href=&quot;#uv-tool-list--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--help&quot;&gt;&lt;a href=&quot;#uv-tool-list--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-list--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--native-tls&quot;&gt;&lt;a href=&quot;#uv-tool-list--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--no-cache&quot;&gt;&lt;a href=&quot;#uv-tool-list--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--no-config&quot;&gt;&lt;a href=&quot;#uv-tool-list--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-list--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--no-progress&quot;&gt;&lt;a href=&quot;#uv-tool-list--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--offline&quot;&gt;&lt;a href=&quot;#uv-tool-list--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--project&quot;&gt;&lt;a href=&quot;#uv-tool-list--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--quiet&quot;&gt;&lt;a href=&quot;#uv-tool-list--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--show-paths&quot;&gt;&lt;a href=&quot;#uv-tool-list--show-paths&quot;&gt;&lt;code&gt;--show-paths&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to display the path to each tool environment and installed executable&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--show-version-specifiers&quot;&gt;&lt;a href=&quot;#uv-tool-list--show-version-specifiers&quot;&gt;&lt;code&gt;--show-version-specifiers&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to display the version specifier(s) used to install each tool&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--verbose&quot;&gt;&lt;a href=&quot;#uv-tool-list--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-list--version&quot;&gt;&lt;a href=&quot;#uv-tool-list--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv tool uninstall

Uninstall a tool

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv tool uninstall [OPTIONS] &lt;NAME&gt;...
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tool-uninstall--name&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--name&quot;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The name of the tool to uninstall&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tool-uninstall--all&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--all&quot;&gt;&lt;code&gt;--all&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Uninstall all tools&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--cache-dir&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--color&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--config-file&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--directory&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--help&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--native-tls&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--no-cache&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--no-config&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--no-progress&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--offline&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--project&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--quiet&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--verbose&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-uninstall--version&quot;&gt;&lt;a href=&quot;#uv-tool-uninstall--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv tool update-shell

Ensure that the tool executable directory is on the `PATH`.

If the tool executable directory is not present on the `PATH`, uv will attempt to add it to the relevant shell configuration files.

If the shell configuration files already include a blurb to add the executable directory to the path, but the directory is not present on the `PATH`, uv will exit with an error.

The tool executable directory is determined according to the XDG standard and can be retrieved with `uv tool dir --bin`.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv tool update-shell [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tool-update-shell--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--cache-dir&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--color&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--config-file&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--directory&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--help&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--native-tls&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--no-cache&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--no-config&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--no-progress&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--offline&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--project&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--quiet&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--verbose&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-update-shell--version&quot;&gt;&lt;a href=&quot;#uv-tool-update-shell--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv tool dir

Show the path to the uv tools directory.

The tools directory is used to store environments and metadata for installed tools.

By default, tools are stored in the uv data directory at `$XDG_DATA_HOME/uv/tools` or `$HOME/.local/share/uv/tools` on Unix and `%APPDATA%\uv\data\tools` on Windows.

The tool installation directory may be overridden with `$UV_TOOL_DIR`.

To instead view the directory uv installs executables into, use the `--bin` flag.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv tool dir [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-tool-dir--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-tool-dir--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--bin&quot;&gt;&lt;a href=&quot;#uv-tool-dir--bin&quot;&gt;&lt;code&gt;--bin&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the directory into which &lt;code&gt;uv tool&lt;/code&gt; will install executables.&lt;/p&gt;

&lt;p&gt;By default, &lt;code&gt;uv tool dir&lt;/code&gt; shows the directory into which the tool Python environments themselves are installed, rather than the directory containing the linked executables.&lt;/p&gt;

&lt;p&gt;The tool executable directory is determined according to the XDG standard and is derived from the following environment variables, in order of preference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$UV_TOOL_BIN_DIR&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;$XDG_BIN_HOME&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;$XDG_DATA_HOME/../bin&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;$HOME/.local/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--cache-dir&quot;&gt;&lt;a href=&quot;#uv-tool-dir--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--color&quot;&gt;&lt;a href=&quot;#uv-tool-dir--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--config-file&quot;&gt;&lt;a href=&quot;#uv-tool-dir--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--directory&quot;&gt;&lt;a href=&quot;#uv-tool-dir--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--help&quot;&gt;&lt;a href=&quot;#uv-tool-dir--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-dir--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--native-tls&quot;&gt;&lt;a href=&quot;#uv-tool-dir--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--no-cache&quot;&gt;&lt;a href=&quot;#uv-tool-dir--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--no-config&quot;&gt;&lt;a href=&quot;#uv-tool-dir--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-tool-dir--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--no-progress&quot;&gt;&lt;a href=&quot;#uv-tool-dir--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-tool-dir--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--offline&quot;&gt;&lt;a href=&quot;#uv-tool-dir--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--project&quot;&gt;&lt;a href=&quot;#uv-tool-dir--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--quiet&quot;&gt;&lt;a href=&quot;#uv-tool-dir--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--verbose&quot;&gt;&lt;a href=&quot;#uv-tool-dir--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-tool-dir--version&quot;&gt;&lt;a href=&quot;#uv-tool-dir--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv python

Manage Python versions and installations

Generally, uv first searches for Python in a virtual environment, either active or in a
`.venv` directory in the current working directory or any parent directory. If a virtual
environment is not required, uv will then search for a Python interpreter. Python
interpreters are found by searching for Python executables in the `PATH` environment
variable.

On Windows, the registry is also searched for Python executables.

By default, uv will download Python if a version cannot be found. This behavior can be
disabled with the `--no-python-downloads` flag or the `python-downloads` setting.

The `--python` option allows requesting a different interpreter.

The following Python version request formats are supported:

- `&lt;version&gt;` e.g. `3`, `3.12`, `3.12.3`
- `&lt;version-specifier&gt;` e.g. `&gt;=3.12,&lt;3.13`
- `&lt;implementation&gt;` e.g. `cpython` or `cp`
- `&lt;implementation&gt;@&lt;version&gt;` e.g. `cpython@3.12`
- `&lt;implementation&gt;&lt;version&gt;` e.g. `cpython3.12` or `cp312`
- `&lt;implementation&gt;&lt;version-specifier&gt;` e.g. `cpython&gt;=3.12,&lt;3.13`
- `&lt;implementation&gt;-&lt;version&gt;-&lt;os&gt;-&lt;arch&gt;-&lt;libc&gt;` e.g. `cpython-3.12.3-macos-aarch64-none`

Additionally, a specific system Python interpreter can often be requested with:

- `&lt;executable-path&gt;` e.g. `/opt/homebrew/bin/python3`
- `&lt;executable-name&gt;` e.g. `mypython3`
- `&lt;install-dir&gt;` e.g. `/some/environment/`

When the `--python` option is used, normal discovery rules apply but discovered interpreters
are checked for compatibility with the request, e.g., if `pypy` is requested, uv will first
check if the virtual environment contains a PyPy interpreter then check if each executable
in the path is a PyPy interpreter.

uv supports discovering CPython, PyPy, and GraalPy interpreters. Unsupported interpreters
will be skipped during discovery. If an unsupported interpreter implementation is requested,
uv will exit with an error.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv python [OPTIONS] &lt;COMMAND&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Commands&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt&gt;&lt;a href=&quot;#uv-python-list&quot;&gt;&lt;code&gt;uv python list&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List the available Python installations&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-python-install&quot;&gt;&lt;code&gt;uv python install&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Download and install Python versions&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-python-find&quot;&gt;&lt;code&gt;uv python find&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Search for a Python installation&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-python-pin&quot;&gt;&lt;code&gt;uv python pin&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Pin to a specific Python version&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-python-dir&quot;&gt;&lt;code&gt;uv python dir&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the uv Python installation directory&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-python-uninstall&quot;&gt;&lt;code&gt;uv python uninstall&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Uninstall Python versions&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

### uv python list

List the available Python installations.

By default, installed Python versions and the downloads for latest available patch version of each supported Python major version are shown.

Use `--managed-python` to view only managed Python versions.

Use `--no-managed-python` to omit managed Python versions.

Use `--all-versions` to view all available patch versions.

Use `--only-installed` to omit available downloads.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv python list [OPTIONS] [REQUEST]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-list--request&quot;&gt;&lt;a href=&quot;#uv-python-list--request&quot;&lt;code&gt;REQUEST&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;A Python request to filter by.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; to view supported request formats.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-list--all-arches&quot;&gt;&lt;a href=&quot;#uv-python-list--all-arches&quot;&gt;&lt;code&gt;--all-arches&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--all_architectures&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List Python downloads for all architectures.&lt;/p&gt;

&lt;p&gt;By default, only downloads for the current architecture are shown.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--all-platforms&quot;&gt;&lt;a href=&quot;#uv-python-list--all-platforms&quot;&gt;&lt;code&gt;--all-platforms&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List Python downloads for all platforms.&lt;/p&gt;

&lt;p&gt;By default, only downloads for the current platform are shown.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--all-versions&quot;&gt;&lt;a href=&quot;#uv-python-list--all-versions&quot;&gt;&lt;code&gt;--all-versions&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List all Python versions, including old patch versions.&lt;/p&gt;

&lt;p&gt;By default, only the latest patch version is shown for each minor version.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-python-list--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--cache-dir&quot;&gt;&lt;a href=&quot;#uv-python-list--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--color&quot;&gt;&lt;a href=&quot;#uv-python-list--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--config-file&quot;&gt;&lt;a href=&quot;#uv-python-list--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--directory&quot;&gt;&lt;a href=&quot;#uv-python-list--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--help&quot;&gt;&lt;a href=&quot;#uv-python-list--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--managed-python&quot;&gt;&lt;a href=&quot;#uv-python-list--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--native-tls&quot;&gt;&lt;a href=&quot;#uv-python-list--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--no-cache&quot;&gt;&lt;a href=&quot;#uv-python-list--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--no-config&quot;&gt;&lt;a href=&quot;#uv-python-list--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-python-list--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--no-progress&quot;&gt;&lt;a href=&quot;#uv-python-list--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-python-list--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--offline&quot;&gt;&lt;a href=&quot;#uv-python-list--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--only-downloads&quot;&gt;&lt;a href=&quot;#uv-python-list--only-downloads&quot;&gt;&lt;code&gt;--only-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only show Python downloads, exclude installed distributions.&lt;/p&gt;

&lt;p&gt;By default, available downloads for the current platform are shown.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--only-installed&quot;&gt;&lt;a href=&quot;#uv-python-list--only-installed&quot;&gt;&lt;code&gt;--only-installed&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only show installed Python versions, exclude available downloads.&lt;/p&gt;

&lt;p&gt;By default, available downloads for the current platform are shown.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--output-format&quot;&gt;&lt;a href=&quot;#uv-python-list--output-format&quot;&gt;&lt;code&gt;--output-format&lt;/code&gt;&lt;/a&gt; &lt;i&gt;output-format&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Select the output format&lt;/p&gt;

&lt;p&gt;[default: text]&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt;:  Plain text (for humans)&lt;/li&gt;

&lt;li&gt;&lt;code&gt;json&lt;/code&gt;:  JSON (for computers)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--project&quot;&gt;&lt;a href=&quot;#uv-python-list--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--quiet&quot;&gt;&lt;a href=&quot;#uv-python-list--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--show-urls&quot;&gt;&lt;a href=&quot;#uv-python-list--show-urls&quot;&gt;&lt;code&gt;--show-urls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the URLs of available Python downloads.&lt;/p&gt;

&lt;p&gt;By default, these display as &lt;code&gt;&amp;lt;download available&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--verbose&quot;&gt;&lt;a href=&quot;#uv-python-list--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-list--version&quot;&gt;&lt;a href=&quot;#uv-python-list--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv python install

Download and install Python versions.

Supports CPython and PyPy. CPython distributions are downloaded from the Astral `python-build-standalone` project. PyPy distributions are downloaded from `python.org`. The available Python versions are bundled with each uv release. To install new Python versions, you may need upgrade uv.

Python versions are installed into the uv Python directory, which can be retrieved with `uv python dir`.

A `python` executable is not made globally available, managed Python versions are only used in uv commands or in active virtual environments. There is experimental support for adding Python executables to the `PATH` ‚Äî use the `--preview` flag to enable this behavior.

Multiple Python versions may be requested.

See `uv help python` to view supported request formats.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv python install [OPTIONS] [TARGETS]...
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-install--targets&quot;&gt;&lt;a href=&quot;#uv-python-install--targets&quot;&lt;code&gt;TARGETS&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python version(s) to install.&lt;/p&gt;

&lt;p&gt;If not provided, the requested Python version(s) will be read from the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable then &lt;code&gt;.python-versions&lt;/code&gt; or &lt;code&gt;.python-version&lt;/code&gt; files. If none of the above are present, uv will check if it has installed any Python versions. If not, it will install the latest stable version of Python.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; to view supported request formats.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-install--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-python-install--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--cache-dir&quot;&gt;&lt;a href=&quot;#uv-python-install--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--color&quot;&gt;&lt;a href=&quot;#uv-python-install--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--config-file&quot;&gt;&lt;a href=&quot;#uv-python-install--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--default&quot;&gt;&lt;a href=&quot;#uv-python-install--default&quot;&gt;&lt;code&gt;--default&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use as the default Python version.&lt;/p&gt;

&lt;p&gt;By default, only a &lt;code&gt;python{major}.{minor}&lt;/code&gt; executable is installed, e.g., &lt;code&gt;python3.10&lt;/code&gt;. When the &lt;code&gt;--default&lt;/code&gt; flag is used, &lt;code&gt;python{major}&lt;/code&gt;, e.g., &lt;code&gt;python3&lt;/code&gt;, and &lt;code&gt;python&lt;/code&gt; executables are also installed.&lt;/p&gt;

&lt;p&gt;Alternative Python variants will still include their tag. For example, installing 3.13+freethreaded with &lt;code&gt;--default&lt;/code&gt; will include in &lt;code&gt;python3t&lt;/code&gt; and &lt;code&gt;pythont&lt;/code&gt;, not &lt;code&gt;python3&lt;/code&gt; and &lt;code&gt;python&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If multiple Python versions are requested, uv will exit with an error.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--directory&quot;&gt;&lt;a href=&quot;#uv-python-install--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--force&quot;&gt;&lt;a href=&quot;#uv-python-install--force&quot;&gt;&lt;code&gt;--force&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Replace existing Python executables during installation.&lt;/p&gt;

&lt;p&gt;By default, uv will refuse to replace executables that it does not manage.&lt;/p&gt;

&lt;p&gt;Implies &lt;code&gt;--reinstall&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--help&quot;&gt;&lt;a href=&quot;#uv-python-install--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--install-dir&quot;&gt;&lt;a href=&quot;#uv-python-install--install-dir&quot;&gt;&lt;code&gt;--install-dir&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;install-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The directory to store the Python installation in.&lt;/p&gt;

&lt;p&gt;If provided, &lt;code&gt;UV_PYTHON_INSTALL_DIR&lt;/code&gt; will need to be set for subsequent operations for uv to discover the Python installation.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;uv python dir&lt;/code&gt; to view the current Python installation directory. Defaults to &lt;code&gt;~/.local/share/uv/python&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON_INSTALL_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--managed-python&quot;&gt;&lt;a href=&quot;#uv-python-install--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--mirror&quot;&gt;&lt;a href=&quot;#uv-python-install--mirror&quot;&gt;&lt;code&gt;--mirror&lt;/code&gt;&lt;/a&gt; &lt;i&gt;mirror&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Set the URL to use as the source for downloading Python installations.&lt;/p&gt;

&lt;p&gt;The provided URL will replace &lt;code&gt;https://github.com/astral-sh/python-build-standalone/releases/download&lt;/code&gt; in, e.g., &lt;code&gt;https://github.com/astral-sh/python-build-standalone/releases/download/20240713/cpython-3.12.4%2B20240713-aarch64-apple-darwin-install_only.tar.gz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Distributions can be read from a local directory by using the &lt;code&gt;file://&lt;/code&gt; URL scheme.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON_INSTALL_MIRROR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--native-tls&quot;&gt;&lt;a href=&quot;#uv-python-install--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--no-cache&quot;&gt;&lt;a href=&quot;#uv-python-install--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--no-config&quot;&gt;&lt;a href=&quot;#uv-python-install--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-python-install--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--no-progress&quot;&gt;&lt;a href=&quot;#uv-python-install--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-python-install--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--offline&quot;&gt;&lt;a href=&quot;#uv-python-install--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--project&quot;&gt;&lt;a href=&quot;#uv-python-install--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--pypy-mirror&quot;&gt;&lt;a href=&quot;#uv-python-install--pypy-mirror&quot;&gt;&lt;code&gt;--pypy-mirror&lt;/code&gt;&lt;/a&gt; &lt;i&gt;pypy-mirror&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Set the URL to use as the source for downloading PyPy installations.&lt;/p&gt;

&lt;p&gt;The provided URL will replace &lt;code&gt;https://downloads.python.org/pypy&lt;/code&gt; in, e.g., &lt;code&gt;https://downloads.python.org/pypy/pypy3.8-v7.3.7-osx64.tar.bz2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Distributions can be read from a local directory by using the &lt;code&gt;file://&lt;/code&gt; URL scheme.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYPY_INSTALL_MIRROR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--quiet&quot;&gt;&lt;a href=&quot;#uv-python-install--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--reinstall&quot;&gt;&lt;a href=&quot;#uv-python-install--reinstall&quot;&gt;&lt;code&gt;--reinstall&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-r&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall the requested Python version, if it&amp;#8217;s already installed.&lt;/p&gt;

&lt;p&gt;By default, uv will exit successfully if the version is already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--verbose&quot;&gt;&lt;a href=&quot;#uv-python-install--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-install--version&quot;&gt;&lt;a href=&quot;#uv-python-install--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv python find

Search for a Python installation.

Displays the path to the Python executable.

See `uv help python` to view supported request formats and details on discovery behavior.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv python find [OPTIONS] [REQUEST]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-find--request&quot;&gt;&lt;a href=&quot;#uv-python-find--request&quot;&lt;code&gt;REQUEST&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python request.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; to view supported request formats.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-find--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-python-find--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--cache-dir&quot;&gt;&lt;a href=&quot;#uv-python-find--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--color&quot;&gt;&lt;a href=&quot;#uv-python-find--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--config-file&quot;&gt;&lt;a href=&quot;#uv-python-find--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--directory&quot;&gt;&lt;a href=&quot;#uv-python-find--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--help&quot;&gt;&lt;a href=&quot;#uv-python-find--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--managed-python&quot;&gt;&lt;a href=&quot;#uv-python-find--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--native-tls&quot;&gt;&lt;a href=&quot;#uv-python-find--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--no-cache&quot;&gt;&lt;a href=&quot;#uv-python-find--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--no-config&quot;&gt;&lt;a href=&quot;#uv-python-find--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-python-find--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--no-progress&quot;&gt;&lt;a href=&quot;#uv-python-find--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--no-project&quot;&gt;&lt;a href=&quot;#uv-python-find--no-project&quot;&gt;&lt;code&gt;--no-project&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no_workspace&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering a project or workspace.&lt;/p&gt;

&lt;p&gt;Otherwise, when no request is provided, the Python requirement of a project in the current directory or parent directories will be used.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-python-find--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--offline&quot;&gt;&lt;a href=&quot;#uv-python-find--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--project&quot;&gt;&lt;a href=&quot;#uv-python-find--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--quiet&quot;&gt;&lt;a href=&quot;#uv-python-find--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--script&quot;&gt;&lt;a href=&quot;#uv-python-find--script&quot;&gt;&lt;code&gt;--script&lt;/code&gt;&lt;/a&gt; &lt;i&gt;script&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Find the environment for a Python script, rather than the current project&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--show-version&quot;&gt;&lt;a href=&quot;#uv-python-find--show-version&quot;&gt;&lt;code&gt;--show-version&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the Python version that would be used instead of the path to the interpreter&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--system&quot;&gt;&lt;a href=&quot;#uv-python-find--system&quot;&gt;&lt;code&gt;--system&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only find system Python interpreters.&lt;/p&gt;

&lt;p&gt;By default, uv will report the first Python interpreter it would use, including those in an active virtual environment or a virtual environment in the current working directory or any parent directory.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--system&lt;/code&gt; option instructs uv to skip virtual environment Python interpreters and restrict its search to the system path.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_SYSTEM_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--verbose&quot;&gt;&lt;a href=&quot;#uv-python-find--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-find--version&quot;&gt;&lt;a href=&quot;#uv-python-find--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv python pin

Pin to a specific Python version.

Writes the pinned Python version to a `.python-version` file, which is used by other uv commands to determine the required Python version.

If no version is provided, uv will look for an existing `.python-version` file and display the currently pinned version. If no `.python-version` file is found, uv will exit with an error.

See `uv help python` to view supported request formats.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv python pin [OPTIONS] [REQUEST]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-pin--request&quot;&gt;&lt;a href=&quot;#uv-python-pin--request&quot;&lt;code&gt;REQUEST&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python version request.&lt;/p&gt;

&lt;p&gt;uv supports more formats than other tools that read &lt;code&gt;.python-version&lt;/code&gt; files, i.e., &lt;code&gt;pyenv&lt;/code&gt;. If compatibility with those tools is needed, only use version numbers instead of complex requests such as &lt;code&gt;cpython@3.10&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If no request is provided, the currently pinned version will be shown.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; to view supported request formats.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-pin--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-python-pin--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--cache-dir&quot;&gt;&lt;a href=&quot;#uv-python-pin--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--color&quot;&gt;&lt;a href=&quot;#uv-python-pin--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--config-file&quot;&gt;&lt;a href=&quot;#uv-python-pin--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--directory&quot;&gt;&lt;a href=&quot;#uv-python-pin--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--global&quot;&gt;&lt;a href=&quot;#uv-python-pin--global&quot;&gt;&lt;code&gt;--global&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Update the global Python version pin.&lt;/p&gt;

&lt;p&gt;Writes the pinned Python version to a &lt;code&gt;.python-version&lt;/code&gt; file in the uv user configuration directory: &lt;code&gt;XDG_CONFIG_HOME/uv&lt;/code&gt; on Linux/macOS and &lt;code&gt;%APPDATA%/uv&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;When a local Python version pin is not found in the working directory or an ancestor directory, this version will be used instead.&lt;/p&gt;

&lt;p&gt;Unlike local version pins, this version is used as the default for commands that mutate global state, like &lt;code&gt;uv tool install&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--help&quot;&gt;&lt;a href=&quot;#uv-python-pin--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--managed-python&quot;&gt;&lt;a href=&quot;#uv-python-pin--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--native-tls&quot;&gt;&lt;a href=&quot;#uv-python-pin--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--no-cache&quot;&gt;&lt;a href=&quot;#uv-python-pin--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--no-config&quot;&gt;&lt;a href=&quot;#uv-python-pin--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-python-pin--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--no-progress&quot;&gt;&lt;a href=&quot;#uv-python-pin--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--no-project&quot;&gt;&lt;a href=&quot;#uv-python-pin--no-project&quot;&gt;&lt;code&gt;--no-project&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-workspace&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid validating the Python pin is compatible with the project or workspace.&lt;/p&gt;

&lt;p&gt;By default, a project or workspace is discovered in the current directory or any parent directory. If a workspace is found, the Python pin is validated against the workspace&amp;#8217;s &lt;code&gt;requires-python&lt;/code&gt; constraint.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-python-pin--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--offline&quot;&gt;&lt;a href=&quot;#uv-python-pin--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--project&quot;&gt;&lt;a href=&quot;#uv-python-pin--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--quiet&quot;&gt;&lt;a href=&quot;#uv-python-pin--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--resolved&quot;&gt;&lt;a href=&quot;#uv-python-pin--resolved&quot;&gt;&lt;code&gt;--resolved&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Write the resolved Python interpreter path instead of the request.&lt;/p&gt;

&lt;p&gt;Ensures that the exact same interpreter is used.&lt;/p&gt;

&lt;p&gt;This option is usually not safe to use when committing the &lt;code&gt;.python-version&lt;/code&gt; file to version control.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--verbose&quot;&gt;&lt;a href=&quot;#uv-python-pin--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-pin--version&quot;&gt;&lt;a href=&quot;#uv-python-pin--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv python dir

Show the uv Python installation directory.

By default, Python installations are stored in the uv data directory at `$XDG_DATA_HOME/uv/python` or `$HOME/.local/share/uv/python` on Unix and `%APPDATA%\uv\data\python` on Windows.

The Python installation directory may be overridden with `$UV_PYTHON_INSTALL_DIR`.

To view the directory where uv installs Python executables instead, use the `--bin` flag. Note that Python executables are only installed when preview mode is enabled.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv python dir [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-dir--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-python-dir--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--bin&quot;&gt;&lt;a href=&quot;#uv-python-dir--bin&quot;&gt;&lt;code&gt;--bin&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the directory into which &lt;code&gt;uv python&lt;/code&gt; will install Python executables.&lt;/p&gt;

&lt;p&gt;Note that this directory is only used when installing Python with preview mode enabled.&lt;/p&gt;

&lt;p&gt;The Python executable directory is determined according to the XDG standard and is derived from the following environment variables, in order of preference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$UV_PYTHON_BIN_DIR&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;$XDG_BIN_HOME&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;$XDG_DATA_HOME/../bin&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;$HOME/.local/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--cache-dir&quot;&gt;&lt;a href=&quot;#uv-python-dir--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--color&quot;&gt;&lt;a href=&quot;#uv-python-dir--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--config-file&quot;&gt;&lt;a href=&quot;#uv-python-dir--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--directory&quot;&gt;&lt;a href=&quot;#uv-python-dir--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--help&quot;&gt;&lt;a href=&quot;#uv-python-dir--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--managed-python&quot;&gt;&lt;a href=&quot;#uv-python-dir--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--native-tls&quot;&gt;&lt;a href=&quot;#uv-python-dir--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--no-cache&quot;&gt;&lt;a href=&quot;#uv-python-dir--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--no-config&quot;&gt;&lt;a href=&quot;#uv-python-dir--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-python-dir--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--no-progress&quot;&gt;&lt;a href=&quot;#uv-python-dir--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-python-dir--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--offline&quot;&gt;&lt;a href=&quot;#uv-python-dir--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--project&quot;&gt;&lt;a href=&quot;#uv-python-dir--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--quiet&quot;&gt;&lt;a href=&quot;#uv-python-dir--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--verbose&quot;&gt;&lt;a href=&quot;#uv-python-dir--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-dir--version&quot;&gt;&lt;a href=&quot;#uv-python-dir--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv python uninstall

Uninstall Python versions

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv python uninstall [OPTIONS] &lt;TARGETS&gt;...
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-uninstall--targets&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--targets&quot;&lt;code&gt;TARGETS&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python version(s) to uninstall.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; to view supported request formats.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-python-uninstall--all&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--all&quot;&gt;&lt;code&gt;--all&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Uninstall all managed Python versions&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--cache-dir&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--color&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--config-file&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--directory&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--help&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--install-dir&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--install-dir&quot;&gt;&lt;code&gt;--install-dir&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;install-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The directory where the Python was installed&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON_INSTALL_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--managed-python&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--native-tls&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--no-cache&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--no-config&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--no-progress&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--offline&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--project&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--quiet&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--verbose&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-python-uninstall--version&quot;&gt;&lt;a href=&quot;#uv-python-uninstall--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv pip

Manage Python packages with a pip-compatible interface

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv pip [OPTIONS] &lt;COMMAND&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Commands&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt&gt;&lt;a href=&quot;#uv-pip-compile&quot;&gt;&lt;code&gt;uv pip compile&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Compile a &lt;code&gt;requirements.in&lt;/code&gt; file to a &lt;code&gt;requirements.txt&lt;/code&gt; file&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-pip-sync&quot;&gt;&lt;code&gt;uv pip sync&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Sync an environment with a &lt;code&gt;requirements.txt&lt;/code&gt; file&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-pip-install&quot;&gt;&lt;code&gt;uv pip install&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install packages into an environment&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-pip-uninstall&quot;&gt;&lt;code&gt;uv pip uninstall&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Uninstall packages from an environment&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-pip-freeze&quot;&gt;&lt;code&gt;uv pip freeze&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List, in requirements format, packages installed in an environment&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-pip-list&quot;&gt;&lt;code&gt;uv pip list&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List, in tabular format, packages installed in an environment&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-pip-show&quot;&gt;&lt;code&gt;uv pip show&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show information about one or more installed packages&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-pip-tree&quot;&gt;&lt;code&gt;uv pip tree&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the dependency tree for an environment&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-pip-check&quot;&gt;&lt;code&gt;uv pip check&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Verify installed packages have compatible dependencies&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

### uv pip compile

Compile a `requirements.in` file to a `requirements.txt` file

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv pip compile [OPTIONS] &lt;SRC_FILE|--group &lt;GROUP&gt;&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-compile--src_file&quot;&gt;&lt;a href=&quot;#uv-pip-compile--src_file&quot;&lt;code&gt;SRC_FILE&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include all packages listed in the given &lt;code&gt;requirements.in&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;If a &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, or &lt;code&gt;setup.cfg&lt;/code&gt; file is provided, uv will extract the requirements for the relevant project.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;-&lt;/code&gt; is provided, then requirements will be read from stdin.&lt;/p&gt;

&lt;p&gt;The order of the requirements files and the requirements in them is used to determine priority during resolution.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-compile--all-extras&quot;&gt;&lt;a href=&quot;#uv-pip-compile--all-extras&quot;&gt;&lt;code&gt;--all-extras&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include all optional dependencies.&lt;/p&gt;

&lt;p&gt;Only applies to &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, and &lt;code&gt;setup.cfg&lt;/code&gt; sources.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-pip-compile--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--annotation-style&quot;&gt;&lt;a href=&quot;#uv-pip-compile--annotation-style&quot;&gt;&lt;code&gt;--annotation-style&lt;/code&gt;&lt;/a&gt; &lt;i&gt;annotation-style&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The style of the annotation comments included in the output file, used to indicate the source of each package.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;split&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;line&lt;/code&gt;:  Render the annotations on a single, comma-separated line&lt;/li&gt;

&lt;li&gt;&lt;code&gt;split&lt;/code&gt;:  Render each annotation on its own line&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--build-constraints&quot;&gt;&lt;a href=&quot;#uv-pip-compile--build-constraints&quot;&gt;&lt;code&gt;--build-constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--build-constraint&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt; &lt;i&gt;build-constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain build dependencies using the given requirements files when building source distributions.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the installation of that package.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_BUILD_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--cache-dir&quot;&gt;&lt;a href=&quot;#uv-pip-compile--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--color&quot;&gt;&lt;a href=&quot;#uv-pip-compile--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--config-file&quot;&gt;&lt;a href=&quot;#uv-pip-compile--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--config-setting&quot;&gt;&lt;a href=&quot;#uv-pip-compile--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--constraints&quot;&gt;&lt;a href=&quot;#uv-pip-compile--constraints&quot;&gt;&lt;code&gt;--constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--constraint&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; &lt;i&gt;constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain versions using the given requirements files.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the installation of that package.&lt;/p&gt;

&lt;p&gt;This is equivalent to pip&amp;#8217;s &lt;code&gt;--constraint&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--custom-compile-command&quot;&gt;&lt;a href=&quot;#uv-pip-compile--custom-compile-command&quot;&gt;&lt;code&gt;--custom-compile-command&lt;/code&gt;&lt;/a&gt; &lt;i&gt;custom-compile-command&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The header comment to include at the top of the output file generated by &lt;code&gt;uv pip compile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Used to reflect custom build scripts and commands that wrap &lt;code&gt;uv pip compile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CUSTOM_COMPILE_COMMAND&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--default-index&quot;&gt;&lt;a href=&quot;#uv-pip-compile--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--directory&quot;&gt;&lt;a href=&quot;#uv-pip-compile--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--emit-build-options&quot;&gt;&lt;a href=&quot;#uv-pip-compile--emit-build-options&quot;&gt;&lt;code&gt;--emit-build-options&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include &lt;code&gt;--no-binary&lt;/code&gt; and &lt;code&gt;--only-binary&lt;/code&gt; entries in the generated output file&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--emit-find-links&quot;&gt;&lt;a href=&quot;#uv-pip-compile--emit-find-links&quot;&gt;&lt;code&gt;--emit-find-links&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include &lt;code&gt;--find-links&lt;/code&gt; entries in the generated output file&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--emit-index-annotation&quot;&gt;&lt;a href=&quot;#uv-pip-compile--emit-index-annotation&quot;&gt;&lt;code&gt;--emit-index-annotation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include comment annotations indicating the index used to resolve each package (e.g., &lt;code&gt;# from https://pypi.org/simple&lt;/code&gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--emit-index-url&quot;&gt;&lt;a href=&quot;#uv-pip-compile--emit-index-url&quot;&gt;&lt;code&gt;--emit-index-url&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include &lt;code&gt;--index-url&lt;/code&gt; and &lt;code&gt;--extra-index-url&lt;/code&gt; entries in the generated output file&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-pip-compile--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--extra&quot;&gt;&lt;a href=&quot;#uv-pip-compile--extra&quot;&gt;&lt;code&gt;--extra&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include optional dependencies from the specified extra name; may be provided more than once.&lt;/p&gt;

&lt;p&gt;Only applies to &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, and &lt;code&gt;setup.cfg&lt;/code&gt; sources.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-pip-compile--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--find-links&quot;&gt;&lt;a href=&quot;#uv-pip-compile--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-pip-compile--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--generate-hashes&quot;&gt;&lt;a href=&quot;#uv-pip-compile--generate-hashes&quot;&gt;&lt;code&gt;--generate-hashes&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include distribution hashes in the output file&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--group&quot;&gt;&lt;a href=&quot;#uv-pip-compile--group&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install the specified dependency group from a &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If no path is provided, the &lt;code&gt;pyproject.toml&lt;/code&gt; in the working directory is used.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--help&quot;&gt;&lt;a href=&quot;#uv-pip-compile--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--index&quot;&gt;&lt;a href=&quot;#uv-pip-compile--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--index-strategy&quot;&gt;&lt;a href=&quot;#uv-pip-compile--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--index-url&quot;&gt;&lt;a href=&quot;#uv-pip-compile--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-pip-compile--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--link-mode&quot;&gt;&lt;a href=&quot;#uv-pip-compile--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;This option is only used when building source distributions.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-compile--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--native-tls&quot;&gt;&lt;a href=&quot;#uv-pip-compile--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-annotate&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-annotate&quot;&gt;&lt;code&gt;--no-annotate&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Exclude comment annotations indicating the source of each package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-binary&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;Multiple packages may be provided. Disable binaries for all packages with &lt;code&gt;:all:&lt;/code&gt;. Clear previously specified packages with &lt;code&gt;:none:&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-build&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;Alias for &lt;code&gt;--only-binary :all:&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-cache&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-deps&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-deps&quot;&gt;&lt;code&gt;--no-deps&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore package dependencies, instead only add those packages explicitly listed on the command line to the resulting requirements file&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-emit-package&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-emit-package&quot;&gt;&lt;code&gt;--no-emit-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--unsafe-package&lt;/code&gt; &lt;i&gt;no-emit-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Specify a package to omit from the output resolution. Its dependencies will still be included in the resolution. Equivalent to pip-compile&amp;#8217;s &lt;code&gt;--unsafe-package&lt;/code&gt; option&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-header&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-header&quot;&gt;&lt;code&gt;--no-header&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Exclude the comment header at the top of the generated output file&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-index&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-progress&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-sources&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-strip-extras&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-strip-extras&quot;&gt;&lt;code&gt;--no-strip-extras&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include extras in the output file.&lt;/p&gt;

&lt;p&gt;By default, uv strips extras, as any packages pulled in by the extras are already included as dependencies in the output file directly. Further, output files generated with &lt;code&gt;--no-strip-extras&lt;/code&gt; cannot be used as constraints files in &lt;code&gt;install&lt;/code&gt; and &lt;code&gt;sync&lt;/code&gt; invocations.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--no-strip-markers&quot;&gt;&lt;a href=&quot;#uv-pip-compile--no-strip-markers&quot;&gt;&lt;code&gt;--no-strip-markers&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include environment markers in the output file.&lt;/p&gt;

&lt;p&gt;By default, uv strips environment markers, as the resolution generated by &lt;code&gt;compile&lt;/code&gt; is only guaranteed to be correct for the target environment.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--offline&quot;&gt;&lt;a href=&quot;#uv-pip-compile--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--only-binary&quot;&gt;&lt;a href=&quot;#uv-pip-compile--only-binary&quot;&gt;&lt;code&gt;--only-binary&lt;/code&gt;&lt;/a&gt; &lt;i&gt;only-binary&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only use pre-built wheels; don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;Multiple packages may be provided. Disable binaries for all packages with &lt;code&gt;:all:&lt;/code&gt;. Clear previously specified packages with &lt;code&gt;:none:&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--output-file&quot;&gt;&lt;a href=&quot;#uv-pip-compile--output-file&quot;&gt;&lt;code&gt;--output-file&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-o&lt;/code&gt; &lt;i&gt;output-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Write the compiled requirements to the given &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If the file already exists, the existing versions will be preferred when resolving dependencies, unless &lt;code&gt;--upgrade&lt;/code&gt; is also specified.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--overrides&quot;&gt;&lt;a href=&quot;#uv-pip-compile--overrides&quot;&gt;&lt;code&gt;--overrides&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--override&lt;/code&gt; &lt;i&gt;overrides&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Override versions using the given requirements files.&lt;/p&gt;

&lt;p&gt;Overrides files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.&lt;/p&gt;

&lt;p&gt;While constraints are &lt;em&gt;additive&lt;/em&gt;, in that they&amp;#8217;re combined with the requirements of the constituent packages, overrides are &lt;em&gt;absolute&lt;/em&gt;, in that they completely replace the requirements of the constituent packages.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OVERRIDE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--prerelease&quot;&gt;&lt;a href=&quot;#uv-pip-compile--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--project&quot;&gt;&lt;a href=&quot;#uv-pip-compile--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--python&quot;&gt;&lt;a href=&quot;#uv-pip-compile--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use during resolution.&lt;/p&gt;

&lt;p&gt;A Python interpreter is required for building source distributions to determine package metadata when there are not wheels.&lt;/p&gt;

&lt;p&gt;The interpreter is also used to determine the default minimum Python version, unless &lt;code&gt;--python-version&lt;/code&gt; is provided.&lt;/p&gt;

&lt;p&gt;This option respects &lt;code&gt;UV_PYTHON&lt;/code&gt;, but when set via environment variable, it is overridden by &lt;code&gt;--python-version&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--python-platform&quot;&gt;&lt;a href=&quot;#uv-pip-compile--python-platform&quot;&gt;&lt;code&gt;--python-platform&lt;/code&gt;&lt;/a&gt; &lt;i&gt;python-platform&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The platform for which requirements should be resolved.&lt;/p&gt;

&lt;p&gt;Represented as a &amp;quot;target triple&amp;quot;, a string that describes the target platform in terms of its CPU, vendor, and operating system name, like &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; or &lt;code&gt;aarch64-apple-darwin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When targeting macOS (Darwin), the default minimum version is &lt;code&gt;12.0&lt;/code&gt;. Use &lt;code&gt;MACOSX_DEPLOYMENT_TARGET&lt;/code&gt; to specify a different minimum version, e.g., &lt;code&gt;13.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;windows&lt;/code&gt;:  An alias for &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;, the default target for Windows&lt;/li&gt;

&lt;li&gt;&lt;code&gt;linux&lt;/code&gt;:  An alias for &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;, the default target for Linux&lt;/li&gt;

&lt;li&gt;&lt;code&gt;macos&lt;/code&gt;:  An alias for &lt;code&gt;aarch64-apple-darwin&lt;/code&gt;, the default target for macOS&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;:  A 64-bit x86 Windows target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;i686-pc-windows-msvc&lt;/code&gt;:  A 32-bit x86 Windows target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;:  An x86 Linux target. Equivalent to &lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-apple-darwin&lt;/code&gt;:  An ARM-based macOS target, as seen on Apple Silicon devices&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-apple-darwin&lt;/code&gt;:  An x86 macOS target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-gnu&lt;/code&gt;:  An ARM64 Linux target. Equivalent to &lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-musl&lt;/code&gt;:  An ARM64 Linux target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; Linux target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux2014&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux2014&lt;/code&gt; platform. Equivalent to &lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_17&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_28&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_28&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_31&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_31&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_32&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_32&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_33&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_33&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_34&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_34&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_35&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_35&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_36&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_36&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_37&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_37&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_38&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_38&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_39&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_39&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_40&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_40&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux2014&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux2014&lt;/code&gt; platform. Equivalent to &lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_17&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_28&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_28&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_31&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_31&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_32&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_32&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_33&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_33&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_34&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_34&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_35&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_35&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_36&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_36&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_37&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_37&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_38&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_38&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_39&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_39&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_40&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_40&lt;/code&gt; platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--python-version&quot;&gt;&lt;a href=&quot;#uv-pip-compile--python-version&quot;&gt;&lt;code&gt;--python-version&lt;/code&gt;&lt;/a&gt; &lt;i&gt;python-version&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python version to use for resolution.&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;3.8&lt;/code&gt; or &lt;code&gt;3.8.17&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Defaults to the version of the Python interpreter used for resolution.&lt;/p&gt;

&lt;p&gt;Defines the minimum Python version that must be supported by the resolved requirements.&lt;/p&gt;

&lt;p&gt;If a patch version is omitted, the minimum patch version is assumed. For example, &lt;code&gt;3.8&lt;/code&gt; is mapped to &lt;code&gt;3.8.0&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--quiet&quot;&gt;&lt;a href=&quot;#uv-pip-compile--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--refresh&quot;&gt;&lt;a href=&quot;#uv-pip-compile--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--refresh-package&quot;&gt;&lt;a href=&quot;#uv-pip-compile--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--resolution&quot;&gt;&lt;a href=&quot;#uv-pip-compile--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--system&quot;&gt;&lt;a href=&quot;#uv-pip-compile--system&quot;&gt;&lt;code&gt;--system&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install packages into the system Python environment.&lt;/p&gt;

&lt;p&gt;By default, uv uses the virtual environment in the current working directory or any parent directory, falling back to searching for a Python executable in &lt;code&gt;PATH&lt;/code&gt;. The &lt;code&gt;--system&lt;/code&gt; option instructs uv to avoid using a virtual environment Python and restrict its search to the system path.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_SYSTEM_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--torch-backend&quot;&gt;&lt;a href=&quot;#uv-pip-compile--torch-backend&quot;&gt;&lt;code&gt;--torch-backend&lt;/code&gt;&lt;/a&gt; &lt;i&gt;torch-backend&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The backend to use when fetching packages in the PyTorch ecosystem (e.g., &lt;code&gt;cpu&lt;/code&gt;, &lt;code&gt;cu126&lt;/code&gt;, or &lt;code&gt;auto&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;When set, uv will ignore the configured index URLs for packages in the PyTorch ecosystem, and will instead use the defined backend.&lt;/p&gt;

&lt;p&gt;For example, when set to &lt;code&gt;cpu&lt;/code&gt;, uv will use the CPU-only PyTorch index; when set to &lt;code&gt;cu126&lt;/code&gt;, uv will use the PyTorch index for CUDA 12.6.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;auto&lt;/code&gt; mode will attempt to detect the appropriate PyTorch index based on the currently installed CUDA drivers.&lt;/p&gt;

&lt;p&gt;This option is in preview and may change in any future release.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_TORCH_BACKEND&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Select the appropriate PyTorch index based on the operating system and CUDA driver version&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cpu&lt;/code&gt;:  Use the CPU-only PyTorch index&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu126&lt;/code&gt;:  Use the PyTorch index for CUDA 12.6&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu125&lt;/code&gt;:  Use the PyTorch index for CUDA 12.5&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu124&lt;/code&gt;:  Use the PyTorch index for CUDA 12.4&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu123&lt;/code&gt;:  Use the PyTorch index for CUDA 12.3&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu122&lt;/code&gt;:  Use the PyTorch index for CUDA 12.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu121&lt;/code&gt;:  Use the PyTorch index for CUDA 12.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu120&lt;/code&gt;:  Use the PyTorch index for CUDA 12.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu118&lt;/code&gt;:  Use the PyTorch index for CUDA 11.8&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu117&lt;/code&gt;:  Use the PyTorch index for CUDA 11.7&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu116&lt;/code&gt;:  Use the PyTorch index for CUDA 11.6&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu115&lt;/code&gt;:  Use the PyTorch index for CUDA 11.5&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu114&lt;/code&gt;:  Use the PyTorch index for CUDA 11.4&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu113&lt;/code&gt;:  Use the PyTorch index for CUDA 11.3&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu112&lt;/code&gt;:  Use the PyTorch index for CUDA 11.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu111&lt;/code&gt;:  Use the PyTorch index for CUDA 11.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu110&lt;/code&gt;:  Use the PyTorch index for CUDA 11.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu102&lt;/code&gt;:  Use the PyTorch index for CUDA 10.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu101&lt;/code&gt;:  Use the PyTorch index for CUDA 10.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu100&lt;/code&gt;:  Use the PyTorch index for CUDA 10.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu92&lt;/code&gt;:  Use the PyTorch index for CUDA 9.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu91&lt;/code&gt;:  Use the PyTorch index for CUDA 9.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu90&lt;/code&gt;:  Use the PyTorch index for CUDA 9.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu80&lt;/code&gt;:  Use the PyTorch index for CUDA 8.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--universal&quot;&gt;&lt;a href=&quot;#uv-pip-compile--universal&quot;&gt;&lt;code&gt;--universal&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Perform a universal resolution, attempting to generate a single &lt;code&gt;requirements.txt&lt;/code&gt; output file that is compatible with all operating systems, architectures, and Python implementations.&lt;/p&gt;

&lt;p&gt;In universal mode, the current Python version (or user-provided &lt;code&gt;--python-version&lt;/code&gt;) will be treated as a lower bound. For example, &lt;code&gt;--universal --python-version 3.7&lt;/code&gt; would produce a universal resolution for Python 3.7 and later.&lt;/p&gt;

&lt;p&gt;Implies &lt;code&gt;--no-strip-markers&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--upgrade&quot;&gt;&lt;a href=&quot;#uv-pip-compile--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-pip-compile--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--verbose&quot;&gt;&lt;a href=&quot;#uv-pip-compile--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-compile--version&quot;&gt;&lt;a href=&quot;#uv-pip-compile--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv pip sync

Sync an environment with a `requirements.txt` file.

When syncing an environment, any packages not listed in the `requirements.txt` file will be removed. To retain extraneous packages, use `uv pip install` instead.

The `requirements.txt` file is presumed to be the output of a `pip compile` or `uv export` operation, in which it will include all transitive dependencies. If transitive dependencies are not present in the file, they will not be installed. Use `--strict` to warn if any transitive dependencies are missing.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv pip sync [OPTIONS] &lt;SRC_FILE&gt;...
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-sync--src_file&quot;&gt;&lt;a href=&quot;#uv-pip-sync--src_file&quot;&lt;code&gt;SRC_FILE&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include all packages listed in the given &lt;code&gt;requirements.txt&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;If a &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, or &lt;code&gt;setup.cfg&lt;/code&gt; file is provided, uv will extract the requirements for the relevant project.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;-&lt;/code&gt; is provided, then requirements will be read from stdin.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-sync--allow-empty-requirements&quot;&gt;&lt;a href=&quot;#uv-pip-sync--allow-empty-requirements&quot;&gt;&lt;code&gt;--allow-empty-requirements&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow sync of empty requirements, which will clear the environment of all packages&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-pip-sync--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--break-system-packages&quot;&gt;&lt;a href=&quot;#uv-pip-sync--break-system-packages&quot;&gt;&lt;code&gt;--break-system-packages&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow uv to modify an &lt;code&gt;EXTERNALLY-MANAGED&lt;/code&gt; Python installation.&lt;/p&gt;

&lt;p&gt;WARNING: &lt;code&gt;--break-system-packages&lt;/code&gt; is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like &lt;code&gt;apt&lt;/code&gt;. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or &lt;code&gt;pip&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_BREAK_SYSTEM_PACKAGES&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--build-constraints&quot;&gt;&lt;a href=&quot;#uv-pip-sync--build-constraints&quot;&gt;&lt;code&gt;--build-constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--build-constraint&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt; &lt;i&gt;build-constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain build dependencies using the given requirements files when building source distributions.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the installation of that package.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_BUILD_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--cache-dir&quot;&gt;&lt;a href=&quot;#uv-pip-sync--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--color&quot;&gt;&lt;a href=&quot;#uv-pip-sync--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--compile-bytecode&quot;&gt;&lt;a href=&quot;#uv-pip-sync--compile-bytecode&quot;&gt;&lt;code&gt;--compile-bytecode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--compile&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Compile Python files to bytecode after installation.&lt;/p&gt;

&lt;p&gt;By default, uv does not compile Python (&lt;code&gt;.py&lt;/code&gt;) files to bytecode (&lt;code&gt;__pycache__/*.pyc&lt;/code&gt;); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.&lt;/p&gt;

&lt;p&gt;When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_COMPILE_BYTECODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--config-file&quot;&gt;&lt;a href=&quot;#uv-pip-sync--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--config-setting&quot;&gt;&lt;a href=&quot;#uv-pip-sync--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--constraints&quot;&gt;&lt;a href=&quot;#uv-pip-sync--constraints&quot;&gt;&lt;code&gt;--constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--constraint&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; &lt;i&gt;constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain versions using the given requirements files.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the installation of that package.&lt;/p&gt;

&lt;p&gt;This is equivalent to pip&amp;#8217;s &lt;code&gt;--constraint&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--default-index&quot;&gt;&lt;a href=&quot;#uv-pip-sync--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--directory&quot;&gt;&lt;a href=&quot;#uv-pip-sync--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--dry-run&quot;&gt;&lt;a href=&quot;#uv-pip-sync--dry-run&quot;&gt;&lt;code&gt;--dry-run&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Perform a dry run, i.e., don&amp;#8217;t actually install anything but resolve the dependencies and print the resulting plan&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-pip-sync--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-pip-sync--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--find-links&quot;&gt;&lt;a href=&quot;#uv-pip-sync--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--help&quot;&gt;&lt;a href=&quot;#uv-pip-sync--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--index&quot;&gt;&lt;a href=&quot;#uv-pip-sync--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--index-strategy&quot;&gt;&lt;a href=&quot;#uv-pip-sync--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--index-url&quot;&gt;&lt;a href=&quot;#uv-pip-sync--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-pip-sync--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--link-mode&quot;&gt;&lt;a href=&quot;#uv-pip-sync--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-sync--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--native-tls&quot;&gt;&lt;a href=&quot;#uv-pip-sync--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--no-allow-empty-requirements&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-allow-empty-requirements&quot;&gt;&lt;code&gt;--no-allow-empty-requirements&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt id=&quot;uv-pip-sync--no-binary&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;Multiple packages may be provided. Disable binaries for all packages with &lt;code&gt;:all:&lt;/code&gt;. Clear previously specified packages with &lt;code&gt;:none:&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--no-break-system-packages&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-break-system-packages&quot;&gt;&lt;code&gt;--no-break-system-packages&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt id=&quot;uv-pip-sync--no-build&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;Alias for &lt;code&gt;--only-binary :all:&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--no-cache&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--no-index&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--no-progress&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--no-sources&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--no-verify-hashes&quot;&gt;&lt;a href=&quot;#uv-pip-sync--no-verify-hashes&quot;&gt;&lt;code&gt;--no-verify-hashes&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable validation of hashes in the requirements file.&lt;/p&gt;

&lt;p&gt;By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash. To enforce hash validation, use &lt;code&gt;--require-hashes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_VERIFY_HASHES&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--offline&quot;&gt;&lt;a href=&quot;#uv-pip-sync--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--only-binary&quot;&gt;&lt;a href=&quot;#uv-pip-sync--only-binary&quot;&gt;&lt;code&gt;--only-binary&lt;/code&gt;&lt;/a&gt; &lt;i&gt;only-binary&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only use pre-built wheels; don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;Multiple packages may be provided. Disable binaries for all packages with &lt;code&gt;:all:&lt;/code&gt;. Clear previously specified packages with &lt;code&gt;:none:&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--prefix&quot;&gt;&lt;a href=&quot;#uv-pip-sync--prefix&quot;&gt;&lt;code&gt;--prefix&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prefix&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install packages into &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;bin&lt;/code&gt;, and other top-level folders under the specified directory, as if a virtual environment were present at that location.&lt;/p&gt;

&lt;p&gt;In general, prefer the use of &lt;code&gt;--python&lt;/code&gt; to install into an alternate environment, as scripts and other artifacts installed via &lt;code&gt;--prefix&lt;/code&gt; will reference the installing interpreter, rather than any interpreter added to the &lt;code&gt;--prefix&lt;/code&gt; directory, rendering them non-portable.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--project&quot;&gt;&lt;a href=&quot;#uv-pip-sync--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--python&quot;&gt;&lt;a href=&quot;#uv-pip-sync--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter into which packages should be installed.&lt;/p&gt;

&lt;p&gt;By default, syncing requires a virtual environment. A path to an alternative Python can be provided, but it is only recommended in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--python-platform&quot;&gt;&lt;a href=&quot;#uv-pip-sync--python-platform&quot;&gt;&lt;code&gt;--python-platform&lt;/code&gt;&lt;/a&gt; &lt;i&gt;python-platform&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The platform for which requirements should be installed.&lt;/p&gt;

&lt;p&gt;Represented as a &amp;quot;target triple&amp;quot;, a string that describes the target platform in terms of its CPU, vendor, and operating system name, like &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; or &lt;code&gt;aarch64-apple-darwin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When targeting macOS (Darwin), the default minimum version is &lt;code&gt;12.0&lt;/code&gt;. Use &lt;code&gt;MACOSX_DEPLOYMENT_TARGET&lt;/code&gt; to specify a different minimum version, e.g., &lt;code&gt;13.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;WARNING: When specified, uv will select wheels that are compatible with the &lt;em&gt;target&lt;/em&gt; platform; as a result, the installed distributions may not be compatible with the &lt;em&gt;current&lt;/em&gt; platform. Conversely, any distributions that are built from source may be incompatible with the &lt;em&gt;target&lt;/em&gt; platform, as they will be built for the &lt;em&gt;current&lt;/em&gt; platform. The &lt;code&gt;--python-platform&lt;/code&gt; option is intended for advanced use cases.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;windows&lt;/code&gt;:  An alias for &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;, the default target for Windows&lt;/li&gt;

&lt;li&gt;&lt;code&gt;linux&lt;/code&gt;:  An alias for &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;, the default target for Linux&lt;/li&gt;

&lt;li&gt;&lt;code&gt;macos&lt;/code&gt;:  An alias for &lt;code&gt;aarch64-apple-darwin&lt;/code&gt;, the default target for macOS&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;:  A 64-bit x86 Windows target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;i686-pc-windows-msvc&lt;/code&gt;:  A 32-bit x86 Windows target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;:  An x86 Linux target. Equivalent to &lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-apple-darwin&lt;/code&gt;:  An ARM-based macOS target, as seen on Apple Silicon devices&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-apple-darwin&lt;/code&gt;:  An x86 macOS target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-gnu&lt;/code&gt;:  An ARM64 Linux target. Equivalent to &lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-musl&lt;/code&gt;:  An ARM64 Linux target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; Linux target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux2014&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux2014&lt;/code&gt; platform. Equivalent to &lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_17&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_28&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_28&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_31&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_31&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_32&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_32&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_33&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_33&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_34&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_34&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_35&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_35&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_36&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_36&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_37&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_37&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_38&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_38&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_39&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_39&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_40&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_40&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux2014&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux2014&lt;/code&gt; platform. Equivalent to &lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_17&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_28&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_28&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_31&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_31&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_32&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_32&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_33&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_33&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_34&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_34&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_35&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_35&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_36&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_36&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_37&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_37&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_38&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_38&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_39&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_39&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_40&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_40&lt;/code&gt; platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--python-version&quot;&gt;&lt;a href=&quot;#uv-pip-sync--python-version&quot;&gt;&lt;code&gt;--python-version&lt;/code&gt;&lt;/a&gt; &lt;i&gt;python-version&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The minimum Python version that should be supported by the requirements (e.g., &lt;code&gt;3.7&lt;/code&gt; or &lt;code&gt;3.7.9&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If a patch version is omitted, the minimum patch version is assumed. For example, &lt;code&gt;3.7&lt;/code&gt; is mapped to &lt;code&gt;3.7.0&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--quiet&quot;&gt;&lt;a href=&quot;#uv-pip-sync--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--refresh&quot;&gt;&lt;a href=&quot;#uv-pip-sync--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--refresh-package&quot;&gt;&lt;a href=&quot;#uv-pip-sync--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--reinstall&quot;&gt;&lt;a href=&quot;#uv-pip-sync--reinstall&quot;&gt;&lt;code&gt;--reinstall&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--force-reinstall&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall all packages, regardless of whether they&amp;#8217;re already installed. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--reinstall-package&quot;&gt;&lt;a href=&quot;#uv-pip-sync--reinstall-package&quot;&gt;&lt;code&gt;--reinstall-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;reinstall-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall a specific package, regardless of whether it&amp;#8217;s already installed. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--require-hashes&quot;&gt;&lt;a href=&quot;#uv-pip-sync--require-hashes&quot;&gt;&lt;code&gt;--require-hashes&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require a matching hash for each requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;--require-hashes&lt;/code&gt; is enabled, &lt;em&gt;all&lt;/em&gt; requirements must include a hash or set of hashes, and &lt;em&gt;all&lt;/em&gt; requirements must either be pinned to exact versions (e.g., &lt;code&gt;==1.0.0&lt;/code&gt;), or be specified via direct URL.&lt;/p&gt;

&lt;p&gt;Hash-checking mode introduces a number of additional constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git dependencies are not supported. - Editable installs are not supported. - Local dependencies are not supported, unless they point to a specific wheel (&lt;code&gt;.whl&lt;/code&gt;) or source archive (&lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.tar.gz&lt;/code&gt;), as opposed to a directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_REQUIRE_HASHES&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--strict&quot;&gt;&lt;a href=&quot;#uv-pip-sync--strict&quot;&gt;&lt;code&gt;--strict&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Validate the Python environment after completing the installation, to detect packages with missing dependencies or other issues&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--system&quot;&gt;&lt;a href=&quot;#uv-pip-sync--system&quot;&gt;&lt;code&gt;--system&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install packages into the system Python environment.&lt;/p&gt;

&lt;p&gt;By default, uv installs into the virtual environment in the current working directory or any parent directory. The &lt;code&gt;--system&lt;/code&gt; option instructs uv to instead use the first Python found in the system &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;WARNING: &lt;code&gt;--system&lt;/code&gt; is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_SYSTEM_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--target&quot;&gt;&lt;a href=&quot;#uv-pip-sync--target&quot;&gt;&lt;code&gt;--target&lt;/code&gt;&lt;/a&gt; &lt;i&gt;target&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--torch-backend&quot;&gt;&lt;a href=&quot;#uv-pip-sync--torch-backend&quot;&gt;&lt;code&gt;--torch-backend&lt;/code&gt;&lt;/a&gt; &lt;i&gt;torch-backend&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The backend to use when fetching packages in the PyTorch ecosystem (e.g., &lt;code&gt;cpu&lt;/code&gt;, &lt;code&gt;cu126&lt;/code&gt;, or &lt;code&gt;auto&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;When set, uv will ignore the configured index URLs for packages in the PyTorch ecosystem, and will instead use the defined backend.&lt;/p&gt;

&lt;p&gt;For example, when set to &lt;code&gt;cpu&lt;/code&gt;, uv will use the CPU-only PyTorch index; when set to &lt;code&gt;cu126&lt;/code&gt;, uv will use the PyTorch index for CUDA 12.6.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;auto&lt;/code&gt; mode will attempt to detect the appropriate PyTorch index based on the currently installed CUDA drivers.&lt;/p&gt;

&lt;p&gt;This option is in preview and may change in any future release.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_TORCH_BACKEND&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Select the appropriate PyTorch index based on the operating system and CUDA driver version&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cpu&lt;/code&gt;:  Use the CPU-only PyTorch index&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu126&lt;/code&gt;:  Use the PyTorch index for CUDA 12.6&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu125&lt;/code&gt;:  Use the PyTorch index for CUDA 12.5&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu124&lt;/code&gt;:  Use the PyTorch index for CUDA 12.4&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu123&lt;/code&gt;:  Use the PyTorch index for CUDA 12.3&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu122&lt;/code&gt;:  Use the PyTorch index for CUDA 12.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu121&lt;/code&gt;:  Use the PyTorch index for CUDA 12.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu120&lt;/code&gt;:  Use the PyTorch index for CUDA 12.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu118&lt;/code&gt;:  Use the PyTorch index for CUDA 11.8&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu117&lt;/code&gt;:  Use the PyTorch index for CUDA 11.7&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu116&lt;/code&gt;:  Use the PyTorch index for CUDA 11.6&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu115&lt;/code&gt;:  Use the PyTorch index for CUDA 11.5&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu114&lt;/code&gt;:  Use the PyTorch index for CUDA 11.4&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu113&lt;/code&gt;:  Use the PyTorch index for CUDA 11.3&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu112&lt;/code&gt;:  Use the PyTorch index for CUDA 11.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu111&lt;/code&gt;:  Use the PyTorch index for CUDA 11.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu110&lt;/code&gt;:  Use the PyTorch index for CUDA 11.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu102&lt;/code&gt;:  Use the PyTorch index for CUDA 10.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu101&lt;/code&gt;:  Use the PyTorch index for CUDA 10.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu100&lt;/code&gt;:  Use the PyTorch index for CUDA 10.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu92&lt;/code&gt;:  Use the PyTorch index for CUDA 9.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu91&lt;/code&gt;:  Use the PyTorch index for CUDA 9.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu90&lt;/code&gt;:  Use the PyTorch index for CUDA 9.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu80&lt;/code&gt;:  Use the PyTorch index for CUDA 8.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--verbose&quot;&gt;&lt;a href=&quot;#uv-pip-sync--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-sync--version&quot;&gt;&lt;a href=&quot;#uv-pip-sync--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv pip install

Install packages into an environment

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv pip install [OPTIONS] &lt;PACKAGE|--requirements &lt;REQUIREMENTS&gt;|--editable &lt;EDITABLE&gt;|--group &lt;GROUP&gt;&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-install--package&quot;&gt;&lt;a href=&quot;#uv-pip-install--package&quot;&lt;code&gt;PACKAGE&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install all listed packages.&lt;/p&gt;

&lt;p&gt;The order of the packages is used to determine priority during resolution.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-install--all-extras&quot;&gt;&lt;a href=&quot;#uv-pip-install--all-extras&quot;&gt;&lt;code&gt;--all-extras&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include all optional dependencies.&lt;/p&gt;

&lt;p&gt;Only applies to &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, and &lt;code&gt;setup.cfg&lt;/code&gt; sources.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-pip-install--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--break-system-packages&quot;&gt;&lt;a href=&quot;#uv-pip-install--break-system-packages&quot;&gt;&lt;code&gt;--break-system-packages&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow uv to modify an &lt;code&gt;EXTERNALLY-MANAGED&lt;/code&gt; Python installation.&lt;/p&gt;

&lt;p&gt;WARNING: &lt;code&gt;--break-system-packages&lt;/code&gt; is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like &lt;code&gt;apt&lt;/code&gt;. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or &lt;code&gt;pip&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_BREAK_SYSTEM_PACKAGES&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--build-constraints&quot;&gt;&lt;a href=&quot;#uv-pip-install--build-constraints&quot;&gt;&lt;code&gt;--build-constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--build-constraint&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt; &lt;i&gt;build-constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain build dependencies using the given requirements files when building source distributions.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the installation of that package.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_BUILD_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--cache-dir&quot;&gt;&lt;a href=&quot;#uv-pip-install--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--color&quot;&gt;&lt;a href=&quot;#uv-pip-install--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--compile-bytecode&quot;&gt;&lt;a href=&quot;#uv-pip-install--compile-bytecode&quot;&gt;&lt;code&gt;--compile-bytecode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--compile&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Compile Python files to bytecode after installation.&lt;/p&gt;

&lt;p&gt;By default, uv does not compile Python (&lt;code&gt;.py&lt;/code&gt;) files to bytecode (&lt;code&gt;__pycache__/*.pyc&lt;/code&gt;); instead, compilation is performed lazily the first time a module is imported. For use-cases in which start time is critical, such as CLI applications and Docker containers, this option can be enabled to trade longer installation times for faster start times.&lt;/p&gt;

&lt;p&gt;When enabled, uv will process the entire site-packages directory (including packages that are not being modified by the current operation) for consistency. Like pip, it will also ignore errors.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_COMPILE_BYTECODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--config-file&quot;&gt;&lt;a href=&quot;#uv-pip-install--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--config-setting&quot;&gt;&lt;a href=&quot;#uv-pip-install--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--constraints&quot;&gt;&lt;a href=&quot;#uv-pip-install--constraints&quot;&gt;&lt;code&gt;--constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--constraint&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; &lt;i&gt;constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain versions using the given requirements files.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a requirement that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the installation of that package.&lt;/p&gt;

&lt;p&gt;This is equivalent to pip&amp;#8217;s &lt;code&gt;--constraint&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--default-index&quot;&gt;&lt;a href=&quot;#uv-pip-install--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--directory&quot;&gt;&lt;a href=&quot;#uv-pip-install--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--dry-run&quot;&gt;&lt;a href=&quot;#uv-pip-install--dry-run&quot;&gt;&lt;code&gt;--dry-run&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Perform a dry run, i.e., don&amp;#8217;t actually install anything but resolve the dependencies and print the resulting plan&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--editable&quot;&gt;&lt;a href=&quot;#uv-pip-install--editable&quot;&gt;&lt;code&gt;--editable&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-e&lt;/code&gt; &lt;i&gt;editable&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install the editable package based on the provided local file path&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--exact&quot;&gt;&lt;a href=&quot;#uv-pip-install--exact&quot;&gt;&lt;code&gt;--exact&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Perform an exact sync, removing extraneous packages.&lt;/p&gt;

&lt;p&gt;By default, installing will make the minimum necessary changes to satisfy the requirements. When enabled, uv will update the environment to exactly match the requirements, removing packages that are not included in the requirements.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-pip-install--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--extra&quot;&gt;&lt;a href=&quot;#uv-pip-install--extra&quot;&gt;&lt;code&gt;--extra&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Include optional dependencies from the specified extra name; may be provided more than once.&lt;/p&gt;

&lt;p&gt;Only applies to &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, and &lt;code&gt;setup.cfg&lt;/code&gt; sources.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-pip-install--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--find-links&quot;&gt;&lt;a href=&quot;#uv-pip-install--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-pip-install--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--group&quot;&gt;&lt;a href=&quot;#uv-pip-install--group&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; &lt;i&gt;group&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install the specified dependency group from a &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If no path is provided, the &lt;code&gt;pyproject.toml&lt;/code&gt; in the working directory is used.&lt;/p&gt;

&lt;p&gt;May be provided multiple times.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--help&quot;&gt;&lt;a href=&quot;#uv-pip-install--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--index&quot;&gt;&lt;a href=&quot;#uv-pip-install--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--index-strategy&quot;&gt;&lt;a href=&quot;#uv-pip-install--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--index-url&quot;&gt;&lt;a href=&quot;#uv-pip-install--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-pip-install--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--link-mode&quot;&gt;&lt;a href=&quot;#uv-pip-install--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-install--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--native-tls&quot;&gt;&lt;a href=&quot;#uv-pip-install--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-binary&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;Multiple packages may be provided. Disable binaries for all packages with &lt;code&gt;:all:&lt;/code&gt;. Clear previously specified packages with &lt;code&gt;:none:&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-break-system-packages&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-break-system-packages&quot;&gt;&lt;code&gt;--no-break-system-packages&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt id=&quot;uv-pip-install--no-build&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;Alias for &lt;code&gt;--only-binary :all:&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-cache&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-config&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-deps&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-deps&quot;&gt;&lt;code&gt;--no-deps&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore package dependencies, instead only installing those packages explicitly listed on the command line or in the requirements files&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-index&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-progress&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-sources&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--no-verify-hashes&quot;&gt;&lt;a href=&quot;#uv-pip-install--no-verify-hashes&quot;&gt;&lt;code&gt;--no-verify-hashes&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable validation of hashes in the requirements file.&lt;/p&gt;

&lt;p&gt;By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash. To enforce hash validation, use &lt;code&gt;--require-hashes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_VERIFY_HASHES&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--offline&quot;&gt;&lt;a href=&quot;#uv-pip-install--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--only-binary&quot;&gt;&lt;a href=&quot;#uv-pip-install--only-binary&quot;&gt;&lt;code&gt;--only-binary&lt;/code&gt;&lt;/a&gt; &lt;i&gt;only-binary&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only use pre-built wheels; don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run code from the given packages. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;Multiple packages may be provided. Disable binaries for all packages with &lt;code&gt;:all:&lt;/code&gt;. Clear previously specified packages with &lt;code&gt;:none:&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--overrides&quot;&gt;&lt;a href=&quot;#uv-pip-install--overrides&quot;&gt;&lt;code&gt;--overrides&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--override&lt;/code&gt; &lt;i&gt;overrides&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Override versions using the given requirements files.&lt;/p&gt;

&lt;p&gt;Overrides files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that force a specific version of a requirement to be installed, regardless of the requirements declared by any constituent package, and regardless of whether this would be considered an invalid resolution.&lt;/p&gt;

&lt;p&gt;While constraints are &lt;em&gt;additive&lt;/em&gt;, in that they&amp;#8217;re combined with the requirements of the constituent packages, overrides are &lt;em&gt;absolute&lt;/em&gt;, in that they completely replace the requirements of the constituent packages.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OVERRIDE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--prefix&quot;&gt;&lt;a href=&quot;#uv-pip-install--prefix&quot;&gt;&lt;code&gt;--prefix&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prefix&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install packages into &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;bin&lt;/code&gt;, and other top-level folders under the specified directory, as if a virtual environment were present at that location.&lt;/p&gt;

&lt;p&gt;In general, prefer the use of &lt;code&gt;--python&lt;/code&gt; to install into an alternate environment, as scripts and other artifacts installed via &lt;code&gt;--prefix&lt;/code&gt; will reference the installing interpreter, rather than any interpreter added to the &lt;code&gt;--prefix&lt;/code&gt; directory, rendering them non-portable.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--prerelease&quot;&gt;&lt;a href=&quot;#uv-pip-install--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--project&quot;&gt;&lt;a href=&quot;#uv-pip-install--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--python&quot;&gt;&lt;a href=&quot;#uv-pip-install--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter into which packages should be installed.&lt;/p&gt;

&lt;p&gt;By default, installation requires a virtual environment. A path to an alternative Python can be provided, but it is only recommended in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--python-platform&quot;&gt;&lt;a href=&quot;#uv-pip-install--python-platform&quot;&gt;&lt;code&gt;--python-platform&lt;/code&gt;&lt;/a&gt; &lt;i&gt;python-platform&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The platform for which requirements should be installed.&lt;/p&gt;

&lt;p&gt;Represented as a &amp;quot;target triple&amp;quot;, a string that describes the target platform in terms of its CPU, vendor, and operating system name, like &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; or &lt;code&gt;aarch64-apple-darwin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When targeting macOS (Darwin), the default minimum version is &lt;code&gt;12.0&lt;/code&gt;. Use &lt;code&gt;MACOSX_DEPLOYMENT_TARGET&lt;/code&gt; to specify a different minimum version, e.g., &lt;code&gt;13.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;WARNING: When specified, uv will select wheels that are compatible with the &lt;em&gt;target&lt;/em&gt; platform; as a result, the installed distributions may not be compatible with the &lt;em&gt;current&lt;/em&gt; platform. Conversely, any distributions that are built from source may be incompatible with the &lt;em&gt;target&lt;/em&gt; platform, as they will be built for the &lt;em&gt;current&lt;/em&gt; platform. The &lt;code&gt;--python-platform&lt;/code&gt; option is intended for advanced use cases.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;windows&lt;/code&gt;:  An alias for &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;, the default target for Windows&lt;/li&gt;

&lt;li&gt;&lt;code&gt;linux&lt;/code&gt;:  An alias for &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;, the default target for Linux&lt;/li&gt;

&lt;li&gt;&lt;code&gt;macos&lt;/code&gt;:  An alias for &lt;code&gt;aarch64-apple-darwin&lt;/code&gt;, the default target for macOS&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;:  A 64-bit x86 Windows target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;i686-pc-windows-msvc&lt;/code&gt;:  A 32-bit x86 Windows target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;:  An x86 Linux target. Equivalent to &lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-apple-darwin&lt;/code&gt;:  An ARM-based macOS target, as seen on Apple Silicon devices&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-apple-darwin&lt;/code&gt;:  An x86 macOS target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-gnu&lt;/code&gt;:  An ARM64 Linux target. Equivalent to &lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-musl&lt;/code&gt;:  An ARM64 Linux target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; Linux target&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux2014&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux2014&lt;/code&gt; platform. Equivalent to &lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_17&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_17&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_28&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_28&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_31&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_31&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_32&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_32&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_33&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_33&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_34&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_34&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_35&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_35&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_36&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_36&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_37&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_37&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_38&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_38&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_39&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_39&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;x86_64-manylinux_2_40&lt;/code&gt;:  An &lt;code&gt;x86_64&lt;/code&gt; target for the &lt;code&gt;manylinux_2_40&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux2014&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux2014&lt;/code&gt; platform. Equivalent to &lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_17&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_17&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_28&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_28&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_31&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_31&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_32&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_32&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_33&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_33&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_34&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_34&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_35&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_35&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_36&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_36&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_37&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_37&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_38&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_38&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_39&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_39&lt;/code&gt; platform&lt;/li&gt;

&lt;li&gt;&lt;code&gt;aarch64-manylinux_2_40&lt;/code&gt;:  An ARM64 target for the &lt;code&gt;manylinux_2_40&lt;/code&gt; platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--python-version&quot;&gt;&lt;a href=&quot;#uv-pip-install--python-version&quot;&gt;&lt;code&gt;--python-version&lt;/code&gt;&lt;/a&gt; &lt;i&gt;python-version&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The minimum Python version that should be supported by the requirements (e.g., &lt;code&gt;3.7&lt;/code&gt; or &lt;code&gt;3.7.9&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If a patch version is omitted, the minimum patch version is assumed. For example, &lt;code&gt;3.7&lt;/code&gt; is mapped to &lt;code&gt;3.7.0&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--quiet&quot;&gt;&lt;a href=&quot;#uv-pip-install--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--refresh&quot;&gt;&lt;a href=&quot;#uv-pip-install--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--refresh-package&quot;&gt;&lt;a href=&quot;#uv-pip-install--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--reinstall&quot;&gt;&lt;a href=&quot;#uv-pip-install--reinstall&quot;&gt;&lt;code&gt;--reinstall&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--force-reinstall&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall all packages, regardless of whether they&amp;#8217;re already installed. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--reinstall-package&quot;&gt;&lt;a href=&quot;#uv-pip-install--reinstall-package&quot;&gt;&lt;code&gt;--reinstall-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;reinstall-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Reinstall a specific package, regardless of whether it&amp;#8217;s already installed. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--require-hashes&quot;&gt;&lt;a href=&quot;#uv-pip-install--require-hashes&quot;&gt;&lt;code&gt;--require-hashes&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require a matching hash for each requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;--require-hashes&lt;/code&gt; is enabled, &lt;em&gt;all&lt;/em&gt; requirements must include a hash or set of hashes, and &lt;em&gt;all&lt;/em&gt; requirements must either be pinned to exact versions (e.g., &lt;code&gt;==1.0.0&lt;/code&gt;), or be specified via direct URL.&lt;/p&gt;

&lt;p&gt;Hash-checking mode introduces a number of additional constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git dependencies are not supported. - Editable installs are not supported. - Local dependencies are not supported, unless they point to a specific wheel (&lt;code&gt;.whl&lt;/code&gt;) or source archive (&lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.tar.gz&lt;/code&gt;), as opposed to a directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_REQUIRE_HASHES&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--requirements&quot;&gt;&lt;a href=&quot;#uv-pip-install--requirements&quot;&gt;&lt;code&gt;--requirements&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--requirement&lt;/code&gt;, &lt;code&gt;-r&lt;/code&gt; &lt;i&gt;requirements&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install all packages listed in the given &lt;code&gt;requirements.txt&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;If a &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, or &lt;code&gt;setup.cfg&lt;/code&gt; file is provided, uv will extract the requirements for the relevant project.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;-&lt;/code&gt; is provided, then requirements will be read from stdin.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--resolution&quot;&gt;&lt;a href=&quot;#uv-pip-install--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--strict&quot;&gt;&lt;a href=&quot;#uv-pip-install--strict&quot;&gt;&lt;code&gt;--strict&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Validate the Python environment after completing the installation, to detect packages with missing dependencies or other issues&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--system&quot;&gt;&lt;a href=&quot;#uv-pip-install--system&quot;&gt;&lt;code&gt;--system&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install packages into the system Python environment.&lt;/p&gt;

&lt;p&gt;By default, uv installs into the virtual environment in the current working directory or any parent directory. The &lt;code&gt;--system&lt;/code&gt; option instructs uv to instead use the first Python found in the system &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;WARNING: &lt;code&gt;--system&lt;/code&gt; is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_SYSTEM_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--target&quot;&gt;&lt;a href=&quot;#uv-pip-install--target&quot;&gt;&lt;code&gt;--target&lt;/code&gt;&lt;/a&gt; &lt;i&gt;target&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--torch-backend&quot;&gt;&lt;a href=&quot;#uv-pip-install--torch-backend&quot;&gt;&lt;code&gt;--torch-backend&lt;/code&gt;&lt;/a&gt; &lt;i&gt;torch-backend&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The backend to use when fetching packages in the PyTorch ecosystem (e.g., &lt;code&gt;cpu&lt;/code&gt;, &lt;code&gt;cu126&lt;/code&gt;, or &lt;code&gt;auto&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;When set, uv will ignore the configured index URLs for packages in the PyTorch ecosystem, and will instead use the defined backend.&lt;/p&gt;

&lt;p&gt;For example, when set to &lt;code&gt;cpu&lt;/code&gt;, uv will use the CPU-only PyTorch index; when set to &lt;code&gt;cu126&lt;/code&gt;, uv will use the PyTorch index for CUDA 12.6.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;auto&lt;/code&gt; mode will attempt to detect the appropriate PyTorch index based on the currently installed CUDA drivers.&lt;/p&gt;

&lt;p&gt;This option is in preview and may change in any future release.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_TORCH_BACKEND&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Select the appropriate PyTorch index based on the operating system and CUDA driver version&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cpu&lt;/code&gt;:  Use the CPU-only PyTorch index&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu126&lt;/code&gt;:  Use the PyTorch index for CUDA 12.6&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu125&lt;/code&gt;:  Use the PyTorch index for CUDA 12.5&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu124&lt;/code&gt;:  Use the PyTorch index for CUDA 12.4&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu123&lt;/code&gt;:  Use the PyTorch index for CUDA 12.3&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu122&lt;/code&gt;:  Use the PyTorch index for CUDA 12.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu121&lt;/code&gt;:  Use the PyTorch index for CUDA 12.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu120&lt;/code&gt;:  Use the PyTorch index for CUDA 12.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu118&lt;/code&gt;:  Use the PyTorch index for CUDA 11.8&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu117&lt;/code&gt;:  Use the PyTorch index for CUDA 11.7&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu116&lt;/code&gt;:  Use the PyTorch index for CUDA 11.6&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu115&lt;/code&gt;:  Use the PyTorch index for CUDA 11.5&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu114&lt;/code&gt;:  Use the PyTorch index for CUDA 11.4&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu113&lt;/code&gt;:  Use the PyTorch index for CUDA 11.3&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu112&lt;/code&gt;:  Use the PyTorch index for CUDA 11.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu111&lt;/code&gt;:  Use the PyTorch index for CUDA 11.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu110&lt;/code&gt;:  Use the PyTorch index for CUDA 11.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu102&lt;/code&gt;:  Use the PyTorch index for CUDA 10.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu101&lt;/code&gt;:  Use the PyTorch index for CUDA 10.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu100&lt;/code&gt;:  Use the PyTorch index for CUDA 10.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu92&lt;/code&gt;:  Use the PyTorch index for CUDA 9.2&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu91&lt;/code&gt;:  Use the PyTorch index for CUDA 9.1&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu90&lt;/code&gt;:  Use the PyTorch index for CUDA 9.0&lt;/li&gt;

&lt;li&gt;&lt;code&gt;cu80&lt;/code&gt;:  Use the PyTorch index for CUDA 8.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--upgrade&quot;&gt;&lt;a href=&quot;#uv-pip-install--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-pip-install--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--user&quot;&gt;&lt;a href=&quot;#uv-pip-install--user&quot;&gt;&lt;code&gt;--user&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt id=&quot;uv-pip-install--verbose&quot;&gt;&lt;a href=&quot;#uv-pip-install--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-install--version&quot;&gt;&lt;a href=&quot;#uv-pip-install--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv pip uninstall

Uninstall packages from an environment

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv pip uninstall [OPTIONS] &lt;PACKAGE|--requirements &lt;REQUIREMENTS&gt;&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-uninstall--package&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--package&quot;&lt;code&gt;PACKAGE&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Uninstall all listed packages&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-uninstall--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--break-system-packages&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--break-system-packages&quot;&gt;&lt;code&gt;--break-system-packages&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow uv to modify an &lt;code&gt;EXTERNALLY-MANAGED&lt;/code&gt; Python installation.&lt;/p&gt;

&lt;p&gt;WARNING: &lt;code&gt;--break-system-packages&lt;/code&gt; is intended for use in continuous integration (CI) environments, when installing into Python installations that are managed by an external package manager, like &lt;code&gt;apt&lt;/code&gt;. It should be used with caution, as such Python installations explicitly recommend against modifications by other package managers (like uv or &lt;code&gt;pip&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_BREAK_SYSTEM_PACKAGES&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--cache-dir&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--color&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--config-file&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--directory&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--dry-run&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--dry-run&quot;&gt;&lt;code&gt;--dry-run&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Perform a dry run, i.e., don&amp;#8217;t actually uninstall anything but print the resulting plan&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--help&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for remote requirements files.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--native-tls&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--no-break-system-packages&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--no-break-system-packages&quot;&gt;&lt;code&gt;--no-break-system-packages&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt id=&quot;uv-pip-uninstall--no-cache&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--no-config&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--no-progress&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--offline&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--prefix&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--prefix&quot;&gt;&lt;code&gt;--prefix&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prefix&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Uninstall packages from the specified &lt;code&gt;--prefix&lt;/code&gt; directory&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--project&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--python&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter from which packages should be uninstalled.&lt;/p&gt;

&lt;p&gt;By default, uninstallation requires a virtual environment. A path to an alternative Python can be provided, but it is only recommended in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--quiet&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--requirements&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--requirements&quot;&gt;&lt;code&gt;--requirements&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--requirement&lt;/code&gt;, &lt;code&gt;-r&lt;/code&gt; &lt;i&gt;requirements&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Uninstall all packages listed in the given requirements files&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--system&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--system&quot;&gt;&lt;code&gt;--system&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use the system Python to uninstall packages.&lt;/p&gt;

&lt;p&gt;By default, uv uninstalls from the virtual environment in the current working directory or any parent directory. The &lt;code&gt;--system&lt;/code&gt; option instructs uv to instead use the first Python found in the system &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;WARNING: &lt;code&gt;--system&lt;/code&gt; is intended for use in continuous integration (CI) environments and should be used with caution, as it can modify the system Python installation.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_SYSTEM_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--target&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--target&quot;&gt;&lt;code&gt;--target&lt;/code&gt;&lt;/a&gt; &lt;i&gt;target&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Uninstall packages from the specified &lt;code&gt;--target&lt;/code&gt; directory&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--verbose&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-uninstall--version&quot;&gt;&lt;a href=&quot;#uv-pip-uninstall--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv pip freeze

List, in requirements format, packages installed in an environment

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv pip freeze [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-freeze--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--cache-dir&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--color&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--config-file&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--directory&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--exclude-editable&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--exclude-editable&quot;&gt;&lt;code&gt;--exclude-editable&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Exclude any editable packages from output&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--help&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--native-tls&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--no-cache&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--no-config&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--no-progress&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--offline&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--path&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--path&quot;&gt;&lt;code&gt;--path&lt;/code&gt;&lt;/a&gt; &lt;i&gt;paths&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Restrict to the specified installation path for listing packages (can be used multiple times)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--project&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--python&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter for which packages should be listed.&lt;/p&gt;

&lt;p&gt;By default, uv lists packages in a virtual environment but will show packages in a system Python environment if no virtual environment is found.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--quiet&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--strict&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--strict&quot;&gt;&lt;code&gt;--strict&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Validate the Python environment, to detect packages with missing dependencies and other issues&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--system&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--system&quot;&gt;&lt;code&gt;--system&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List packages in the system Python environment.&lt;/p&gt;

&lt;p&gt;Disables discovery of virtual environments.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_SYSTEM_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--verbose&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-freeze--version&quot;&gt;&lt;a href=&quot;#uv-pip-freeze--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv pip list

List, in tabular format, packages installed in an environment

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv pip list [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-list--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-pip-list--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--cache-dir&quot;&gt;&lt;a href=&quot;#uv-pip-list--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--color&quot;&gt;&lt;a href=&quot;#uv-pip-list--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--config-file&quot;&gt;&lt;a href=&quot;#uv-pip-list--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--default-index&quot;&gt;&lt;a href=&quot;#uv-pip-list--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--directory&quot;&gt;&lt;a href=&quot;#uv-pip-list--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--editable&quot;&gt;&lt;a href=&quot;#uv-pip-list--editable&quot;&gt;&lt;code&gt;--editable&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-e&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Only include editable projects&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--exclude&quot;&gt;&lt;a href=&quot;#uv-pip-list--exclude&quot;&gt;&lt;code&gt;--exclude&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Exclude the specified package(s) from the output&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--exclude-editable&quot;&gt;&lt;a href=&quot;#uv-pip-list--exclude-editable&quot;&gt;&lt;code&gt;--exclude-editable&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Exclude any editable packages from output&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-pip-list--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-pip-list--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--find-links&quot;&gt;&lt;a href=&quot;#uv-pip-list--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--format&quot;&gt;&lt;a href=&quot;#uv-pip-list--format&quot;&gt;&lt;code&gt;--format&lt;/code&gt;&lt;/a&gt; &lt;i&gt;format&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Select the output format&lt;/p&gt;

&lt;p&gt;[default: columns]&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;columns&lt;/code&gt;:  Display the list of packages in a human-readable table&lt;/li&gt;

&lt;li&gt;&lt;code&gt;freeze&lt;/code&gt;:  Display the list of packages in a &lt;code&gt;pip freeze&lt;/code&gt;-like format, with one package per line alongside its version&lt;/li&gt;

&lt;li&gt;&lt;code&gt;json&lt;/code&gt;:  Display the list of packages in a machine-readable JSON format&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--help&quot;&gt;&lt;a href=&quot;#uv-pip-list--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--index&quot;&gt;&lt;a href=&quot;#uv-pip-list--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--index-strategy&quot;&gt;&lt;a href=&quot;#uv-pip-list--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--index-url&quot;&gt;&lt;a href=&quot;#uv-pip-list--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-pip-list--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-list--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--native-tls&quot;&gt;&lt;a href=&quot;#uv-pip-list--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--no-cache&quot;&gt;&lt;a href=&quot;#uv-pip-list--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--no-config&quot;&gt;&lt;a href=&quot;#uv-pip-list--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--no-index&quot;&gt;&lt;a href=&quot;#uv-pip-list--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-list--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--no-progress&quot;&gt;&lt;a href=&quot;#uv-pip-list--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-pip-list--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--offline&quot;&gt;&lt;a href=&quot;#uv-pip-list--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--outdated&quot;&gt;&lt;a href=&quot;#uv-pip-list--outdated&quot;&gt;&lt;code&gt;--outdated&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List outdated packages.&lt;/p&gt;

&lt;p&gt;The latest version of each package will be shown alongside the installed version. Up-to-date packages will be omitted from the output.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--project&quot;&gt;&lt;a href=&quot;#uv-pip-list--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--python&quot;&gt;&lt;a href=&quot;#uv-pip-list--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter for which packages should be listed.&lt;/p&gt;

&lt;p&gt;By default, uv lists packages in a virtual environment but will show packages in a system Python environment if no virtual environment is found.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--quiet&quot;&gt;&lt;a href=&quot;#uv-pip-list--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--strict&quot;&gt;&lt;a href=&quot;#uv-pip-list--strict&quot;&gt;&lt;code&gt;--strict&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Validate the Python environment, to detect packages with missing dependencies and other issues&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--system&quot;&gt;&lt;a href=&quot;#uv-pip-list--system&quot;&gt;&lt;code&gt;--system&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List packages in the system Python environment.&lt;/p&gt;

&lt;p&gt;Disables discovery of virtual environments.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_SYSTEM_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--verbose&quot;&gt;&lt;a href=&quot;#uv-pip-list--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-list--version&quot;&gt;&lt;a href=&quot;#uv-pip-list--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv pip show

Show information about one or more installed packages

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv pip show [OPTIONS] [PACKAGE]...
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-show--package&quot;&gt;&lt;a href=&quot;#uv-pip-show--package&quot;&lt;code&gt;PACKAGE&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The package(s) to display&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-show--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-pip-show--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--cache-dir&quot;&gt;&lt;a href=&quot;#uv-pip-show--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--color&quot;&gt;&lt;a href=&quot;#uv-pip-show--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--config-file&quot;&gt;&lt;a href=&quot;#uv-pip-show--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--directory&quot;&gt;&lt;a href=&quot;#uv-pip-show--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--files&quot;&gt;&lt;a href=&quot;#uv-pip-show--files&quot;&gt;&lt;code&gt;--files&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the full list of installed files for each package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--help&quot;&gt;&lt;a href=&quot;#uv-pip-show--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-show--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--native-tls&quot;&gt;&lt;a href=&quot;#uv-pip-show--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--no-cache&quot;&gt;&lt;a href=&quot;#uv-pip-show--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--no-config&quot;&gt;&lt;a href=&quot;#uv-pip-show--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-show--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--no-progress&quot;&gt;&lt;a href=&quot;#uv-pip-show--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-pip-show--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--offline&quot;&gt;&lt;a href=&quot;#uv-pip-show--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--project&quot;&gt;&lt;a href=&quot;#uv-pip-show--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--python&quot;&gt;&lt;a href=&quot;#uv-pip-show--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to find the package in.&lt;/p&gt;

&lt;p&gt;By default, uv looks for packages in a virtual environment but will look for packages in a system Python environment if no virtual environment is found.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--quiet&quot;&gt;&lt;a href=&quot;#uv-pip-show--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--strict&quot;&gt;&lt;a href=&quot;#uv-pip-show--strict&quot;&gt;&lt;code&gt;--strict&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Validate the Python environment, to detect packages with missing dependencies and other issues&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--system&quot;&gt;&lt;a href=&quot;#uv-pip-show--system&quot;&gt;&lt;code&gt;--system&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show a package in the system Python environment.&lt;/p&gt;

&lt;p&gt;Disables discovery of virtual environments.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_SYSTEM_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--verbose&quot;&gt;&lt;a href=&quot;#uv-pip-show--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-show--version&quot;&gt;&lt;a href=&quot;#uv-pip-show--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv pip tree

Display the dependency tree for an environment

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv pip tree [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-tree--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-pip-tree--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--cache-dir&quot;&gt;&lt;a href=&quot;#uv-pip-tree--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--color&quot;&gt;&lt;a href=&quot;#uv-pip-tree--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--config-file&quot;&gt;&lt;a href=&quot;#uv-pip-tree--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--default-index&quot;&gt;&lt;a href=&quot;#uv-pip-tree--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--depth&quot;&gt;&lt;a href=&quot;#uv-pip-tree--depth&quot;&gt;&lt;code&gt;--depth&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-d&lt;/code&gt; &lt;i&gt;depth&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Maximum display depth of the dependency tree&lt;/p&gt;

&lt;p&gt;[default: 255]&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--directory&quot;&gt;&lt;a href=&quot;#uv-pip-tree--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-pip-tree--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-pip-tree--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--find-links&quot;&gt;&lt;a href=&quot;#uv-pip-tree--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--help&quot;&gt;&lt;a href=&quot;#uv-pip-tree--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--index&quot;&gt;&lt;a href=&quot;#uv-pip-tree--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--index-strategy&quot;&gt;&lt;a href=&quot;#uv-pip-tree--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--index-url&quot;&gt;&lt;a href=&quot;#uv-pip-tree--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--invert&quot;&gt;&lt;a href=&quot;#uv-pip-tree--invert&quot;&gt;&lt;code&gt;--invert&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--reverse&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-pip-tree--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-tree--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--native-tls&quot;&gt;&lt;a href=&quot;#uv-pip-tree--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--no-cache&quot;&gt;&lt;a href=&quot;#uv-pip-tree--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--no-config&quot;&gt;&lt;a href=&quot;#uv-pip-tree--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--no-dedupe&quot;&gt;&lt;a href=&quot;#uv-pip-tree--no-dedupe&quot;&gt;&lt;code&gt;--no-dedupe&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--no-index&quot;&gt;&lt;a href=&quot;#uv-pip-tree--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-tree--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--no-progress&quot;&gt;&lt;a href=&quot;#uv-pip-tree--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-pip-tree--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--offline&quot;&gt;&lt;a href=&quot;#uv-pip-tree--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--outdated&quot;&gt;&lt;a href=&quot;#uv-pip-tree--outdated&quot;&gt;&lt;code&gt;--outdated&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the latest available version of each package in the tree&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--package&quot;&gt;&lt;a href=&quot;#uv-pip-tree--package&quot;&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display only the specified packages&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--project&quot;&gt;&lt;a href=&quot;#uv-pip-tree--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--prune&quot;&gt;&lt;a href=&quot;#uv-pip-tree--prune&quot;&gt;&lt;code&gt;--prune&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prune&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Prune the given package from the display of the dependency tree&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--python&quot;&gt;&lt;a href=&quot;#uv-pip-tree--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter for which packages should be listed.&lt;/p&gt;

&lt;p&gt;By default, uv lists packages in a virtual environment but will show packages in a system Python environment if no virtual environment is found.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--quiet&quot;&gt;&lt;a href=&quot;#uv-pip-tree--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--show-version-specifiers&quot;&gt;&lt;a href=&quot;#uv-pip-tree--show-version-specifiers&quot;&gt;&lt;code&gt;--show-version-specifiers&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the version constraint(s) imposed on each package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--strict&quot;&gt;&lt;a href=&quot;#uv-pip-tree--strict&quot;&gt;&lt;code&gt;--strict&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Validate the Python environment, to detect packages with missing dependencies and other issues&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--system&quot;&gt;&lt;a href=&quot;#uv-pip-tree--system&quot;&gt;&lt;code&gt;--system&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;List packages in the system Python environment.&lt;/p&gt;

&lt;p&gt;Disables discovery of virtual environments.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_SYSTEM_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--verbose&quot;&gt;&lt;a href=&quot;#uv-pip-tree--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-tree--version&quot;&gt;&lt;a href=&quot;#uv-pip-tree--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv pip check

Verify installed packages have compatible dependencies

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv pip check [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-pip-check--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-pip-check--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--cache-dir&quot;&gt;&lt;a href=&quot;#uv-pip-check--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--color&quot;&gt;&lt;a href=&quot;#uv-pip-check--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--config-file&quot;&gt;&lt;a href=&quot;#uv-pip-check--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--directory&quot;&gt;&lt;a href=&quot;#uv-pip-check--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--help&quot;&gt;&lt;a href=&quot;#uv-pip-check--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-check--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--native-tls&quot;&gt;&lt;a href=&quot;#uv-pip-check--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--no-cache&quot;&gt;&lt;a href=&quot;#uv-pip-check--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--no-config&quot;&gt;&lt;a href=&quot;#uv-pip-check--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-pip-check--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--no-progress&quot;&gt;&lt;a href=&quot;#uv-pip-check--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-pip-check--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--offline&quot;&gt;&lt;a href=&quot;#uv-pip-check--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--project&quot;&gt;&lt;a href=&quot;#uv-pip-check--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--python&quot;&gt;&lt;a href=&quot;#uv-pip-check--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter for which packages should be checked.&lt;/p&gt;

&lt;p&gt;By default, uv checks packages in a virtual environment but will check packages in a system Python environment if no virtual environment is found.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--quiet&quot;&gt;&lt;a href=&quot;#uv-pip-check--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--system&quot;&gt;&lt;a href=&quot;#uv-pip-check--system&quot;&gt;&lt;code&gt;--system&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Check packages in the system Python environment.&lt;/p&gt;

&lt;p&gt;Disables discovery of virtual environments.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_SYSTEM_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--verbose&quot;&gt;&lt;a href=&quot;#uv-pip-check--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-pip-check--version&quot;&gt;&lt;a href=&quot;#uv-pip-check--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv venv

Create a virtual environment.

By default, creates a virtual environment named `.venv` in the working directory. An alternative path may be provided positionally.

If in a project, the default environment name can be changed with the `UV_PROJECT_ENVIRONMENT` environment variable; this only applies when run from the project root directory.

If a virtual environment exists at the target path, it will be removed and a new, empty virtual environment will be created.

When using uv, the virtual environment does not need to be activated. uv will find a virtual environment (named `.venv`) in the working directory or any parent directories.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv venv [OPTIONS] [PATH]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-venv--path&quot;&gt;&lt;a href=&quot;#uv-venv--path&quot;&lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to the virtual environment to create.&lt;/p&gt;

&lt;p&gt;Default to &lt;code&gt;.venv&lt;/code&gt; in the working directory.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved relative to the working directory.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-venv--allow-existing&quot;&gt;&lt;a href=&quot;#uv-venv--allow-existing&quot;&gt;&lt;code&gt;--allow-existing&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Preserve any existing files or directories at the target path.&lt;/p&gt;

&lt;p&gt;By default, &lt;code&gt;uv venv&lt;/code&gt; will remove an existing virtual environment at the given path, and exit with an error if the path is non-empty but &lt;em&gt;not&lt;/em&gt; a virtual environment. The &lt;code&gt;--allow-existing&lt;/code&gt; option will instead write to the given path, regardless of its contents, and without clearing it beforehand.&lt;/p&gt;

&lt;p&gt;WARNING: This option can lead to unexpected behavior if the existing virtual environment and the newly-created virtual environment are linked to different Python interpreters.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-venv--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--cache-dir&quot;&gt;&lt;a href=&quot;#uv-venv--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--color&quot;&gt;&lt;a href=&quot;#uv-venv--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--config-file&quot;&gt;&lt;a href=&quot;#uv-venv--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--default-index&quot;&gt;&lt;a href=&quot;#uv-venv--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--directory&quot;&gt;&lt;a href=&quot;#uv-venv--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-venv--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-venv--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--find-links&quot;&gt;&lt;a href=&quot;#uv-venv--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--help&quot;&gt;&lt;a href=&quot;#uv-venv--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--index&quot;&gt;&lt;a href=&quot;#uv-venv--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--index-strategy&quot;&gt;&lt;a href=&quot;#uv-venv--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--index-url&quot;&gt;&lt;a href=&quot;#uv-venv--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-venv--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--link-mode&quot;&gt;&lt;a href=&quot;#uv-venv--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;This option is only used for installing seed packages.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--managed-python&quot;&gt;&lt;a href=&quot;#uv-venv--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--native-tls&quot;&gt;&lt;a href=&quot;#uv-venv--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--no-cache&quot;&gt;&lt;a href=&quot;#uv-venv--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--no-config&quot;&gt;&lt;a href=&quot;#uv-venv--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--no-index&quot;&gt;&lt;a href=&quot;#uv-venv--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-venv--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--no-progress&quot;&gt;&lt;a href=&quot;#uv-venv--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--no-project&quot;&gt;&lt;a href=&quot;#uv-venv--no-project&quot;&gt;&lt;code&gt;--no-project&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-workspace&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering a project or workspace.&lt;/p&gt;

&lt;p&gt;By default, uv searches for projects in the current directory or any parent directory to determine the default path of the virtual environment and check for Python version constraints, if any.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-venv--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--offline&quot;&gt;&lt;a href=&quot;#uv-venv--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--project&quot;&gt;&lt;a href=&quot;#uv-venv--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--prompt&quot;&gt;&lt;a href=&quot;#uv-venv--prompt&quot;&gt;&lt;code&gt;--prompt&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prompt&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Provide an alternative prompt prefix for the virtual environment.&lt;/p&gt;

&lt;p&gt;By default, the prompt is dependent on whether a path was provided to &lt;code&gt;uv venv&lt;/code&gt;. If provided (e.g, &lt;code&gt;uv venv project&lt;/code&gt;), the prompt is set to the directory name. If not provided (&lt;code&gt;uv venv&lt;/code&gt;), the prompt is set to the current directory&amp;#8217;s name.&lt;/p&gt;

&lt;p&gt;If &amp;quot;.&amp;quot; is provided, the current directory name will be used regardless of whether a path was provided to &lt;code&gt;uv venv&lt;/code&gt;.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--python&quot;&gt;&lt;a href=&quot;#uv-venv--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use for the virtual environment.&lt;/p&gt;

&lt;p&gt;During virtual environment creation, uv will not look for Python interpreters in virtual environments.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; for details on Python discovery and supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--quiet&quot;&gt;&lt;a href=&quot;#uv-venv--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--refresh&quot;&gt;&lt;a href=&quot;#uv-venv--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--refresh-package&quot;&gt;&lt;a href=&quot;#uv-venv--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--relocatable&quot;&gt;&lt;a href=&quot;#uv-venv--relocatable&quot;&gt;&lt;code&gt;--relocatable&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Make the virtual environment relocatable.&lt;/p&gt;

&lt;p&gt;A relocatable virtual environment can be moved around and redistributed without invalidating its associated entrypoint and activation scripts.&lt;/p&gt;

&lt;p&gt;Note that this can only be guaranteed for standard &lt;code&gt;console_scripts&lt;/code&gt; and &lt;code&gt;gui_scripts&lt;/code&gt;. Other scripts may be adjusted if they ship with a generic &lt;code&gt;#!python[w]&lt;/code&gt; shebang, and binaries are left as-is.&lt;/p&gt;

&lt;p&gt;As a result of making the environment relocatable (by way of writing relative, rather than absolute paths), the entrypoints and scripts themselves will &lt;em&gt;not&lt;/em&gt; be relocatable. In other words, copying those entrypoints and scripts to a location outside the environment will not work, as they reference paths relative to the environment itself.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--seed&quot;&gt;&lt;a href=&quot;#uv-venv--seed&quot;&gt;&lt;code&gt;--seed&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Install seed packages (one or more of: &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt;, and &lt;code&gt;wheel&lt;/code&gt;) into the virtual environment.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;setuptools&lt;/code&gt; and &lt;code&gt;wheel&lt;/code&gt; are not included in Python 3.12+ environments.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_VENV_SEED&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-venv--system-site-packages&quot;&gt;&lt;a href=&quot;#uv-venv--system-site-packages&quot;&gt;&lt;code&gt;--system-site-packages&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Give the virtual environment access to the system site packages directory.&lt;/p&gt;

&lt;p&gt;Unlike &lt;code&gt;pip&lt;/code&gt;, when a virtual environment is created with &lt;code&gt;--system-site-packages&lt;/code&gt;, uv will &lt;em&gt;not&lt;/em&gt; take system site packages into account when running commands like &lt;code&gt;uv pip list&lt;/code&gt; or &lt;code&gt;uv pip install&lt;/code&gt;. The &lt;code&gt;--system-site-packages&lt;/code&gt; flag will provide the virtual environment with access to the system site packages directory at runtime, but will not affect the behavior of uv commands.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--verbose&quot;&gt;&lt;a href=&quot;#uv-venv--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-venv--version&quot;&gt;&lt;a href=&quot;#uv-venv--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv build

Build Python packages into source distributions and wheels.

`uv build` accepts a path to a directory or source distribution, which defaults to the current working directory.

By default, if passed a directory, `uv build` will build a source distribution (&quot;sdist&quot;) from the source directory, and a binary distribution (&quot;wheel&quot;) from the source distribution.

`uv build --sdist` can be used to build only the source distribution, `uv build --wheel` can be used to build only the binary distribution, and `uv build --sdist --wheel` can be used to build both distributions from source.

If passed a source distribution, `uv build --wheel` will build a wheel from the source distribution.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv build [OPTIONS] [SRC]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-build--src&quot;&gt;&lt;a href=&quot;#uv-build--src&quot;&lt;code&gt;SRC&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The directory from which distributions should be built, or a source distribution archive to build into a wheel.&lt;/p&gt;

&lt;p&gt;Defaults to the current working directory.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-build--all-packages&quot;&gt;&lt;a href=&quot;#uv-build--all-packages&quot;&gt;&lt;code&gt;--all-packages&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--all&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Builds all packages in the workspace.&lt;/p&gt;

&lt;p&gt;The workspace will be discovered from the provided source directory, or the current directory if no source directory is provided.&lt;/p&gt;

&lt;p&gt;If the workspace member does not exist, uv will exit with an error.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-build--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--build-constraints&quot;&gt;&lt;a href=&quot;#uv-build--build-constraints&quot;&gt;&lt;code&gt;--build-constraints&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--build-constraint&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt; &lt;i&gt;build-constraints&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Constrain build dependencies using the given requirements files when building distributions.&lt;/p&gt;

&lt;p&gt;Constraints files are &lt;code&gt;requirements.txt&lt;/code&gt;-like files that only control the &lt;em&gt;version&lt;/em&gt; of a build dependency that&amp;#8217;s installed. However, including a package in a constraints file will &lt;em&gt;not&lt;/em&gt; trigger the inclusion of that package on its own.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_BUILD_CONSTRAINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--cache-dir&quot;&gt;&lt;a href=&quot;#uv-build--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--color&quot;&gt;&lt;a href=&quot;#uv-build--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--config-file&quot;&gt;&lt;a href=&quot;#uv-build--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--config-setting&quot;&gt;&lt;a href=&quot;#uv-build--config-setting&quot;&gt;&lt;code&gt;--config-setting&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--config-settings&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt; &lt;i&gt;config-setting&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Settings to pass to the PEP 517 build backend, specified as &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--default-index&quot;&gt;&lt;a href=&quot;#uv-build--default-index&quot;&gt;&lt;code&gt;--default-index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;default-index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the default package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--index&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_DEFAULT_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--directory&quot;&gt;&lt;a href=&quot;#uv-build--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--exclude-newer&quot;&gt;&lt;a href=&quot;#uv-build--exclude-newer&quot;&gt;&lt;code&gt;--exclude-newer&lt;/code&gt;&lt;/a&gt; &lt;i&gt;exclude-newer&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Limit candidate packages to those that were uploaded prior to the given date.&lt;/p&gt;

&lt;p&gt;Accepts both RFC 3339 timestamps (e.g., &lt;code&gt;2006-12-02T02:07:43Z&lt;/code&gt;) and local dates in the same format (e.g., &lt;code&gt;2006-12-02&lt;/code&gt;) in your system&amp;#8217;s configured time zone.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXCLUDE_NEWER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--extra-index-url&quot;&gt;&lt;a href=&quot;#uv-build--extra-index-url&quot;&gt;&lt;code&gt;--extra-index-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;extra-index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--index&lt;/code&gt; instead) Extra URLs of package indexes to use, in addition to &lt;code&gt;--index-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--index-url&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--extra-index-url&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_EXTRA_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--find-links&quot;&gt;&lt;a href=&quot;#uv-build--find-links&quot;&gt;&lt;code&gt;--find-links&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-f&lt;/code&gt; &lt;i&gt;find-links&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Locations to search for candidate distributions, in addition to those found in the registry indexes.&lt;/p&gt;

&lt;p&gt;If a path, the target must be a directory that contains packages as wheel files (&lt;code&gt;.whl&lt;/code&gt;) or source distributions (e.g., &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;) at the top level.&lt;/p&gt;

&lt;p&gt;If a URL, the page must contain a flat list of links to package files adhering to the formats described above.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FIND_LINKS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--force-pep517&quot;&gt;&lt;a href=&quot;#uv-build--force-pep517&quot;&gt;&lt;code&gt;--force-pep517&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Always build through PEP 517, don&amp;#8217;t use the fast path for the uv build backend.&lt;/p&gt;

&lt;p&gt;By default, uv won&amp;#8217;t create a PEP 517 build environment for packages using the uv build backend, but use a fast path that calls into the build backend directly. This option forces always using PEP 517.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--fork-strategy&quot;&gt;&lt;a href=&quot;#uv-build--fork-strategy&quot;&gt;&lt;code&gt;--fork-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;fork-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting multiple versions of a given package across Python versions and platforms.&lt;/p&gt;

&lt;p&gt;By default, uv will optimize for selecting the latest version of each package for each supported Python version (&lt;code&gt;requires-python&lt;/code&gt;), while minimizing the number of selected versions across platforms.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;fewest&lt;/code&gt;, uv will minimize the number of selected versions for each package, preferring older versions that are compatible with a wider range of supported Python versions or platforms.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_FORK_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fewest&lt;/code&gt;:  Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms&lt;/li&gt;

&lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt;:  Optimize for selecting latest supported version of each package, for each supported Python version&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--help&quot;&gt;&lt;a href=&quot;#uv-build--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--index&quot;&gt;&lt;a href=&quot;#uv-build--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URLs to use when resolving dependencies, in addition to the default index.&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;All indexes provided via this flag take priority over the index specified by &lt;code&gt;--default-index&lt;/code&gt; (which defaults to PyPI). When multiple &lt;code&gt;--index&lt;/code&gt; flags are provided, earlier values take priority.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--index-strategy&quot;&gt;&lt;a href=&quot;#uv-build--index-strategy&quot;&gt;&lt;code&gt;--index-strategy&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index-strategy&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when resolving against multiple index URLs.&lt;/p&gt;

&lt;p&gt;By default, uv will stop at the first index on which a given package is available, and limit resolutions to those present on that first index (&lt;code&gt;first-index&lt;/code&gt;). This prevents &amp;quot;dependency confusion&amp;quot; attacks, whereby an attacker can upload a malicious package under the same name to an alternate index.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_STRATEGY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-index&lt;/code&gt;:  Only use results from the first index that returns a match for a given package name&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-first-match&lt;/code&gt;:  Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next&lt;/li&gt;

&lt;li&gt;&lt;code&gt;unsafe-best-match&lt;/code&gt;:  Search for every package name across all indexes, preferring the &amp;quot;best&amp;quot; version found. If a package version is in multiple indexes, only look at the entry for the first index&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--index-url&quot;&gt;&lt;a href=&quot;#uv-build--index-url&quot;&gt;&lt;code&gt;--index-url&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-i&lt;/code&gt; &lt;i&gt;index-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;(Deprecated: use &lt;code&gt;--default-index&lt;/code&gt; instead) The URL of the Python package index (by default: &amp;lt;https://pypi.org/simple&amp;gt;).&lt;/p&gt;

&lt;p&gt;Accepts either a repository compliant with PEP 503 (the simple repository API), or a local directory laid out in the same format.&lt;/p&gt;

&lt;p&gt;The index given by this flag is given lower priority than all other indexes specified via the &lt;code&gt;--extra-index-url&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INDEX_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-build--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for index URLs.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--link-mode&quot;&gt;&lt;a href=&quot;#uv-build--link-mode&quot;&gt;&lt;code&gt;--link-mode&lt;/code&gt;&lt;/a&gt; &lt;i&gt;link-mode&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The method to use when installing packages from the global cache.&lt;/p&gt;

&lt;p&gt;This option is only used when building source distributions.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;clone&lt;/code&gt; (also known as Copy-on-Write) on macOS, and &lt;code&gt;hardlink&lt;/code&gt; on Linux and Windows.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_LINK_MODE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;:  Clone (i.e., copy-on-write) packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;:  Copy packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;hardlink&lt;/code&gt;:  Hard link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;

&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;:  Symbolically link packages from the wheel into the &lt;code&gt;site-packages&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--managed-python&quot;&gt;&lt;a href=&quot;#uv-build--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--native-tls&quot;&gt;&lt;a href=&quot;#uv-build--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-binary&quot;&gt;&lt;a href=&quot;#uv-build--no-binary&quot;&gt;&lt;code&gt;--no-binary&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels.&lt;/p&gt;

&lt;p&gt;The given packages will be built and installed from source. The resolver will still use pre-built wheels to extract package metadata, if available.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-binary-package&quot;&gt;&lt;a href=&quot;#uv-build--no-binary-package&quot;&gt;&lt;code&gt;--no-binary-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-binary-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t install pre-built wheels for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BINARY_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-build&quot;&gt;&lt;a href=&quot;#uv-build--no-build&quot;&gt;&lt;code&gt;--no-build&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions.&lt;/p&gt;

&lt;p&gt;When enabled, resolving will not run arbitrary Python code. The cached wheels of already-built source distributions will be reused, but operations that require building distributions will exit with an error.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-build-isolation&quot;&gt;&lt;a href=&quot;#uv-build--no-build-isolation&quot;&gt;&lt;code&gt;--no-build-isolation&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions.&lt;/p&gt;

&lt;p&gt;Assumes that build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_ISOLATION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-build-isolation-package&quot;&gt;&lt;a href=&quot;#uv-build--no-build-isolation-package&quot;&gt;&lt;code&gt;--no-build-isolation-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-isolation-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable isolation when building source distributions for a specific package.&lt;/p&gt;

&lt;p&gt;Assumes that the packages&amp;#8217; build dependencies specified by PEP 518 are already installed.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-build-logs&quot;&gt;&lt;a href=&quot;#uv-build--no-build-logs&quot;&gt;&lt;code&gt;--no-build-logs&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide logs from the build backend&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-build-package&quot;&gt;&lt;a href=&quot;#uv-build--no-build-package&quot;&gt;&lt;code&gt;--no-build-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;no-build-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Don&amp;#8217;t build source distributions for a specific package&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_BUILD_PACKAGE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-cache&quot;&gt;&lt;a href=&quot;#uv-build--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-config&quot;&gt;&lt;a href=&quot;#uv-build--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-index&quot;&gt;&lt;a href=&quot;#uv-build--no-index&quot;&gt;&lt;code&gt;--no-index&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via &lt;code&gt;--find-links&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-build--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-progress&quot;&gt;&lt;a href=&quot;#uv-build--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-build--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-sources&quot;&gt;&lt;a href=&quot;#uv-build--no-sources&quot;&gt;&lt;code&gt;--no-sources&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Ignore the &lt;code&gt;tool.uv.sources&lt;/code&gt; table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--no-verify-hashes&quot;&gt;&lt;a href=&quot;#uv-build--no-verify-hashes&quot;&gt;&lt;code&gt;--no-verify-hashes&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable validation of hashes in the requirements file.&lt;/p&gt;

&lt;p&gt;By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash. To enforce hash validation, use &lt;code&gt;--require-hashes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_VERIFY_HASHES&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--offline&quot;&gt;&lt;a href=&quot;#uv-build--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--out-dir&quot;&gt;&lt;a href=&quot;#uv-build--out-dir&quot;&gt;&lt;code&gt;--out-dir&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-o&lt;/code&gt; &lt;i&gt;out-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The output directory to which distributions should be written.&lt;/p&gt;

&lt;p&gt;Defaults to the &lt;code&gt;dist&lt;/code&gt; subdirectory within the source directory, or the directory containing the source distribution archive.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--package&quot;&gt;&lt;a href=&quot;#uv-build--package&quot;&gt;&lt;code&gt;--package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Build a specific package in the workspace.&lt;/p&gt;

&lt;p&gt;The workspace will be discovered from the provided source directory, or the current directory if no source directory is provided.&lt;/p&gt;

&lt;p&gt;If the workspace member does not exist, uv will exit with an error.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--prerelease&quot;&gt;&lt;a href=&quot;#uv-build--prerelease&quot;&gt;&lt;code&gt;--prerelease&lt;/code&gt;&lt;/a&gt; &lt;i&gt;prerelease&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when considering pre-release versions.&lt;/p&gt;

&lt;p&gt;By default, uv will accept pre-releases for packages that &lt;em&gt;only&lt;/em&gt; publish pre-releases, along with first-party requirements that contain an explicit pre-release marker in the declared specifiers (&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PRERELEASE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;:  Disallow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;allow&lt;/code&gt;:  Allow all pre-release versions&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release&lt;/li&gt;

&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;:  Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements&lt;/li&gt;

&lt;li&gt;&lt;code&gt;if-necessary-or-explicit&lt;/code&gt;:  Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--project&quot;&gt;&lt;a href=&quot;#uv-build--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--python&quot;&gt;&lt;a href=&quot;#uv-build--python&quot;&gt;&lt;code&gt;--python&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;python&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The Python interpreter to use for the build environment.&lt;/p&gt;

&lt;p&gt;By default, builds are executed in isolated virtual environments. The discovered interpreter will be used to create those environments, and will be symlinked or copied in depending on the platform.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;#uv-python&quot;&gt;uv python&lt;/a&gt; to view supported request formats.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--quiet&quot;&gt;&lt;a href=&quot;#uv-build--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--refresh&quot;&gt;&lt;a href=&quot;#uv-build--refresh&quot;&gt;&lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh all cached data&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--refresh-package&quot;&gt;&lt;a href=&quot;#uv-build--refresh-package&quot;&gt;&lt;code&gt;--refresh-package&lt;/code&gt;&lt;/a&gt; &lt;i&gt;refresh-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Refresh cached data for a specific package&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--require-hashes&quot;&gt;&lt;a href=&quot;#uv-build--require-hashes&quot;&gt;&lt;code&gt;--require-hashes&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require a matching hash for each requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will verify any available hashes in the requirements file, but will not require that all requirements have an associated hash.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;--require-hashes&lt;/code&gt; is enabled, &lt;em&gt;all&lt;/em&gt; requirements must include a hash or set of hashes, and &lt;em&gt;all&lt;/em&gt; requirements must either be pinned to exact versions (e.g., &lt;code&gt;==1.0.0&lt;/code&gt;), or be specified via direct URL.&lt;/p&gt;

&lt;p&gt;Hash-checking mode introduces a number of additional constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git dependencies are not supported. - Editable installs are not supported. - Local dependencies are not supported, unless they point to a specific wheel (&lt;code&gt;.whl&lt;/code&gt;) or source archive (&lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.tar.gz&lt;/code&gt;), as opposed to a directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_REQUIRE_HASHES&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--resolution&quot;&gt;&lt;a href=&quot;#uv-build--resolution&quot;&gt;&lt;code&gt;--resolution&lt;/code&gt;&lt;/a&gt; &lt;i&gt;resolution&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The strategy to use when selecting between the different compatible versions for a given package requirement.&lt;/p&gt;

&lt;p&gt;By default, uv will use the latest compatible version of each package (&lt;code&gt;highest&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_RESOLUTION&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;highest&lt;/code&gt;:  Resolve the highest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest&lt;/code&gt;:  Resolve the lowest compatible version of each package&lt;/li&gt;

&lt;li&gt;&lt;code&gt;lowest-direct&lt;/code&gt;:  Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-build--sdist&quot;&gt;&lt;a href=&quot;#uv-build--sdist&quot;&gt;&lt;code&gt;--sdist&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Build a source distribution (&amp;quot;sdist&amp;quot;) from the given directory&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--upgrade&quot;&gt;&lt;a href=&quot;#uv-build--upgrade&quot;&gt;&lt;code&gt;--upgrade&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-U&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow package upgrades, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--upgrade-package&quot;&gt;&lt;a href=&quot;#uv-build--upgrade-package&quot;&gt;&lt;code&gt;--upgrade-package&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-P&lt;/code&gt; &lt;i&gt;upgrade-package&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies &lt;code&gt;--refresh-package&lt;/code&gt;&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--verbose&quot;&gt;&lt;a href=&quot;#uv-build--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--version&quot;&gt;&lt;a href=&quot;#uv-build--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-build--wheel&quot;&gt;&lt;a href=&quot;#uv-build--wheel&quot;&gt;&lt;code&gt;--wheel&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Build a binary distribution (&amp;quot;wheel&amp;quot;) from the given directory&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv publish

Upload distributions to an index

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv publish [OPTIONS] [FILES]...
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-publish--files&quot;&gt;&lt;a href=&quot;#uv-publish--files&quot;&lt;code&gt;FILES&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Paths to the files to upload. Accepts glob expressions.&lt;/p&gt;

&lt;p&gt;Defaults to the &lt;code&gt;dist&lt;/code&gt; directory. Selects only wheels and source distributions, while ignoring other files.&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-publish--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-publish--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--cache-dir&quot;&gt;&lt;a href=&quot;#uv-publish--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--check-url&quot;&gt;&lt;a href=&quot;#uv-publish--check-url&quot;&gt;&lt;code&gt;--check-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;check-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Check an index URL for existing files to skip duplicate uploads.&lt;/p&gt;

&lt;p&gt;This option allows retrying publishing that failed after only some, but not all files have been uploaded, and handles error due to parallel uploads of the same file.&lt;/p&gt;

&lt;p&gt;Before uploading, the index is checked. If the exact same file already exists in the index, the file will not be uploaded. If an error occurred during the upload, the index is checked again, to handle cases where the identical file was uploaded twice in parallel.&lt;/p&gt;

&lt;p&gt;The exact behavior will vary based on the index. When uploading to PyPI, uploading the same file succeeds even without &lt;code&gt;--check-url&lt;/code&gt;, while most other indexes error.&lt;/p&gt;

&lt;p&gt;The index must provide one of the supported hashes (SHA-256, SHA-384, or SHA-512).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PUBLISH_CHECK_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--color&quot;&gt;&lt;a href=&quot;#uv-publish--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--config-file&quot;&gt;&lt;a href=&quot;#uv-publish--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--directory&quot;&gt;&lt;a href=&quot;#uv-publish--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-publish--help&quot;&gt;&lt;a href=&quot;#uv-publish--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-publish--index&quot;&gt;&lt;a href=&quot;#uv-publish--index&quot;&gt;&lt;code&gt;--index&lt;/code&gt;&lt;/a&gt; &lt;i&gt;index&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The name of an index in the configuration to use for publishing.&lt;/p&gt;

&lt;p&gt;The index must have a &lt;code&gt;publish-url&lt;/code&gt; setting, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[[tool.uv.index]]
name = &amp;quot;pypi&amp;quot;
url = &amp;quot;https://pypi.org/simple&amp;quot;
publish-url = &amp;quot;https://upload.pypi.org/legacy/&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The index &lt;code&gt;url&lt;/code&gt; will be used to check for existing files to skip duplicate uploads.&lt;/p&gt;

&lt;p&gt;With these settings, the following two calls are equivalent:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;uv publish --index pypi
uv publish --publish-url https://upload.pypi.org/legacy/ --check-url https://pypi.org/simple&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PUBLISH_INDEX&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--keyring-provider&quot;&gt;&lt;a href=&quot;#uv-publish--keyring-provider&quot;&gt;&lt;code&gt;--keyring-provider&lt;/code&gt;&lt;/a&gt; &lt;i&gt;keyring-provider&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Attempt to use &lt;code&gt;keyring&lt;/code&gt; for authentication for remote requirements files.&lt;/p&gt;

&lt;p&gt;At present, only &lt;code&gt;--keyring-provider subprocess&lt;/code&gt; is supported, which configures uv to use the &lt;code&gt;keyring&lt;/code&gt; CLI to handle authentication.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_KEYRING_PROVIDER&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;:  Do not use keyring for credential lookup&lt;/li&gt;

&lt;li&gt;&lt;code&gt;subprocess&lt;/code&gt;:  Use the &lt;code&gt;keyring&lt;/code&gt; command for credential lookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--managed-python&quot;&gt;&lt;a href=&quot;#uv-publish--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--native-tls&quot;&gt;&lt;a href=&quot;#uv-publish--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--no-cache&quot;&gt;&lt;a href=&quot;#uv-publish--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--no-config&quot;&gt;&lt;a href=&quot;#uv-publish--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-publish--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--no-progress&quot;&gt;&lt;a href=&quot;#uv-publish--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-publish--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-publish--offline&quot;&gt;&lt;a href=&quot;#uv-publish--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--password&quot;&gt;&lt;a href=&quot;#uv-publish--password&quot;&gt;&lt;code&gt;--password&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-p&lt;/code&gt; &lt;i&gt;password&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The password for the upload&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PUBLISH_PASSWORD&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--project&quot;&gt;&lt;a href=&quot;#uv-publish--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--publish-url&quot;&gt;&lt;a href=&quot;#uv-publish--publish-url&quot;&gt;&lt;code&gt;--publish-url&lt;/code&gt;&lt;/a&gt; &lt;i&gt;publish-url&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The URL of the upload endpoint (not the index URL).&lt;/p&gt;

&lt;p&gt;Note that there are typically different URLs for index access (e.g., &lt;code&gt;https:://.../simple&lt;/code&gt;) and index upload.&lt;/p&gt;

&lt;p&gt;Defaults to PyPI&amp;#8217;s publish URL (&amp;lt;https://upload.pypi.org/legacy/&amp;gt;).&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PUBLISH_URL&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--quiet&quot;&gt;&lt;a href=&quot;#uv-publish--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-publish--token&quot;&gt;&lt;a href=&quot;#uv-publish--token&quot;&gt;&lt;code&gt;--token&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-t&lt;/code&gt; &lt;i&gt;token&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The token for the upload.&lt;/p&gt;

&lt;p&gt;Using a token is equivalent to passing &lt;code&gt;__token__&lt;/code&gt; as &lt;code&gt;--username&lt;/code&gt; and the token as &lt;code&gt;--password&lt;/code&gt; password.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PUBLISH_TOKEN&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--trusted-publishing&quot;&gt;&lt;a href=&quot;#uv-publish--trusted-publishing&quot;&gt;&lt;code&gt;--trusted-publishing&lt;/code&gt;&lt;/a&gt; &lt;i&gt;trusted-publishing&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Configure using trusted publishing through GitHub Actions.&lt;/p&gt;

&lt;p&gt;By default, uv checks for trusted publishing when running in GitHub Actions, but ignores it if it isn&amp;#8217;t configured or the workflow doesn&amp;#8217;t have enough permissions (e.g., a pull request from a fork).&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;automatic&lt;/code&gt;:  Try trusted publishing when we&amp;#8217;re already in GitHub Actions, continue if that fails&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--username&quot;&gt;&lt;a href=&quot;#uv-publish--username&quot;&gt;&lt;code&gt;--username&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-u&lt;/code&gt; &lt;i&gt;username&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The username for the upload&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PUBLISH_USERNAME&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-publish--verbose&quot;&gt;&lt;a href=&quot;#uv-publish--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-publish--version&quot;&gt;&lt;a href=&quot;#uv-publish--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv cache

Manage uv's cache

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv cache [OPTIONS] &lt;COMMAND&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Commands&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt&gt;&lt;a href=&quot;#uv-cache-clean&quot;&gt;&lt;code&gt;uv cache clean&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Clear the cache, removing all entries or those linked to specific packages&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-cache-prune&quot;&gt;&lt;code&gt;uv cache prune&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Prune all unreachable objects from the cache&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;#uv-cache-dir&quot;&gt;&lt;code&gt;uv cache dir&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Show the cache directory&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

### uv cache clean

Clear the cache, removing all entries or those linked to specific packages

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv cache clean [OPTIONS] [PACKAGE]...
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-cache-clean--package&quot;&gt;&lt;a href=&quot;#uv-cache-clean--package&quot;&lt;code&gt;PACKAGE&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The packages to remove from the cache&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-cache-clean--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-cache-clean--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--cache-dir&quot;&gt;&lt;a href=&quot;#uv-cache-clean--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--color&quot;&gt;&lt;a href=&quot;#uv-cache-clean--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--config-file&quot;&gt;&lt;a href=&quot;#uv-cache-clean--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--directory&quot;&gt;&lt;a href=&quot;#uv-cache-clean--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--help&quot;&gt;&lt;a href=&quot;#uv-cache-clean--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--managed-python&quot;&gt;&lt;a href=&quot;#uv-cache-clean--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--native-tls&quot;&gt;&lt;a href=&quot;#uv-cache-clean--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--no-cache&quot;&gt;&lt;a href=&quot;#uv-cache-clean--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--no-config&quot;&gt;&lt;a href=&quot;#uv-cache-clean--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-cache-clean--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--no-progress&quot;&gt;&lt;a href=&quot;#uv-cache-clean--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-cache-clean--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--offline&quot;&gt;&lt;a href=&quot;#uv-cache-clean--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--project&quot;&gt;&lt;a href=&quot;#uv-cache-clean--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--quiet&quot;&gt;&lt;a href=&quot;#uv-cache-clean--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--verbose&quot;&gt;&lt;a href=&quot;#uv-cache-clean--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-clean--version&quot;&gt;&lt;a href=&quot;#uv-cache-clean--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv cache prune

Prune all unreachable objects from the cache

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv cache prune [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-cache-prune--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-cache-prune--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--cache-dir&quot;&gt;&lt;a href=&quot;#uv-cache-prune--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--ci&quot;&gt;&lt;a href=&quot;#uv-cache-prune--ci&quot;&gt;&lt;code&gt;--ci&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Optimize the cache for persistence in a continuous integration environment, like GitHub Actions.&lt;/p&gt;

&lt;p&gt;By default, uv caches both the wheels that it builds from source and the pre-built wheels that it downloads directly, to enable high-performance package installation. In some scenarios, though, persisting pre-built wheels may be undesirable. For example, in GitHub Actions, it&amp;#8217;s faster to omit pre-built wheels from the cache and instead have re-download them on each run. However, it typically &lt;em&gt;is&lt;/em&gt; faster to cache wheels that are built from source, since the wheel building process can be expensive, especially for extension modules.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;--ci&lt;/code&gt; mode, uv will prune any pre-built wheels from the cache, but retain any wheels that were built from source.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--color&quot;&gt;&lt;a href=&quot;#uv-cache-prune--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--config-file&quot;&gt;&lt;a href=&quot;#uv-cache-prune--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--directory&quot;&gt;&lt;a href=&quot;#uv-cache-prune--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--help&quot;&gt;&lt;a href=&quot;#uv-cache-prune--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--managed-python&quot;&gt;&lt;a href=&quot;#uv-cache-prune--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--native-tls&quot;&gt;&lt;a href=&quot;#uv-cache-prune--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--no-cache&quot;&gt;&lt;a href=&quot;#uv-cache-prune--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--no-config&quot;&gt;&lt;a href=&quot;#uv-cache-prune--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-cache-prune--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--no-progress&quot;&gt;&lt;a href=&quot;#uv-cache-prune--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-cache-prune--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--offline&quot;&gt;&lt;a href=&quot;#uv-cache-prune--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--project&quot;&gt;&lt;a href=&quot;#uv-cache-prune--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--quiet&quot;&gt;&lt;a href=&quot;#uv-cache-prune--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--verbose&quot;&gt;&lt;a href=&quot;#uv-cache-prune--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-prune--version&quot;&gt;&lt;a href=&quot;#uv-cache-prune--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

### uv cache dir

Show the cache directory.

By default, the cache is stored in `$XDG_CACHE_HOME/uv` or `$HOME/.cache/uv` on Unix and `%LOCALAPPDATA%\uv\cache` on Windows.

When `--no-cache` is used, the cache is stored in a temporary directory and discarded when the process exits.

An alternative cache directory may be specified via the `cache-dir` setting, the `--cache-dir` option, or the `$UV_CACHE_DIR` environment variable.

Note that it is important for performance for the cache directory to be located on the same file system as the Python environment uv is operating on.

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv cache dir [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-cache-dir--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-cache-dir--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--cache-dir&quot;&gt;&lt;a href=&quot;#uv-cache-dir--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--color&quot;&gt;&lt;a href=&quot;#uv-cache-dir--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--config-file&quot;&gt;&lt;a href=&quot;#uv-cache-dir--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--directory&quot;&gt;&lt;a href=&quot;#uv-cache-dir--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--help&quot;&gt;&lt;a href=&quot;#uv-cache-dir--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--managed-python&quot;&gt;&lt;a href=&quot;#uv-cache-dir--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--native-tls&quot;&gt;&lt;a href=&quot;#uv-cache-dir--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--no-cache&quot;&gt;&lt;a href=&quot;#uv-cache-dir--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--no-config&quot;&gt;&lt;a href=&quot;#uv-cache-dir--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-cache-dir--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--no-progress&quot;&gt;&lt;a href=&quot;#uv-cache-dir--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-cache-dir--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--offline&quot;&gt;&lt;a href=&quot;#uv-cache-dir--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--project&quot;&gt;&lt;a href=&quot;#uv-cache-dir--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--quiet&quot;&gt;&lt;a href=&quot;#uv-cache-dir--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--verbose&quot;&gt;&lt;a href=&quot;#uv-cache-dir--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-cache-dir--version&quot;&gt;&lt;a href=&quot;#uv-cache-dir--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv self

Manage the uv executable

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv self [OPTIONS] &lt;COMMAND&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Commands&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt&gt;&lt;a href=&quot;#uv-self-update&quot;&gt;&lt;code&gt;uv self update&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Update uv&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

### uv self update

Update uv

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv self update [OPTIONS] [TARGET_VERSION]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-self-update--target_version&quot;&gt;&lt;a href=&quot;#uv-self-update--target_version&quot;&lt;code&gt;TARGET_VERSION&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Update to the specified version. If not provided, uv will update to the latest version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-self-update--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-self-update--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--cache-dir&quot;&gt;&lt;a href=&quot;#uv-self-update--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--color&quot;&gt;&lt;a href=&quot;#uv-self-update--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--config-file&quot;&gt;&lt;a href=&quot;#uv-self-update--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--directory&quot;&gt;&lt;a href=&quot;#uv-self-update--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--help&quot;&gt;&lt;a href=&quot;#uv-self-update--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--managed-python&quot;&gt;&lt;a href=&quot;#uv-self-update--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--native-tls&quot;&gt;&lt;a href=&quot;#uv-self-update--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--no-cache&quot;&gt;&lt;a href=&quot;#uv-self-update--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--no-config&quot;&gt;&lt;a href=&quot;#uv-self-update--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-self-update--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--no-progress&quot;&gt;&lt;a href=&quot;#uv-self-update--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-self-update--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--offline&quot;&gt;&lt;a href=&quot;#uv-self-update--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--project&quot;&gt;&lt;a href=&quot;#uv-self-update--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--quiet&quot;&gt;&lt;a href=&quot;#uv-self-update--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--token&quot;&gt;&lt;a href=&quot;#uv-self-update--token&quot;&gt;&lt;code&gt;--token&lt;/code&gt;&lt;/a&gt; &lt;i&gt;token&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;A GitHub token for authentication. A token is not required but can be used to reduce the chance of encountering rate limits&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_GITHUB_TOKEN&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--verbose&quot;&gt;&lt;a href=&quot;#uv-self-update--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-self-update--version&quot;&gt;&lt;a href=&quot;#uv-self-update--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv version

Display uv's version

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv version [OPTIONS]
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-version--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-version--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--cache-dir&quot;&gt;&lt;a href=&quot;#uv-version--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--color&quot;&gt;&lt;a href=&quot;#uv-version--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--config-file&quot;&gt;&lt;a href=&quot;#uv-version--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--directory&quot;&gt;&lt;a href=&quot;#uv-version--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-version--help&quot;&gt;&lt;a href=&quot;#uv-version--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-version--managed-python&quot;&gt;&lt;a href=&quot;#uv-version--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--native-tls&quot;&gt;&lt;a href=&quot;#uv-version--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--no-cache&quot;&gt;&lt;a href=&quot;#uv-version--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--no-config&quot;&gt;&lt;a href=&quot;#uv-version--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-version--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--no-progress&quot;&gt;&lt;a href=&quot;#uv-version--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-version--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-version--offline&quot;&gt;&lt;a href=&quot;#uv-version--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--output-format&quot;&gt;&lt;a href=&quot;#uv-version--output-format&quot;&gt;&lt;code&gt;--output-format&lt;/code&gt;&lt;/a&gt; &lt;i&gt;output-format&lt;/i&gt;&lt;/dt&gt;&lt;dt id=&quot;uv-version--project&quot;&gt;&lt;a href=&quot;#uv-version--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-version--quiet&quot;&gt;&lt;a href=&quot;#uv-version--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-version--verbose&quot;&gt;&lt;a href=&quot;#uv-version--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-version--version&quot;&gt;&lt;a href=&quot;#uv-version--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

## uv generate-shell-completion

Generate shell completion

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv generate-shell-completion [OPTIONS] &lt;SHELL&gt;
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-generate-shell-completion--shell&quot;&gt;&lt;a href=&quot;#uv-generate-shell-completion--shell&quot;&lt;code&gt;SHELL&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The shell to generate the completion script for&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-generate-shell-completion--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-generate-shell-completion--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-generate-shell-completion--directory&quot;&gt;&lt;a href=&quot;#uv-generate-shell-completion--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-generate-shell-completion--managed-python&quot;&gt;&lt;a href=&quot;#uv-generate-shell-completion--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-generate-shell-completion--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-generate-shell-completion--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-generate-shell-completion--project&quot;&gt;&lt;a href=&quot;#uv-generate-shell-completion--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;/dl&gt;

## uv help

Display documentation for a command

&lt;h3 class=&quot;cli-reference&quot;&gt;Usage&lt;/h3&gt;

```
uv help [OPTIONS] [COMMAND]...
```

&lt;h3 class=&quot;cli-reference&quot;&gt;Arguments&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-help--command&quot;&gt;&lt;a href=&quot;#uv-help--command&quot;&lt;code&gt;COMMAND&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;/dl&gt;

&lt;h3 class=&quot;cli-reference&quot;&gt;Options&lt;/h3&gt;

&lt;dl class=&quot;cli-reference&quot;&gt;&lt;dt id=&quot;uv-help--allow-insecure-host&quot;&gt;&lt;a href=&quot;#uv-help--allow-insecure-host&quot;&gt;&lt;code&gt;--allow-insecure-host&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--trusted-host&lt;/code&gt; &lt;i&gt;allow-insecure-host&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Allow insecure connections to a host.&lt;/p&gt;

&lt;p&gt;Can be provided multiple times.&lt;/p&gt;

&lt;p&gt;Expects to receive either a hostname (e.g., &lt;code&gt;localhost&lt;/code&gt;), a host-port pair (e.g., &lt;code&gt;localhost:8080&lt;/code&gt;), or a URL (e.g., &lt;code&gt;https://localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;WARNING: Hosts included in this list will not be verified against the system&amp;#8217;s certificate store. Only use &lt;code&gt;--allow-insecure-host&lt;/code&gt; in a secure network with verified sources, as it bypasses SSL verification and could expose you to MITM attacks.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_INSECURE_HOST&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--cache-dir&quot;&gt;&lt;a href=&quot;#uv-help--cache-dir&quot;&gt;&lt;code&gt;--cache-dir&lt;/code&gt;&lt;/a&gt; &lt;i&gt;cache-dir&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Path to the cache directory.&lt;/p&gt;

&lt;p&gt;Defaults to &lt;code&gt;$XDG_CACHE_HOME/uv&lt;/code&gt; or &lt;code&gt;$HOME/.cache/uv&lt;/code&gt; on macOS and Linux, and &lt;code&gt;%LOCALAPPDATA%\uv\cache&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;To view the location of the cache directory, run &lt;code&gt;uv cache dir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--color&quot;&gt;&lt;a href=&quot;#uv-help--color&quot;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt; &lt;i&gt;color-choice&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Control the use of color in output.&lt;/p&gt;

&lt;p&gt;By default, uv will automatically detect support for colors when writing to a terminal.&lt;/p&gt;

&lt;p&gt;Possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;:  Enables colored output only when the output is going to a terminal or TTY with support&lt;/li&gt;

&lt;li&gt;&lt;code&gt;always&lt;/code&gt;:  Enables colored output regardless of the detected environment&lt;/li&gt;

&lt;li&gt;&lt;code&gt;never&lt;/code&gt;:  Disables colored output&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--config-file&quot;&gt;&lt;a href=&quot;#uv-help--config-file&quot;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/a&gt; &lt;i&gt;config-file&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The path to a &lt;code&gt;uv.toml&lt;/code&gt; file to use for configuration.&lt;/p&gt;

&lt;p&gt;While uv configuration can be included in a &lt;code&gt;pyproject.toml&lt;/code&gt; file, it is not allowed in this context.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_CONFIG_FILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--directory&quot;&gt;&lt;a href=&quot;#uv-help--directory&quot;&gt;&lt;code&gt;--directory&lt;/code&gt;&lt;/a&gt; &lt;i&gt;directory&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Change to the given directory prior to running the command.&lt;/p&gt;

&lt;p&gt;Relative paths are resolved with the given directory as the base.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--project&lt;/code&gt; to only change the project root directory.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-help--help&quot;&gt;&lt;a href=&quot;#uv-help--help&quot;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-h&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the concise help for this command&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-help--managed-python&quot;&gt;&lt;a href=&quot;#uv-help--managed-python&quot;&gt;&lt;code&gt;--managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Require use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;By default, uv prefers using Python versions it manages. However, it will use system Python versions if a uv-managed Python is not installed. This option disables use of system Python versions.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--native-tls&quot;&gt;&lt;a href=&quot;#uv-help--native-tls&quot;&gt;&lt;code&gt;--native-tls&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Whether to load TLS certificates from the platform&amp;#8217;s native certificate store.&lt;/p&gt;

&lt;p&gt;By default, uv loads certificates from the bundled &lt;code&gt;webpki-roots&lt;/code&gt; crate. The &lt;code&gt;webpki-roots&lt;/code&gt; are a reliable set of trust roots from Mozilla, and including them in uv improves portability and performance (especially on macOS).&lt;/p&gt;

&lt;p&gt;However, in some cases, you may want to use the platform&amp;#8217;s native certificate store, especially if you&amp;#8217;re relying on a corporate trust root (e.g., for a mandatory proxy) that&amp;#8217;s included in your system&amp;#8217;s certificate store.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NATIVE_TLS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--no-cache&quot;&gt;&lt;a href=&quot;#uv-help--no-cache&quot;&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;--no-cache-dir&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CACHE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--no-config&quot;&gt;&lt;a href=&quot;#uv-help--no-config&quot;&gt;&lt;code&gt;--no-config&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Avoid discovering configuration files (&lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Normally, configuration files are discovered in the current directory, parent directories, or user configuration directories.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_CONFIG&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--no-managed-python&quot;&gt;&lt;a href=&quot;#uv-help--no-managed-python&quot;&gt;&lt;code&gt;--no-managed-python&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable use of uv-managed Python versions.&lt;/p&gt;

&lt;p&gt;Instead, uv will search for a suitable Python version on the system.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_MANAGED_PYTHON&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--no-pager&quot;&gt;&lt;a href=&quot;#uv-help--no-pager&quot;&gt;&lt;code&gt;--no-pager&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable pager when printing help&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-help--no-progress&quot;&gt;&lt;a href=&quot;#uv-help--no-progress&quot;&gt;&lt;code&gt;--no-progress&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Hide all progress outputs.&lt;/p&gt;

&lt;p&gt;For example, spinners or progress bars.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_NO_PROGRESS&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--no-python-downloads&quot;&gt;&lt;a href=&quot;#uv-help--no-python-downloads&quot;&gt;&lt;code&gt;--no-python-downloads&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable automatic downloads of Python.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-help--offline&quot;&gt;&lt;a href=&quot;#uv-help--offline&quot;&gt;&lt;code&gt;--offline&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Disable network access.&lt;/p&gt;

&lt;p&gt;When disabled, uv will only use locally cached data and locally available files.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_OFFLINE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--project&quot;&gt;&lt;a href=&quot;#uv-help--project&quot;&gt;&lt;code&gt;--project&lt;/code&gt;&lt;/a&gt; &lt;i&gt;project&lt;/i&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Run the command within the given project directory.&lt;/p&gt;

&lt;p&gt;All &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;uv.toml&lt;/code&gt;, and &lt;code&gt;.python-version&lt;/code&gt; files will be discovered by walking up the directory tree from the project root, as will the project&amp;#8217;s virtual environment (&lt;code&gt;.venv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Other command-line arguments (such as relative paths) will be resolved relative to the current working directory.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;--directory&lt;/code&gt; to change the working directory entirely.&lt;/p&gt;

&lt;p&gt;This setting has no effect when used in the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;May also be set with the &lt;code&gt;UV_PROJECT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;&lt;dt id=&quot;uv-help--quiet&quot;&gt;&lt;a href=&quot;#uv-help--quiet&quot;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-q&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use quiet output.&lt;/p&gt;

&lt;p&gt;Repeating this option, e.g., &lt;code&gt;-qq&lt;/code&gt;, will enable a silent mode in which uv will write no output to stdout.&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-help--verbose&quot;&gt;&lt;a href=&quot;#uv-help--verbose&quot;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Use verbose output.&lt;/p&gt;

&lt;p&gt;You can configure fine-grained logging using the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable. (&amp;lt;https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives&amp;gt;)&lt;/p&gt;

&lt;/dd&gt;&lt;dt id=&quot;uv-help--version&quot;&gt;&lt;a href=&quot;#uv-help--version&quot;&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-V&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Display the uv version&lt;/p&gt;

&lt;/dd&gt;&lt;/dl&gt;

</file>
        <file path="docs/reference/settings.md">## Project metadata
### [`build-constraint-dependencies`](#build-constraint-dependencies) {: #build-constraint-dependencies }

Constraints to apply when solving build dependencies.

Build constraints are used to restrict the versions of build dependencies that are selected
when building a package during resolution or installation.

Including a package as a constraint will _not_ trigger installation of the package during
a build; instead, the package must be requested elsewhere in the project's build dependency
graph.

!!! note
    In `uv lock`, `uv sync`, and `uv run`, uv will only read `build-constraint-dependencies` from
    the `pyproject.toml` at the workspace root, and will ignore any declarations in other
    workspace members or `uv.toml` files.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
# Ensure that the setuptools v60.0.0 is used whenever a package has a build dependency
# on setuptools.
build-constraint-dependencies = [&quot;setuptools==60.0.0&quot;]
```

---

### [`conflicts`](#conflicts) {: #conflicts }

Declare collections of extras or dependency groups that are conflicting
(i.e., mutually exclusive).

It's useful to declare conflicts when two or more extras have mutually
incompatible dependencies. For example, extra `foo` might depend
on `numpy==2.0.0` while extra `bar` depends on `numpy==2.1.0`. While these
dependencies conflict, it may be the case that users are not expected to
activate both `foo` and `bar` at the same time, making it possible to
generate a universal resolution for the project despite the incompatibility.

By making such conflicts explicit, uv can generate a universal resolution
for a project, taking into account that certain combinations of extras and
groups are mutually exclusive. In exchange, installation will fail if a
user attempts to activate both conflicting extras.

**Default value**: `[]`

**Type**: `list[list[dict]]`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
# Require that `package[extra1]` and `package[extra2]` are resolved
# in different forks so that they cannot conflict with one another.
conflicts = [
    [
        { extra = &quot;extra1&quot; },
        { extra = &quot;extra2&quot; },
    ]
]

# Require that the dependency groups `group1` and `group2`
# are resolved in different forks so that they cannot conflict
# with one another.
conflicts = [
    [
        { group = &quot;group1&quot; },
        { group = &quot;group2&quot; },
    ]
]
```

---

### [`constraint-dependencies`](#constraint-dependencies) {: #constraint-dependencies }

Constraints to apply when resolving the project's dependencies.

Constraints are used to restrict the versions of dependencies that are selected during
resolution.

Including a package as a constraint will _not_ trigger installation of the package on its
own; instead, the package must be requested elsewhere in the project's first-party or
transitive dependencies.

!!! note
    In `uv lock`, `uv sync`, and `uv run`, uv will only read `constraint-dependencies` from
    the `pyproject.toml` at the workspace root, and will ignore any declarations in other
    workspace members or `uv.toml` files.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
# Ensure that the grpcio version is always less than 1.65, if it's requested by a
# direct or transitive dependency.
constraint-dependencies = [&quot;grpcio&lt;1.65&quot;]
```

---

### [`default-groups`](#default-groups) {: #default-groups }

The list of `dependency-groups` to install by default.

Can also be the literal &quot;all&quot; to default enable all groups.

**Default value**: `[&quot;dev&quot;]`

**Type**: `str | list[str]`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
default-groups = [&quot;docs&quot;]
```

---

### [`dev-dependencies`](#dev-dependencies) {: #dev-dependencies }

The project's development dependencies.

Development dependencies will be installed by default in `uv run` and `uv sync`, but will
not appear in the project's published metadata.

Use of this field is not recommend anymore. Instead, use the `dependency-groups.dev` field
which is a standardized way to declare development dependencies. The contents of
`tool.uv.dev-dependencies` and `dependency-groups.dev` are combined to determine the final
requirements of the `dev` dependency group.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
dev-dependencies = [&quot;ruff==0.5.0&quot;]
```

---

### [`environments`](#environments) {: #environments }

A list of supported environments against which to resolve dependencies.

By default, uv will resolve for all possible environments during a `uv lock` operation.
However, you can restrict the set of supported environments to improve performance and avoid
unsatisfiable branches in the solution space.

These environments will also be respected when `uv pip compile` is invoked with the
`--universal` flag.

**Default value**: `[]`

**Type**: `str | list[str]`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
# Resolve for macOS, but not for Linux or Windows.
environments = [&quot;sys_platform == 'darwin'&quot;]
```

---

### [`index`](#index) {: #index }

The indexes to use when resolving dependencies.

Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)
(the simple repository API), or a local directory laid out in the same format.

Indexes are considered in the order in which they're defined, such that the first-defined
index has the highest priority. Further, the indexes provided by this setting are given
higher priority than any indexes specified via [`index_url`](#index-url) or
[`extra_index_url`](#extra-index-url). uv will only consider the first index that contains
a given package, unless an alternative [index strategy](#index-strategy) is specified.

If an index is marked as `explicit = true`, it will be used exclusively for the
dependencies that select it explicitly via `[tool.uv.sources]`, as in:

```toml
[[tool.uv.index]]
name = &quot;pytorch&quot;
url = &quot;https://download.pytorch.org/whl/cu121&quot;
explicit = true

[tool.uv.sources]
torch = { index = &quot;pytorch&quot; }
```

If an index is marked as `default = true`, it will be moved to the end of the prioritized list, such that it is
given the lowest priority when resolving packages. Additionally, marking an index as default will disable the
PyPI default index.

**Default value**: `[]`

**Type**: `dict`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;

[[tool.uv.index]]
name = &quot;pytorch&quot;
url = &quot;https://download.pytorch.org/whl/cu121&quot;
```

---

### [`managed`](#managed) {: #managed }

Whether the project is managed by uv. If `false`, uv will ignore the project when
`uv run` is invoked.

**Default value**: `true`

**Type**: `bool`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
managed = false
```

---

### [`override-dependencies`](#override-dependencies) {: #override-dependencies }

Overrides to apply when resolving the project's dependencies.

Overrides are used to force selection of a specific version of a package, regardless of the
version requested by any other package, and regardless of whether choosing that version
would typically constitute an invalid resolution.

While constraints are _additive_, in that they're combined with the requirements of the
constituent packages, overrides are _absolute_, in that they completely replace the
requirements of any constituent packages.

Including a package as an override will _not_ trigger installation of the package on its
own; instead, the package must be requested elsewhere in the project's first-party or
transitive dependencies.

!!! note
    In `uv lock`, `uv sync`, and `uv run`, uv will only read `override-dependencies` from
    the `pyproject.toml` at the workspace root, and will ignore any declarations in other
    workspace members or `uv.toml` files.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
# Always install Werkzeug 2.3.0, regardless of whether transitive dependencies request
# a different version.
override-dependencies = [&quot;werkzeug==2.3.0&quot;]
```

---

### [`package`](#package) {: #package }

Whether the project should be considered a Python package, or a non-package (&quot;virtual&quot;)
project.

Packages are built and installed into the virtual environment in editable mode and thus
require a build backend, while virtual projects are _not_ built or installed; instead, only
their dependencies are included in the virtual environment.

Creating a package requires that a `build-system` is present in the `pyproject.toml`, and
that the project adheres to a structure that adheres to the build backend's expectations
(e.g., a `src` layout).

**Default value**: `true`

**Type**: `bool`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
package = false
```

---

### [`required-environments`](#required-environments) {: #required-environments }

A list of required platforms, for packages that lack source distributions.

When a package does not have a source distribution, it's availability will be limited to
the platforms supported by its built distributions (wheels). For example, if a package only
publishes wheels for Linux, then it won't be installable on macOS or Windows.

By default, uv requires each package to include at least one wheel that is compatible with
the designated Python version. The `required-environments` setting can be used to ensure that
the resulting resolution contains wheels for specific platforms, or fails if no such wheels
are available.

While the `environments` setting _limits_ the set of environments that uv will consider when
resolving dependencies, `required-environments` _expands_ the set of platforms that uv _must_
support when resolving dependencies.

For example, `environments = [&quot;sys_platform == 'darwin'&quot;]` would limit uv to solving for
macOS (and ignoring Linux and Windows). On the other hand, `required-environments = [&quot;sys_platform == 'darwin'&quot;]`
would _require_ that any package without a source distribution include a wheel for macOS in
order to be installable.

**Default value**: `[]`

**Type**: `str | list[str]`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
# Require that the package is available for macOS ARM and x86 (Intel).
required-environments = [
    &quot;sys_platform == 'darwin' and platform_machine == 'arm64'&quot;,
    &quot;sys_platform == 'darwin' and platform_machine == 'x86_64'&quot;,
]
```

---

### [`sources`](#sources) {: #sources }

The sources to use when resolving dependencies.

`tool.uv.sources` enriches the dependency metadata with additional sources, incorporated
during development. A dependency source can be a Git repository, a URL, a local path, or an
alternative registry.

See [Dependencies](../concepts/projects/dependencies.md) for more.

**Default value**: `{}`

**Type**: `dict`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;

[tool.uv.sources]
httpx = { git = &quot;https://github.com/encode/httpx&quot;, tag = &quot;0.27.0&quot; }
pytest = { url = &quot;https://files.pythonhosted.org/packages/6b/77/7440a06a8ead44c7757a64362dd22df5760f9b12dc5f11b6188cd2fc27a0/pytest-8.3.3-py3-none-any.whl&quot; }
pydantic = { path = &quot;/path/to/pydantic&quot;, editable = true }
```

---

### `workspace`

#### [`exclude`](#workspace_exclude) {: #workspace_exclude }
&lt;span id=&quot;exclude&quot;&gt;&lt;/span&gt;

Packages to exclude as workspace members. If a package matches both `members` and
`exclude`, it will be excluded.

Supports both globs and explicit paths.

For more information on the glob syntax, refer to the [`glob` documentation](https://docs.rs/glob/latest/glob/struct.Pattern.html).

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv.workspace]
exclude = [&quot;member1&quot;, &quot;path/to/member2&quot;, &quot;libs/*&quot;]
```

---

#### [`members`](#workspace_members) {: #workspace_members }
&lt;span id=&quot;members&quot;&gt;&lt;/span&gt;

Packages to include as workspace members.

Supports both globs and explicit paths.

For more information on the glob syntax, refer to the [`glob` documentation](https://docs.rs/glob/latest/glob/struct.Pattern.html).

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

```toml title=&quot;pyproject.toml&quot;
[tool.uv.workspace]
members = [&quot;member1&quot;, &quot;path/to/member2&quot;, &quot;libs/*&quot;]
```

---

## Configuration
### [`allow-insecure-host`](#allow-insecure-host) {: #allow-insecure-host }

Allow insecure connections to host.

Expects to receive either a hostname (e.g., `localhost`), a host-port pair (e.g.,
`localhost:8080`), or a URL (e.g., `https://localhost`).

WARNING: Hosts included in this list will not be verified against the system's certificate
store. Only use `--allow-insecure-host` in a secure network with verified sources, as it
bypasses SSL verification and could expose you to MITM attacks.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    allow-insecure-host = [&quot;localhost:8080&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    allow-insecure-host = [&quot;localhost:8080&quot;]
    ```

---

### [`cache-dir`](#cache-dir) {: #cache-dir }

Path to the cache directory.

Defaults to `$XDG_CACHE_HOME/uv` or `$HOME/.cache/uv` on Linux and macOS, and
`%LOCALAPPDATA%\uv\cache` on Windows.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    cache-dir = &quot;./.uv_cache&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    cache-dir = &quot;./.uv_cache&quot;
    ```

---

### [`cache-keys`](#cache-keys) {: #cache-keys }

The keys to consider when caching builds for the project.

Cache keys enable you to specify the files or directories that should trigger a rebuild when
modified. By default, uv will rebuild a project whenever the `pyproject.toml`, `setup.py`,
or `setup.cfg` files in the project directory are modified, or if a `src` directory is
added or removed, i.e.:

```toml
cache-keys = [{ file = &quot;pyproject.toml&quot; }, { file = &quot;setup.py&quot; }, { file = &quot;setup.cfg&quot; }, { dir = &quot;src&quot; }]
```

As an example: if a project uses dynamic metadata to read its dependencies from a
`requirements.txt` file, you can specify `cache-keys = [{ file = &quot;requirements.txt&quot; }, { file = &quot;pyproject.toml&quot; }]`
to ensure that the project is rebuilt whenever the `requirements.txt` file is modified (in
addition to watching the `pyproject.toml`).

Globs are supported, following the syntax of the [`glob`](https://docs.rs/glob/0.3.1/glob/struct.Pattern.html)
crate. For example, to invalidate the cache whenever a `.toml` file in the project directory
or any of its subdirectories is modified, you can specify `cache-keys = [{ file = &quot;**/*.toml&quot; }]`.
Note that the use of globs can be expensive, as uv may need to walk the filesystem to
determine whether any files have changed.

Cache keys can also include version control information. For example, if a project uses
`setuptools_scm` to read its version from a Git commit, you can specify `cache-keys = [{ git = { commit = true }, { file = &quot;pyproject.toml&quot; }]`
to include the current Git commit hash in the cache key (in addition to the
`pyproject.toml`). Git tags are also supported via `cache-keys = [{ git = { commit = true, tags = true } }]`.

Cache keys can also include environment variables. For example, if a project relies on
`MACOSX_DEPLOYMENT_TARGET` or other environment variables to determine its behavior, you can
specify `cache-keys = [{ env = &quot;MACOSX_DEPLOYMENT_TARGET&quot; }]` to invalidate the cache
whenever the environment variable changes.

Cache keys only affect the project defined by the `pyproject.toml` in which they're
specified (as opposed to, e.g., affecting all members in a workspace), and all paths and
globs are interpreted as relative to the project directory.

**Default value**: `[{ file = &quot;pyproject.toml&quot; }, { file = &quot;setup.py&quot; }, { file = &quot;setup.cfg&quot; }]`

**Type**: `list[dict]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    cache-keys = [{ file = &quot;pyproject.toml&quot; }, { file = &quot;requirements.txt&quot; }, { git = { commit = true } }]
    ```
=== &quot;uv.toml&quot;

    ```toml
    cache-keys = [{ file = &quot;pyproject.toml&quot; }, { file = &quot;requirements.txt&quot; }, { git = { commit = true } }]
    ```

---

### [`check-url`](#check-url) {: #check-url }

Check an index URL for existing files to skip duplicate uploads.

This option allows retrying publishing that failed after only some, but not all files have
been uploaded, and handles error due to parallel uploads of the same file.

Before uploading, the index is checked. If the exact same file already exists in the index,
the file will not be uploaded. If an error occurred during the upload, the index is checked
again, to handle cases where the identical file was uploaded twice in parallel.

The exact behavior will vary based on the index. When uploading to PyPI, uploading the same
file succeeds even without `--check-url`, while most other indexes error.

The index must provide one of the supported hashes (SHA-256, SHA-384, or SHA-512).

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    check-url = &quot;https://test.pypi.org/simple&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    check-url = &quot;https://test.pypi.org/simple&quot;
    ```

---

### [`compile-bytecode`](#compile-bytecode) {: #compile-bytecode }

Compile Python files to bytecode after installation.

By default, uv does not compile Python (`.py`) files to bytecode (`__pycache__/*.pyc`);
instead, compilation is performed lazily the first time a module is imported. For use-cases
in which start time is critical, such as CLI applications and Docker containers, this option
can be enabled to trade longer installation times for faster start times.

When enabled, uv will process the entire site-packages directory (including packages that
are not being modified by the current operation) for consistency. Like pip, it will also
ignore errors.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    compile-bytecode = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    compile-bytecode = true
    ```

---

### [`concurrent-builds`](#concurrent-builds) {: #concurrent-builds }

The maximum number of source distributions that uv will build concurrently at any given
time.

Defaults to the number of available CPU cores.

**Default value**: `None`

**Type**: `int`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    concurrent-builds = 4
    ```
=== &quot;uv.toml&quot;

    ```toml
    concurrent-builds = 4
    ```

---

### [`concurrent-downloads`](#concurrent-downloads) {: #concurrent-downloads }

The maximum number of in-flight concurrent downloads that uv will perform at any given
time.

**Default value**: `50`

**Type**: `int`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    concurrent-downloads = 4
    ```
=== &quot;uv.toml&quot;

    ```toml
    concurrent-downloads = 4
    ```

---

### [`concurrent-installs`](#concurrent-installs) {: #concurrent-installs }

The number of threads used when installing and unzipping packages.

Defaults to the number of available CPU cores.

**Default value**: `None`

**Type**: `int`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    concurrent-installs = 4
    ```
=== &quot;uv.toml&quot;

    ```toml
    concurrent-installs = 4
    ```

---

### [`config-settings`](#config-settings) {: #config-settings }

Settings to pass to the [PEP 517](https://peps.python.org/pep-0517/) build backend,
specified as `KEY=VALUE` pairs.

**Default value**: `{}`

**Type**: `dict`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    config-settings = { editable_mode = &quot;compat&quot; }
    ```
=== &quot;uv.toml&quot;

    ```toml
    config-settings = { editable_mode = &quot;compat&quot; }
    ```

---

### [`dependency-metadata`](#dependency-metadata) {: #dependency-metadata }

Pre-defined static metadata for dependencies of the project (direct or transitive). When
provided, enables the resolver to use the specified metadata instead of querying the
registry or building the relevant package from source.

Metadata should be provided in adherence with the [Metadata 2.3](https://packaging.python.org/en/latest/specifications/core-metadata/)
standard, though only the following fields are respected:

- `name`: The name of the package.
- (Optional) `version`: The version of the package. If omitted, the metadata will be applied
  to all versions of the package.
- (Optional) `requires-dist`: The dependencies of the package (e.g., `werkzeug&gt;=0.14`).
- (Optional) `requires-python`: The Python version required by the package (e.g., `&gt;=3.10`).
- (Optional) `provides-extras`: The extras provided by the package.

**Default value**: `[]`

**Type**: `list[dict]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    dependency-metadata = [
        { name = &quot;flask&quot;, version = &quot;1.0.0&quot;, requires-dist = [&quot;werkzeug&quot;], requires-python = &quot;&gt;=3.6&quot; },
    ]
    ```
=== &quot;uv.toml&quot;

    ```toml
    dependency-metadata = [
        { name = &quot;flask&quot;, version = &quot;1.0.0&quot;, requires-dist = [&quot;werkzeug&quot;], requires-python = &quot;&gt;=3.6&quot; },
    ]
    ```

---

### [`exclude-newer`](#exclude-newer) {: #exclude-newer }

Limit candidate packages to those that were uploaded prior to the given date.

Accepts both [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) timestamps (e.g.,
`2006-12-02T02:07:43Z`) and local dates in the same format (e.g., `2006-12-02`) in your
system's configured time zone.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    exclude-newer = &quot;2006-12-02&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    exclude-newer = &quot;2006-12-02&quot;
    ```

---

### [`extra-index-url`](#extra-index-url) {: #extra-index-url }

Extra URLs of package indexes to use, in addition to `--index-url`.

Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)
(the simple repository API), or a local directory laid out in the same format.

All indexes provided via this flag take priority over the index specified by
[`index_url`](#index-url) or [`index`](#index) with `default = true`. When multiple indexes
are provided, earlier values take priority.

To control uv's resolution strategy when multiple indexes are present, see
[`index_strategy`](#index-strategy).

(Deprecated: use `index` instead.)

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    extra-index-url = [&quot;https://download.pytorch.org/whl/cpu&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    extra-index-url = [&quot;https://download.pytorch.org/whl/cpu&quot;]
    ```

---

### [`find-links`](#find-links) {: #find-links }

Locations to search for candidate distributions, in addition to those found in the registry
indexes.

If a path, the target must be a directory that contains packages as wheel files (`.whl`) or
source distributions (e.g., `.tar.gz` or `.zip`) at the top level.

If a URL, the page must contain a flat list of links to package files adhering to the
formats described above.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    find-links = [&quot;https://download.pytorch.org/whl/torch_stable.html&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    find-links = [&quot;https://download.pytorch.org/whl/torch_stable.html&quot;]
    ```

---

### [`fork-strategy`](#fork-strategy) {: #fork-strategy }

The strategy to use when selecting multiple versions of a given package across Python
versions and platforms.

By default, uv will optimize for selecting the latest version of each package for each
supported Python version (`requires-python`), while minimizing the number of selected
versions across platforms.

Under `fewest`, uv will minimize the number of selected versions for each package,
preferring older versions that are compatible with a wider range of supported Python
versions or platforms.

**Default value**: `&quot;requires-python&quot;`

**Possible values**:

- `&quot;fewest&quot;`: Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms
- `&quot;requires-python&quot;`: Optimize for selecting latest supported version of each package, for each supported Python version

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    fork-strategy = &quot;fewest&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    fork-strategy = &quot;fewest&quot;
    ```

---

### [`index`](#index) {: #index }

The package indexes to use when resolving dependencies.

Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)
(the simple repository API), or a local directory laid out in the same format.

Indexes are considered in the order in which they're defined, such that the first-defined
index has the highest priority. Further, the indexes provided by this setting are given
higher priority than any indexes specified via [`index_url`](#index-url) or
[`extra_index_url`](#extra-index-url). uv will only consider the first index that contains
a given package, unless an alternative [index strategy](#index-strategy) is specified.

If an index is marked as `explicit = true`, it will be used exclusively for those
dependencies that select it explicitly via `[tool.uv.sources]`, as in:

```toml
[[tool.uv.index]]
name = &quot;pytorch&quot;
url = &quot;https://download.pytorch.org/whl/cu121&quot;
explicit = true

[tool.uv.sources]
torch = { index = &quot;pytorch&quot; }
```

If an index is marked as `default = true`, it will be moved to the end of the prioritized list, such that it is
given the lowest priority when resolving packages. Additionally, marking an index as default will disable the
PyPI default index.

**Default value**: `&quot;[]&quot;`

**Type**: `dict`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [[tool.uv.index]]
    name = &quot;pytorch&quot;
    url = &quot;https://download.pytorch.org/whl/cu121&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [[tool.uv.index]]
    name = &quot;pytorch&quot;
    url = &quot;https://download.pytorch.org/whl/cu121&quot;
    ```

---

### [`index-strategy`](#index-strategy) {: #index-strategy }

The strategy to use when resolving against multiple index URLs.

By default, uv will stop at the first index on which a given package is available, and
limit resolutions to those present on that first index (`first-index`). This prevents
&quot;dependency confusion&quot; attacks, whereby an attacker can upload a malicious package under the
same name to an alternate index.

**Default value**: `&quot;first-index&quot;`

**Possible values**:

- `&quot;first-index&quot;`: Only use results from the first index that returns a match for a given package name
- `&quot;unsafe-first-match&quot;`: Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next
- `&quot;unsafe-best-match&quot;`: Search for every package name across all indexes, preferring the &quot;best&quot; version found. If a package version is in multiple indexes, only look at the entry for the first index

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    index-strategy = &quot;unsafe-best-match&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    index-strategy = &quot;unsafe-best-match&quot;
    ```

---

### [`index-url`](#index-url) {: #index-url }

The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).

Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)
(the simple repository API), or a local directory laid out in the same format.

The index provided by this setting is given lower priority than any indexes specified via
[`extra_index_url`](#extra-index-url) or [`index`](#index).

(Deprecated: use `index` instead.)

**Default value**: `&quot;https://pypi.org/simple&quot;`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    index-url = &quot;https://test.pypi.org/simple&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    index-url = &quot;https://test.pypi.org/simple&quot;
    ```

---

### [`keyring-provider`](#keyring-provider) {: #keyring-provider }

Attempt to use `keyring` for authentication for index URLs.

At present, only `--keyring-provider subprocess` is supported, which configures uv to
use the `keyring` CLI to handle authentication.

**Default value**: `&quot;disabled&quot;`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    keyring-provider = &quot;subprocess&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    keyring-provider = &quot;subprocess&quot;
    ```

---

### [`link-mode`](#link-mode) {: #link-mode }

The method to use when installing packages from the global cache.

Defaults to `clone` (also known as Copy-on-Write) on macOS, and `hardlink` on Linux and
Windows.

**Default value**: `&quot;clone&quot; (macOS) or &quot;hardlink&quot; (Linux, Windows)`

**Possible values**:

- `&quot;clone&quot;`: Clone (i.e., copy-on-write) packages from the wheel into the `site-packages` directory
- `&quot;copy&quot;`: Copy packages from the wheel into the `site-packages` directory
- `&quot;hardlink&quot;`: Hard link packages from the wheel into the `site-packages` directory
- `&quot;symlink&quot;`: Symbolically link packages from the wheel into the `site-packages` directory

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    link-mode = &quot;copy&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    link-mode = &quot;copy&quot;
    ```

---

### [`native-tls`](#native-tls) {: #native-tls }

Whether to load TLS certificates from the platform's native certificate store.

By default, uv loads certificates from the bundled `webpki-roots` crate. The
`webpki-roots` are a reliable set of trust roots from Mozilla, and including them in uv
improves portability and performance (especially on macOS).

However, in some cases, you may want to use the platform's native certificate store,
especially if you're relying on a corporate trust root (e.g., for a mandatory proxy) that's
included in your system's certificate store.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    native-tls = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    native-tls = true
    ```

---

### [`no-binary`](#no-binary) {: #no-binary }

Don't install pre-built wheels.

The given packages will be built and installed from source. The resolver will still use
pre-built wheels to extract package metadata, if available.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    no-binary = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    no-binary = true
    ```

---

### [`no-binary-package`](#no-binary-package) {: #no-binary-package }

Don't install pre-built wheels for a specific package.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    no-binary-package = [&quot;ruff&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    no-binary-package = [&quot;ruff&quot;]
    ```

---

### [`no-build`](#no-build) {: #no-build }

Don't build source distributions.

When enabled, resolving will not run arbitrary Python code. The cached wheels of
already-built source distributions will be reused, but operations that require building
distributions will exit with an error.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    no-build = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    no-build = true
    ```

---

### [`no-build-isolation`](#no-build-isolation) {: #no-build-isolation }

Disable isolation when building source distributions.

Assumes that build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/)
are already installed.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    no-build-isolation = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    no-build-isolation = true
    ```

---

### [`no-build-isolation-package`](#no-build-isolation-package) {: #no-build-isolation-package }

Disable isolation when building source distributions for a specific package.

Assumes that the packages' build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/)
are already installed.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    no-build-isolation-package = [&quot;package1&quot;, &quot;package2&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    no-build-isolation-package = [&quot;package1&quot;, &quot;package2&quot;]
    ```

---

### [`no-build-package`](#no-build-package) {: #no-build-package }

Don't build source distributions for a specific package.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    no-build-package = [&quot;ruff&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    no-build-package = [&quot;ruff&quot;]
    ```

---

### [`no-cache`](#no-cache) {: #no-cache }

Avoid reading from or writing to the cache, instead using a temporary directory for the
duration of the operation.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    no-cache = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    no-cache = true
    ```

---

### [`no-index`](#no-index) {: #no-index }

Ignore all registry indexes (e.g., PyPI), instead relying on direct URL dependencies and
those provided via `--find-links`.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    no-index = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    no-index = true
    ```

---

### [`no-sources`](#no-sources) {: #no-sources }

Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the
standards-compliant, publishable package metadata, as opposed to using any local or Git
sources.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    no-sources = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    no-sources = true
    ```

---

### [`offline`](#offline) {: #offline }

Disable network access, relying only on locally cached data and locally available files.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    offline = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    offline = true
    ```

---

### [`prerelease`](#prerelease) {: #prerelease }

The strategy to use when considering pre-release versions.

By default, uv will accept pre-releases for packages that _only_ publish pre-releases,
along with first-party requirements that contain an explicit pre-release marker in the
declared specifiers (`if-necessary-or-explicit`).

**Default value**: `&quot;if-necessary-or-explicit&quot;`

**Possible values**:

- `&quot;disallow&quot;`: Disallow all pre-release versions
- `&quot;allow&quot;`: Allow all pre-release versions
- `&quot;if-necessary&quot;`: Allow pre-release versions if all versions of a package are pre-release
- `&quot;explicit&quot;`: Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements
- `&quot;if-necessary-or-explicit&quot;`: Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    prerelease = &quot;allow&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    prerelease = &quot;allow&quot;
    ```

---

### [`preview`](#preview) {: #preview }

Whether to enable experimental, preview features.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    preview = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    preview = true
    ```

---

### [`publish-url`](#publish-url) {: #publish-url }

The URL for publishing packages to the Python package index (by default:
&lt;https://upload.pypi.org/legacy/&gt;).

**Default value**: `&quot;https://upload.pypi.org/legacy/&quot;`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    publish-url = &quot;https://test.pypi.org/legacy/&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    publish-url = &quot;https://test.pypi.org/legacy/&quot;
    ```

---

### [`pypy-install-mirror`](#pypy-install-mirror) {: #pypy-install-mirror }

Mirror URL to use for downloading managed PyPy installations.

By default, managed PyPy installations are downloaded from [downloads.python.org](https://downloads.python.org/).
This variable can be set to a mirror URL to use a different source for PyPy installations.
The provided URL will replace `https://downloads.python.org/pypy` in, e.g., `https://downloads.python.org/pypy/pypy3.8-v7.3.7-osx64.tar.bz2`.

Distributions can be read from a
local directory by using the `file://` URL scheme.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    pypy-install-mirror = &quot;https://downloads.python.org/pypy&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    pypy-install-mirror = &quot;https://downloads.python.org/pypy&quot;
    ```

---

### [`python-downloads`](#python-downloads) {: #python-downloads }

Whether to allow Python downloads.

**Default value**: `&quot;automatic&quot;`

**Possible values**:

- `&quot;automatic&quot;`: Automatically download managed Python installations when needed
- `&quot;manual&quot;`: Do not automatically download managed Python installations; require explicit installation
- `&quot;never&quot;`: Do not ever allow Python downloads

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    python-downloads = &quot;manual&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    python-downloads = &quot;manual&quot;
    ```

---

### [`python-install-mirror`](#python-install-mirror) {: #python-install-mirror }

Mirror URL for downloading managed Python installations.

By default, managed Python installations are downloaded from [`python-build-standalone`](https://github.com/astral-sh/python-build-standalone).
This variable can be set to a mirror URL to use a different source for Python installations.
The provided URL will replace `https://github.com/astral-sh/python-build-standalone/releases/download` in, e.g., `https://github.com/astral-sh/python-build-standalone/releases/download/20240713/cpython-3.12.4%2B20240713-aarch64-apple-darwin-install_only.tar.gz`.

Distributions can be read from a local directory by using the `file://` URL scheme.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    python-install-mirror = &quot;https://github.com/astral-sh/python-build-standalone/releases/download&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    python-install-mirror = &quot;https://github.com/astral-sh/python-build-standalone/releases/download&quot;
    ```

---

### [`python-preference`](#python-preference) {: #python-preference }

Whether to prefer using Python installations that are already present on the system, or
those that are downloaded and installed by uv.

**Default value**: `&quot;managed&quot;`

**Possible values**:

- `&quot;only-managed&quot;`: Only use managed Python installations; never use system Python installations
- `&quot;managed&quot;`: Prefer managed Python installations over system Python installations
- `&quot;system&quot;`: Prefer system Python installations over managed Python installations
- `&quot;only-system&quot;`: Only use system Python installations; never use managed Python installations

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    python-preference = &quot;managed&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    python-preference = &quot;managed&quot;
    ```

---

### [`reinstall`](#reinstall) {: #reinstall }

Reinstall all packages, regardless of whether they're already installed. Implies `refresh`.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    reinstall = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    reinstall = true
    ```

---

### [`reinstall-package`](#reinstall-package) {: #reinstall-package }

Reinstall a specific package, regardless of whether it's already installed. Implies
`refresh-package`.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    reinstall-package = [&quot;ruff&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    reinstall-package = [&quot;ruff&quot;]
    ```

---

### [`required-version`](#required-version) {: #required-version }

Enforce a requirement on the version of uv.

If the version of uv does not meet the requirement at runtime, uv will exit
with an error.

Accepts a [PEP 440](https://peps.python.org/pep-0440/) specifier, like `==0.5.0` or `&gt;=0.5.0`.

**Default value**: `null`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    required-version = &quot;&gt;=0.5.0&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    required-version = &quot;&gt;=0.5.0&quot;
    ```

---

### [`resolution`](#resolution) {: #resolution }

The strategy to use when selecting between the different compatible versions for a given
package requirement.

By default, uv will use the latest compatible version of each package (`highest`).

**Default value**: `&quot;highest&quot;`

**Possible values**:

- `&quot;highest&quot;`: Resolve the highest compatible version of each package
- `&quot;lowest&quot;`: Resolve the lowest compatible version of each package
- `&quot;lowest-direct&quot;`: Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    resolution = &quot;lowest-direct&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    resolution = &quot;lowest-direct&quot;
    ```

---

### [`trusted-publishing`](#trusted-publishing) {: #trusted-publishing }

Configure trusted publishing via GitHub Actions.

By default, uv checks for trusted publishing when running in GitHub Actions, but ignores it
if it isn't configured or the workflow doesn't have enough permissions (e.g., a pull request
from a fork).

**Default value**: `automatic`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    trusted-publishing = &quot;always&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    trusted-publishing = &quot;always&quot;
    ```

---

### [`upgrade`](#upgrade) {: #upgrade }

Allow package upgrades, ignoring pinned versions in any existing output file.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    upgrade = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    upgrade = true
    ```

---

### [`upgrade-package`](#upgrade-package) {: #upgrade-package }

Allow upgrades for a specific package, ignoring pinned versions in any existing output
file.

Accepts both standalone package names (`ruff`) and version specifiers (`ruff&lt;0.5.0`).

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv]
    upgrade-package = [&quot;ruff&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    upgrade-package = [&quot;ruff&quot;]
    ```

---

### `pip`

Settings that are specific to the `uv pip` command-line interface.

These values will be ignored when running commands outside the `uv pip` namespace (e.g.,
`uv lock`, `uvx`).

#### [`all-extras`](#pip_all-extras) {: #pip_all-extras }
&lt;span id=&quot;all-extras&quot;&gt;&lt;/span&gt;

Include all optional dependencies.

Only applies to `pyproject.toml`, `setup.py`, and `setup.cfg` sources.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    all-extras = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    all-extras = true
    ```

---

#### [`allow-empty-requirements`](#pip_allow-empty-requirements) {: #pip_allow-empty-requirements }
&lt;span id=&quot;allow-empty-requirements&quot;&gt;&lt;/span&gt;

Allow `uv pip sync` with empty requirements, which will clear the environment of all
packages.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    allow-empty-requirements = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    allow-empty-requirements = true
    ```

---

#### [`annotation-style`](#pip_annotation-style) {: #pip_annotation-style }
&lt;span id=&quot;annotation-style&quot;&gt;&lt;/span&gt;

The style of the annotation comments included in the output file, used to indicate the
source of each package.

**Default value**: `&quot;split&quot;`

**Possible values**:

- `&quot;line&quot;`: Render the annotations on a single, comma-separated line
- `&quot;split&quot;`: Render each annotation on its own line

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    annotation-style = &quot;line&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    annotation-style = &quot;line&quot;
    ```

---

#### [`break-system-packages`](#pip_break-system-packages) {: #pip_break-system-packages }
&lt;span id=&quot;break-system-packages&quot;&gt;&lt;/span&gt;

Allow uv to modify an `EXTERNALLY-MANAGED` Python installation.

WARNING: `--break-system-packages` is intended for use in continuous integration (CI)
environments, when installing into Python installations that are managed by an external
package manager, like `apt`. It should be used with caution, as such Python installations
explicitly recommend against modifications by other package managers (like uv or pip).

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    break-system-packages = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    break-system-packages = true
    ```

---

#### [`compile-bytecode`](#pip_compile-bytecode) {: #pip_compile-bytecode }
&lt;span id=&quot;compile-bytecode&quot;&gt;&lt;/span&gt;

Compile Python files to bytecode after installation.

By default, uv does not compile Python (`.py`) files to bytecode (`__pycache__/*.pyc`);
instead, compilation is performed lazily the first time a module is imported. For use-cases
in which start time is critical, such as CLI applications and Docker containers, this option
can be enabled to trade longer installation times for faster start times.

When enabled, uv will process the entire site-packages directory (including packages that
are not being modified by the current operation) for consistency. Like pip, it will also
ignore errors.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    compile-bytecode = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    compile-bytecode = true
    ```

---

#### [`config-settings`](#pip_config-settings) {: #pip_config-settings }
&lt;span id=&quot;config-settings&quot;&gt;&lt;/span&gt;

Settings to pass to the [PEP 517](https://peps.python.org/pep-0517/) build backend,
specified as `KEY=VALUE` pairs.

**Default value**: `{}`

**Type**: `dict`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    config-settings = { editable_mode = &quot;compat&quot; }
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    config-settings = { editable_mode = &quot;compat&quot; }
    ```

---

#### [`custom-compile-command`](#pip_custom-compile-command) {: #pip_custom-compile-command }
&lt;span id=&quot;custom-compile-command&quot;&gt;&lt;/span&gt;

The header comment to include at the top of the output file generated by `uv pip compile`.

Used to reflect custom build scripts and commands that wrap `uv pip compile`.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    custom-compile-command = &quot;./custom-uv-compile.sh&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    custom-compile-command = &quot;./custom-uv-compile.sh&quot;
    ```

---

#### [`dependency-metadata`](#pip_dependency-metadata) {: #pip_dependency-metadata }
&lt;span id=&quot;dependency-metadata&quot;&gt;&lt;/span&gt;

Pre-defined static metadata for dependencies of the project (direct or transitive). When
provided, enables the resolver to use the specified metadata instead of querying the
registry or building the relevant package from source.

Metadata should be provided in adherence with the [Metadata 2.3](https://packaging.python.org/en/latest/specifications/core-metadata/)
standard, though only the following fields are respected:

- `name`: The name of the package.
- (Optional) `version`: The version of the package. If omitted, the metadata will be applied
  to all versions of the package.
- (Optional) `requires-dist`: The dependencies of the package (e.g., `werkzeug&gt;=0.14`).
- (Optional) `requires-python`: The Python version required by the package (e.g., `&gt;=3.10`).
- (Optional) `provides-extras`: The extras provided by the package.

**Default value**: `[]`

**Type**: `list[dict]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    dependency-metadata = [
        { name = &quot;flask&quot;, version = &quot;1.0.0&quot;, requires-dist = [&quot;werkzeug&quot;], requires-python = &quot;&gt;=3.6&quot; },
    ]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    dependency-metadata = [
        { name = &quot;flask&quot;, version = &quot;1.0.0&quot;, requires-dist = [&quot;werkzeug&quot;], requires-python = &quot;&gt;=3.6&quot; },
    ]
    ```

---

#### [`emit-build-options`](#pip_emit-build-options) {: #pip_emit-build-options }
&lt;span id=&quot;emit-build-options&quot;&gt;&lt;/span&gt;

Include `--no-binary` and `--only-binary` entries in the output file generated by `uv pip compile`.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    emit-build-options = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    emit-build-options = true
    ```

---

#### [`emit-find-links`](#pip_emit-find-links) {: #pip_emit-find-links }
&lt;span id=&quot;emit-find-links&quot;&gt;&lt;/span&gt;

Include `--find-links` entries in the output file generated by `uv pip compile`.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    emit-find-links = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    emit-find-links = true
    ```

---

#### [`emit-index-annotation`](#pip_emit-index-annotation) {: #pip_emit-index-annotation }
&lt;span id=&quot;emit-index-annotation&quot;&gt;&lt;/span&gt;

Include comment annotations indicating the index used to resolve each package (e.g.,
`# from https://pypi.org/simple`).

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    emit-index-annotation = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    emit-index-annotation = true
    ```

---

#### [`emit-index-url`](#pip_emit-index-url) {: #pip_emit-index-url }
&lt;span id=&quot;emit-index-url&quot;&gt;&lt;/span&gt;

Include `--index-url` and `--extra-index-url` entries in the output file generated by `uv pip compile`.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    emit-index-url = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    emit-index-url = true
    ```

---

#### [`emit-marker-expression`](#pip_emit-marker-expression) {: #pip_emit-marker-expression }
&lt;span id=&quot;emit-marker-expression&quot;&gt;&lt;/span&gt;

Whether to emit a marker string indicating the conditions under which the set of pinned
dependencies is valid.

The pinned dependencies may be valid even when the marker expression is
false, but when the expression is true, the requirements are known to
be correct.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    emit-marker-expression = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    emit-marker-expression = true
    ```

---

#### [`exclude-newer`](#pip_exclude-newer) {: #pip_exclude-newer }
&lt;span id=&quot;exclude-newer&quot;&gt;&lt;/span&gt;

Limit candidate packages to those that were uploaded prior to a given point in time.

Accepts a superset of [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) (e.g.,
`2006-12-02T02:07:43Z`). A full timestamp is required to ensure that the resolver will
behave consistently across timezones.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    exclude-newer = &quot;2006-12-02T02:07:43Z&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    exclude-newer = &quot;2006-12-02T02:07:43Z&quot;
    ```

---

#### [`extra`](#pip_extra) {: #pip_extra }
&lt;span id=&quot;extra&quot;&gt;&lt;/span&gt;

Include optional dependencies from the specified extra; may be provided more than once.

Only applies to `pyproject.toml`, `setup.py`, and `setup.cfg` sources.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    extra = [&quot;dev&quot;, &quot;docs&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    extra = [&quot;dev&quot;, &quot;docs&quot;]
    ```

---

#### [`extra-index-url`](#pip_extra-index-url) {: #pip_extra-index-url }
&lt;span id=&quot;extra-index-url&quot;&gt;&lt;/span&gt;

Extra URLs of package indexes to use, in addition to `--index-url`.

Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)
(the simple repository API), or a local directory laid out in the same format.

All indexes provided via this flag take priority over the index specified by
[`index_url`](#index-url). When multiple indexes are provided, earlier values take priority.

To control uv's resolution strategy when multiple indexes are present, see
[`index_strategy`](#index-strategy).

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    extra-index-url = [&quot;https://download.pytorch.org/whl/cpu&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    extra-index-url = [&quot;https://download.pytorch.org/whl/cpu&quot;]
    ```

---

#### [`find-links`](#pip_find-links) {: #pip_find-links }
&lt;span id=&quot;find-links&quot;&gt;&lt;/span&gt;

Locations to search for candidate distributions, in addition to those found in the registry
indexes.

If a path, the target must be a directory that contains packages as wheel files (`.whl`) or
source distributions (e.g., `.tar.gz` or `.zip`) at the top level.

If a URL, the page must contain a flat list of links to package files adhering to the
formats described above.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    find-links = [&quot;https://download.pytorch.org/whl/torch_stable.html&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    find-links = [&quot;https://download.pytorch.org/whl/torch_stable.html&quot;]
    ```

---

#### [`fork-strategy`](#pip_fork-strategy) {: #pip_fork-strategy }
&lt;span id=&quot;fork-strategy&quot;&gt;&lt;/span&gt;

The strategy to use when selecting multiple versions of a given package across Python
versions and platforms.

By default, uv will optimize for selecting the latest version of each package for each
supported Python version (`requires-python`), while minimizing the number of selected
versions across platforms.

Under `fewest`, uv will minimize the number of selected versions for each package,
preferring older versions that are compatible with a wider range of supported Python
versions or platforms.

**Default value**: `&quot;requires-python&quot;`

**Possible values**:

- `&quot;fewest&quot;`: Optimize for selecting the fewest number of versions for each package. Older versions may be preferred if they are compatible with a wider range of supported Python versions or platforms
- `&quot;requires-python&quot;`: Optimize for selecting latest supported version of each package, for each supported Python version

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    fork-strategy = &quot;fewest&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    fork-strategy = &quot;fewest&quot;
    ```

---

#### [`generate-hashes`](#pip_generate-hashes) {: #pip_generate-hashes }
&lt;span id=&quot;generate-hashes&quot;&gt;&lt;/span&gt;

Include distribution hashes in the output file.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    generate-hashes = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    generate-hashes = true
    ```

---

#### [`group`](#pip_group) {: #pip_group }
&lt;span id=&quot;group&quot;&gt;&lt;/span&gt;

Include the following dependency groups.

**Default value**: `None`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    group = [&quot;dev&quot;, &quot;docs&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    group = [&quot;dev&quot;, &quot;docs&quot;]
    ```

---

#### [`index-strategy`](#pip_index-strategy) {: #pip_index-strategy }
&lt;span id=&quot;index-strategy&quot;&gt;&lt;/span&gt;

The strategy to use when resolving against multiple index URLs.

By default, uv will stop at the first index on which a given package is available, and
limit resolutions to those present on that first index (`first-index`). This prevents
&quot;dependency confusion&quot; attacks, whereby an attacker can upload a malicious package under the
same name to an alternate index.

**Default value**: `&quot;first-index&quot;`

**Possible values**:

- `&quot;first-index&quot;`: Only use results from the first index that returns a match for a given package name
- `&quot;unsafe-first-match&quot;`: Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next
- `&quot;unsafe-best-match&quot;`: Search for every package name across all indexes, preferring the &quot;best&quot; version found. If a package version is in multiple indexes, only look at the entry for the first index

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    index-strategy = &quot;unsafe-best-match&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    index-strategy = &quot;unsafe-best-match&quot;
    ```

---

#### [`index-url`](#pip_index-url) {: #pip_index-url }
&lt;span id=&quot;index-url&quot;&gt;&lt;/span&gt;

The URL of the Python package index (by default: &lt;https://pypi.org/simple&gt;).

Accepts either a repository compliant with [PEP 503](https://peps.python.org/pep-0503/)
(the simple repository API), or a local directory laid out in the same format.

The index provided by this setting is given lower priority than any indexes specified via
[`extra_index_url`](#extra-index-url).

**Default value**: `&quot;https://pypi.org/simple&quot;`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    index-url = &quot;https://test.pypi.org/simple&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    index-url = &quot;https://test.pypi.org/simple&quot;
    ```

---

#### [`keyring-provider`](#pip_keyring-provider) {: #pip_keyring-provider }
&lt;span id=&quot;keyring-provider&quot;&gt;&lt;/span&gt;

Attempt to use `keyring` for authentication for index URLs.

At present, only `--keyring-provider subprocess` is supported, which configures uv to
use the `keyring` CLI to handle authentication.

**Default value**: `disabled`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    keyring-provider = &quot;subprocess&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    keyring-provider = &quot;subprocess&quot;
    ```

---

#### [`link-mode`](#pip_link-mode) {: #pip_link-mode }
&lt;span id=&quot;link-mode&quot;&gt;&lt;/span&gt;

The method to use when installing packages from the global cache.

Defaults to `clone` (also known as Copy-on-Write) on macOS, and `hardlink` on Linux and
Windows.

**Default value**: `&quot;clone&quot; (macOS) or &quot;hardlink&quot; (Linux, Windows)`

**Possible values**:

- `&quot;clone&quot;`: Clone (i.e., copy-on-write) packages from the wheel into the `site-packages` directory
- `&quot;copy&quot;`: Copy packages from the wheel into the `site-packages` directory
- `&quot;hardlink&quot;`: Hard link packages from the wheel into the `site-packages` directory
- `&quot;symlink&quot;`: Symbolically link packages from the wheel into the `site-packages` directory

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    link-mode = &quot;copy&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    link-mode = &quot;copy&quot;
    ```

---

#### [`no-annotate`](#pip_no-annotate) {: #pip_no-annotate }
&lt;span id=&quot;no-annotate&quot;&gt;&lt;/span&gt;

Exclude comment annotations indicating the source of each package from the output file
generated by `uv pip compile`.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-annotate = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-annotate = true
    ```

---

#### [`no-binary`](#pip_no-binary) {: #pip_no-binary }
&lt;span id=&quot;no-binary&quot;&gt;&lt;/span&gt;

Don't install pre-built wheels.

The given packages will be built and installed from source. The resolver will still use
pre-built wheels to extract package metadata, if available.

Multiple packages may be provided. Disable binaries for all packages with `:all:`.
Clear previously specified packages with `:none:`.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-binary = [&quot;ruff&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-binary = [&quot;ruff&quot;]
    ```

---

#### [`no-build`](#pip_no-build) {: #pip_no-build }
&lt;span id=&quot;no-build&quot;&gt;&lt;/span&gt;

Don't build source distributions.

When enabled, resolving will not run arbitrary Python code. The cached wheels of
already-built source distributions will be reused, but operations that require building
distributions will exit with an error.

Alias for `--only-binary :all:`.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-build = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-build = true
    ```

---

#### [`no-build-isolation`](#pip_no-build-isolation) {: #pip_no-build-isolation }
&lt;span id=&quot;no-build-isolation&quot;&gt;&lt;/span&gt;

Disable isolation when building source distributions.

Assumes that build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/)
are already installed.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-build-isolation = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-build-isolation = true
    ```

---

#### [`no-build-isolation-package`](#pip_no-build-isolation-package) {: #pip_no-build-isolation-package }
&lt;span id=&quot;no-build-isolation-package&quot;&gt;&lt;/span&gt;

Disable isolation when building source distributions for a specific package.

Assumes that the packages' build dependencies specified by [PEP 518](https://peps.python.org/pep-0518/)
are already installed.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-build-isolation-package = [&quot;package1&quot;, &quot;package2&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-build-isolation-package = [&quot;package1&quot;, &quot;package2&quot;]
    ```

---

#### [`no-deps`](#pip_no-deps) {: #pip_no-deps }
&lt;span id=&quot;no-deps&quot;&gt;&lt;/span&gt;

Ignore package dependencies, instead only add those packages explicitly listed
on the command line to the resulting requirements file.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-deps = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-deps = true
    ```

---

#### [`no-emit-package`](#pip_no-emit-package) {: #pip_no-emit-package }
&lt;span id=&quot;no-emit-package&quot;&gt;&lt;/span&gt;

Specify a package to omit from the output resolution. Its dependencies will still be
included in the resolution. Equivalent to pip-compile's `--unsafe-package` option.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-emit-package = [&quot;ruff&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-emit-package = [&quot;ruff&quot;]
    ```

---

#### [`no-extra`](#pip_no-extra) {: #pip_no-extra }
&lt;span id=&quot;no-extra&quot;&gt;&lt;/span&gt;

Exclude the specified optional dependencies if `all-extras` is supplied.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    all-extras = true
    no-extra = [&quot;dev&quot;, &quot;docs&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    all-extras = true
    no-extra = [&quot;dev&quot;, &quot;docs&quot;]
    ```

---

#### [`no-header`](#pip_no-header) {: #pip_no-header }
&lt;span id=&quot;no-header&quot;&gt;&lt;/span&gt;

Exclude the comment header at the top of output file generated by `uv pip compile`.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-header = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-header = true
    ```

---

#### [`no-index`](#pip_no-index) {: #pip_no-index }
&lt;span id=&quot;no-index&quot;&gt;&lt;/span&gt;

Ignore all registry indexes (e.g., PyPI), instead relying on direct URL dependencies and
those provided via `--find-links`.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-index = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-index = true
    ```

---

#### [`no-sources`](#pip_no-sources) {: #pip_no-sources }
&lt;span id=&quot;no-sources&quot;&gt;&lt;/span&gt;

Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the
standards-compliant, publishable package metadata, as opposed to using any local or Git
sources.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-sources = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-sources = true
    ```

---

#### [`no-strip-extras`](#pip_no-strip-extras) {: #pip_no-strip-extras }
&lt;span id=&quot;no-strip-extras&quot;&gt;&lt;/span&gt;

Include extras in the output file.

By default, uv strips extras, as any packages pulled in by the extras are already included
as dependencies in the output file directly. Further, output files generated with
`--no-strip-extras` cannot be used as constraints files in `install` and `sync` invocations.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-strip-extras = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-strip-extras = true
    ```

---

#### [`no-strip-markers`](#pip_no-strip-markers) {: #pip_no-strip-markers }
&lt;span id=&quot;no-strip-markers&quot;&gt;&lt;/span&gt;

Include environment markers in the output file generated by `uv pip compile`.

By default, uv strips environment markers, as the resolution generated by `compile` is
only guaranteed to be correct for the target environment.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    no-strip-markers = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    no-strip-markers = true
    ```

---

#### [`only-binary`](#pip_only-binary) {: #pip_only-binary }
&lt;span id=&quot;only-binary&quot;&gt;&lt;/span&gt;

Only use pre-built wheels; don't build source distributions.

When enabled, resolving will not run code from the given packages. The cached wheels of already-built
source distributions will be reused, but operations that require building distributions will
exit with an error.

Multiple packages may be provided. Disable binaries for all packages with `:all:`.
Clear previously specified packages with `:none:`.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    only-binary = [&quot;ruff&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    only-binary = [&quot;ruff&quot;]
    ```

---

#### [`output-file`](#pip_output-file) {: #pip_output-file }
&lt;span id=&quot;output-file&quot;&gt;&lt;/span&gt;

Write the requirements generated by `uv pip compile` to the given `requirements.txt` file.

If the file already exists, the existing versions will be preferred when resolving
dependencies, unless `--upgrade` is also specified.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    output-file = &quot;requirements.txt&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    output-file = &quot;requirements.txt&quot;
    ```

---

#### [`prefix`](#pip_prefix) {: #pip_prefix }
&lt;span id=&quot;prefix&quot;&gt;&lt;/span&gt;

Install packages into `lib`, `bin`, and other top-level folders under the specified
directory, as if a virtual environment were present at that location.

In general, prefer the use of `--python` to install into an alternate environment, as
scripts and other artifacts installed via `--prefix` will reference the installing
interpreter, rather than any interpreter added to the `--prefix` directory, rendering them
non-portable.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    prefix = &quot;./prefix&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    prefix = &quot;./prefix&quot;
    ```

---

#### [`prerelease`](#pip_prerelease) {: #pip_prerelease }
&lt;span id=&quot;prerelease&quot;&gt;&lt;/span&gt;

The strategy to use when considering pre-release versions.

By default, uv will accept pre-releases for packages that _only_ publish pre-releases,
along with first-party requirements that contain an explicit pre-release marker in the
declared specifiers (`if-necessary-or-explicit`).

**Default value**: `&quot;if-necessary-or-explicit&quot;`

**Possible values**:

- `&quot;disallow&quot;`: Disallow all pre-release versions
- `&quot;allow&quot;`: Allow all pre-release versions
- `&quot;if-necessary&quot;`: Allow pre-release versions if all versions of a package are pre-release
- `&quot;explicit&quot;`: Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements
- `&quot;if-necessary-or-explicit&quot;`: Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    prerelease = &quot;allow&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    prerelease = &quot;allow&quot;
    ```

---

#### [`python`](#pip_python) {: #pip_python }
&lt;span id=&quot;python&quot;&gt;&lt;/span&gt;

The Python interpreter into which packages should be installed.

By default, uv installs into the virtual environment in the current working directory or
any parent directory. The `--python` option allows you to specify a different interpreter,
which is intended for use in continuous integration (CI) environments or other automated
workflows.

Supported formats:
- `3.10` looks for an installed Python 3.10 in the registry on Windows (see
  `py --list-paths`), or `python3.10` on Linux and macOS.
- `python3.10` or `python.exe` looks for a binary with the given name in `PATH`.
- `/home/ferris/.local/bin/python3.10` uses the exact Python at the given path.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    python = &quot;3.10&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    python = &quot;3.10&quot;
    ```

---

#### [`python-platform`](#pip_python-platform) {: #pip_python-platform }
&lt;span id=&quot;python-platform&quot;&gt;&lt;/span&gt;

The platform for which requirements should be resolved.

Represented as a &quot;target triple&quot;, a string that describes the target platform in terms of
its CPU, vendor, and operating system name, like `x86_64-unknown-linux-gnu` or
`aarch64-apple-darwin`.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    python-platform = &quot;x86_64-unknown-linux-gnu&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    python-platform = &quot;x86_64-unknown-linux-gnu&quot;
    ```

---

#### [`python-version`](#pip_python-version) {: #pip_python-version }
&lt;span id=&quot;python-version&quot;&gt;&lt;/span&gt;

The minimum Python version that should be supported by the resolved requirements (e.g.,
`3.8` or `3.8.17`).

If a patch version is omitted, the minimum patch version is assumed. For example, `3.8` is
mapped to `3.8.0`.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    python-version = &quot;3.8&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    python-version = &quot;3.8&quot;
    ```

---

#### [`reinstall`](#pip_reinstall) {: #pip_reinstall }
&lt;span id=&quot;reinstall&quot;&gt;&lt;/span&gt;

Reinstall all packages, regardless of whether they're already installed. Implies `refresh`.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    reinstall = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    reinstall = true
    ```

---

#### [`reinstall-package`](#pip_reinstall-package) {: #pip_reinstall-package }
&lt;span id=&quot;reinstall-package&quot;&gt;&lt;/span&gt;

Reinstall a specific package, regardless of whether it's already installed. Implies
`refresh-package`.

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    reinstall-package = [&quot;ruff&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    reinstall-package = [&quot;ruff&quot;]
    ```

---

#### [`require-hashes`](#pip_require-hashes) {: #pip_require-hashes }
&lt;span id=&quot;require-hashes&quot;&gt;&lt;/span&gt;

Require a matching hash for each requirement.

Hash-checking mode is all or nothing. If enabled, _all_ requirements must be provided
with a corresponding hash or set of hashes. Additionally, if enabled, _all_ requirements
must either be pinned to exact versions (e.g., `==1.0.0`), or be specified via direct URL.

Hash-checking mode introduces a number of additional constraints:

- Git dependencies are not supported.
- Editable installs are not supported.
- Local dependencies are not supported, unless they point to a specific wheel (`.whl`) or
  source archive (`.zip`, `.tar.gz`), as opposed to a directory.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    require-hashes = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    require-hashes = true
    ```

---

#### [`resolution`](#pip_resolution) {: #pip_resolution }
&lt;span id=&quot;resolution&quot;&gt;&lt;/span&gt;

The strategy to use when selecting between the different compatible versions for a given
package requirement.

By default, uv will use the latest compatible version of each package (`highest`).

**Default value**: `&quot;highest&quot;`

**Possible values**:

- `&quot;highest&quot;`: Resolve the highest compatible version of each package
- `&quot;lowest&quot;`: Resolve the lowest compatible version of each package
- `&quot;lowest-direct&quot;`: Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    resolution = &quot;lowest-direct&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    resolution = &quot;lowest-direct&quot;
    ```

---

#### [`strict`](#pip_strict) {: #pip_strict }
&lt;span id=&quot;strict&quot;&gt;&lt;/span&gt;

Validate the Python environment, to detect packages with missing dependencies and other
issues.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    strict = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    strict = true
    ```

---

#### [`system`](#pip_system) {: #pip_system }
&lt;span id=&quot;system&quot;&gt;&lt;/span&gt;

Install packages into the system Python environment.

By default, uv installs into the virtual environment in the current working directory or
any parent directory. The `--system` option instructs uv to instead use the first Python
found in the system `PATH`.

WARNING: `--system` is intended for use in continuous integration (CI) environments and
should be used with caution, as it can modify the system Python installation.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    system = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    system = true
    ```

---

#### [`target`](#pip_target) {: #pip_target }
&lt;span id=&quot;target&quot;&gt;&lt;/span&gt;

Install packages into the specified directory, rather than into the virtual or system Python
environment. The packages will be installed at the top-level of the directory.

**Default value**: `None`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    target = &quot;./target&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    target = &quot;./target&quot;
    ```

---

#### [`torch-backend`](#pip_torch-backend) {: #pip_torch-backend }
&lt;span id=&quot;torch-backend&quot;&gt;&lt;/span&gt;

The backend to use when fetching packages in the PyTorch ecosystem.

When set, uv will ignore the configured index URLs for packages in the PyTorch ecosystem,
and will instead use the defined backend.

For example, when set to `cpu`, uv will use the CPU-only PyTorch index; when set to `cu126`,
uv will use the PyTorch index for CUDA 12.6.

The `auto` mode will attempt to detect the appropriate PyTorch index based on the currently
installed CUDA drivers.

This option is in preview and may change in any future release.

**Default value**: `null`

**Type**: `str`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    torch-backend = &quot;auto&quot;
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    torch-backend = &quot;auto&quot;
    ```

---

#### [`universal`](#pip_universal) {: #pip_universal }
&lt;span id=&quot;universal&quot;&gt;&lt;/span&gt;

Perform a universal resolution, attempting to generate a single `requirements.txt` output
file that is compatible with all operating systems, architectures, and Python
implementations.

In universal mode, the current Python version (or user-provided `--python-version`) will be
treated as a lower bound. For example, `--universal --python-version 3.7` would produce a
universal resolution for Python 3.7 and later.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    universal = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    universal = true
    ```

---

#### [`upgrade`](#pip_upgrade) {: #pip_upgrade }
&lt;span id=&quot;upgrade&quot;&gt;&lt;/span&gt;

Allow package upgrades, ignoring pinned versions in any existing output file.

**Default value**: `false`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    upgrade = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    upgrade = true
    ```

---

#### [`upgrade-package`](#pip_upgrade-package) {: #pip_upgrade-package }
&lt;span id=&quot;upgrade-package&quot;&gt;&lt;/span&gt;

Allow upgrades for a specific package, ignoring pinned versions in any existing output
file.

Accepts both standalone package names (`ruff`) and version specifiers (`ruff&lt;0.5.0`).

**Default value**: `[]`

**Type**: `list[str]`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    upgrade-package = [&quot;ruff&quot;]
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    upgrade-package = [&quot;ruff&quot;]
    ```

---

#### [`verify-hashes`](#pip_verify-hashes) {: #pip_verify-hashes }
&lt;span id=&quot;verify-hashes&quot;&gt;&lt;/span&gt;

Validate any hashes provided in the requirements file.

Unlike `--require-hashes`, `--verify-hashes` does not require that all requirements have
hashes; instead, it will limit itself to verifying the hashes of those requirements that do
include them.

**Default value**: `true`

**Type**: `bool`

**Example usage**:

=== &quot;pyproject.toml&quot;

    ```toml
    [tool.uv.pip]
    verify-hashes = true
    ```
=== &quot;uv.toml&quot;

    ```toml
    [pip]
    verify-hashes = true
    ```

---

</file>
        <dir path="docs/reference/policies">
          <file path="docs/reference/policies/license.md"># License

uv is licensed under either of

- Apache License, Version 2.0

  [LICENSE-APACHE](https://github.com/astral-sh/uv/blob/main/LICENSE-APACHE) or
  &lt;https://www.apache.org/licenses/LICENSE-2.0&gt;

- MIT License

  [LICENSE-MIT](https://github.com/astral-sh/uv/blob/main/LICENSE-MIT) or
  &lt;https://opensource.org/licenses/MIT&gt;

at your option.

Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv
by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any
additional terms or conditions.
</file>
          <file path="docs/reference/policies/platforms.md"># Platform support

uv has Tier 1 support for the following platforms:

- macOS (Apple Silicon)
- macOS (x86_64)
- Linux (x86_64)
- Windows (x86_64)

uv is continuously built, tested, and developed against its Tier 1 platforms. Inspired by the Rust
project, Tier 1 can be thought of as
[&quot;guaranteed to work&quot;](https://doc.rust-lang.org/beta/rustc/platform-support.html).

uv has Tier 2 support
([&quot;guaranteed to build&quot;](https://doc.rust-lang.org/beta/rustc/platform-support.html)) for the
following platforms:

- Linux (PPC64)
- Linux (PPC64LE)
- Linux (aarch64)
- Linux (armv7)
- Linux (i686)
- Linux (s390x)

uv ships pre-built wheels to [PyPI](https://pypi.org/project/uv/) for its Tier 1 and Tier 2
platforms. However, while Tier 2 platforms are continuously built, they are not continuously tested
or developed against, and so stability may vary in practice.

Beyond the Tier 1 and Tier 2 platforms, uv is known to build on i686 Windows, and known _not_ to
build on aarch64 Windows, but does not consider either platform to be supported at this time. The
minimum supported Windows versions are Windows 10 and Windows Server 2016, following
[Rust's own Tier 1 support](https://blog.rust-lang.org/2024/02/26/Windows-7.html).

uv supports and is tested against Python 3.8, 3.9, 3.10, 3.11, 3.12, and 3.13.
</file>
          <file path="docs/reference/policies/versioning.md"># Versioning

uv uses a custom versioning scheme in which the minor version number is bumped for breaking changes,
and the patch version number is bumped for bug fixes, enhancements, and other non-breaking changes.

uv is widely used in production. However, we value the ability to iterate on new features quickly
and gather changes that _could_ be breaking into clearly marked releases.

Once uv v1.0.0 is released, the versioning scheme will adhere to
[Semantic Versioning](https://semver.org/). There is not a particular goal that must be achieved for
uv to reach this milestone.

uv's changelog can be [viewed on GitHub](https://github.com/astral-sh/uv/blob/main/CHANGELOG.md).

## Cache versioning

Cache versions are considered internal to uv, and so may be changed in a minor or patch release. See
[Cache versioning](../../concepts/cache.md#cache-versioning) for more.

## Lockfile versioning

The `uv.lock` schema version is considered part of the public API, and so will only be incremented
in a minor release as a breaking change. See
[Lockfile versioning](../../concepts/resolution.md#lockfile-versioning) for more.

## Minimum supported Rust version

The minimum supported Rust version required to compile uv is listed in the `rust-version` key of the
`[workspace.package]` section in `Cargo.toml`. It may change in any release (minor or patch). It
will never be newer than N-2 Rust versions, where N is the latest stable version. For example, if
the latest stable Rust version is 1.85, uv's minimum supported Rust version will be at most 1.83.

This is only relevant to users who build uv from source. Installing uv from the Python package index
usually installs a pre-built binary and does not require Rust compilation.
</file>
        </dir>
        <dir path="docs/reference/troubleshooting">
          <file path="docs/reference/troubleshooting/build-failures.md"># Troubleshooting build failures

uv needs to build packages when there is not a compatible wheel (a pre-built distribution of the
package) available. Building packages can fail for many reasons, some of which may be unrelated to
uv itself.

## Recognizing a build failure

An example build failure can be produced by trying to install and old version of numpy on a new,
unsupported version of Python:

```console
$ uv pip install -p 3.13 'numpy&lt;1.20'
Resolved 1 package in 62ms
  √ó Failed to build `numpy==1.19.5`
  ‚îú‚îÄ‚ñ∂ The build backend returned an error
  ‚ï∞‚îÄ‚ñ∂ Call to `setuptools.build_meta:__legacy__.build_wheel()` failed (exit status: 1)

      [stderr]
      Traceback (most recent call last):
        File &quot;&lt;string&gt;&quot;, line 8, in &lt;module&gt;
          from setuptools.build_meta import __legacy__ as backend
        File &quot;/home/konsti/.cache/uv/builds-v0/.tmpi4bgKb/lib/python3.13/site-packages/setuptools/__init__.py&quot;, line 9, in &lt;module&gt;
          import distutils.core
      ModuleNotFoundError: No module named 'distutils'

      hint: `distutils` was removed from the standard library in Python 3.12. Consider adding a constraint (like `numpy &gt;1.19.5`) to avoid building a version of `numpy` that depends
      on `distutils`.
```

Notice that the error message is prefaced by &quot;The build backend returned an error&quot;.

The build failure includes the `[stderr]` (and `[stdout]`, if present) from the build backend that
was used for the build. The error logs are not from uv itself.

The message following the `‚ï∞‚îÄ‚ñ∂` is a hint provided by uv, to help resolve common build failures. A
hint will not be available for all build failures.

## Confirming that a build failure is specific to uv

Build failures are usually related to your system and the build backend. It is rare that a build
failure is specific to uv. You can confirm that the build failure is not related to uv by attempting
to reproduce it with pip:

```console
$ uv venv -p 3.13 --seed
$ source .venv/bin/activate
$ pip install --use-pep517 --no-cache --force-reinstall 'numpy==1.19.5'
Collecting numpy==1.19.5
  Using cached numpy-1.19.5.zip (7.3 MB)
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
ERROR: Exception:
Traceback (most recent call last):
  ...
  File &quot;/Users/example/.cache/uv/archive-v0/3783IbOdglemN3ieOULx2/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_impl.py&quot;, line 321, in _call_hook
    raise BackendUnavailable(data.get('traceback', ''))
pip._vendor.pyproject_hooks._impl.BackendUnavailable: Traceback (most recent call last):
  File &quot;/Users/example/.cache/uv/archive-v0/3783IbOdglemN3ieOULx2/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py&quot;, line 77, in _build_backend
    obj = import_module(mod_path)
  File &quot;/Users/example/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/importlib/__init__.py&quot;, line 88, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1387, in _gcd_import
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1360, in _find_and_load
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1310, in _find_and_load_unlocked
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 488, in _call_with_frames_removed
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1387, in _gcd_import
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1360, in _find_and_load
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1331, in _find_and_load_unlocked
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 935, in _load_unlocked
  File &quot;&lt;frozen importlib._bootstrap_external&gt;&quot;, line 1022, in exec_module
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 488, in _call_with_frames_removed
  File &quot;/private/var/folders/6p/k5sd5z7j31b31pq4lhn0l8d80000gn/T/pip-build-env-vdpjme7d/overlay/lib/python3.13/site-packages/setuptools/__init__.py&quot;, line 9, in &lt;module&gt;
    import distutils.core
ModuleNotFoundError: No module named 'distutils'
```

!!! important

    The `--use-pep517` flag should be included with the `pip install` invocation to ensure the same
    build isolation behavior. uv always uses [build isolation by default](../../pip/compatibility.md#pep-517-build-isolation).

    We also recommend including the `--force-reinstall` and `--no-cache` options when reproducing
    failures.

Since this build failure occurs in pip too, it is not likely to be a bug with uv.

If a build failure is reproducible with another installer, you should investigate upstream (in this
example, `numpy` or `setuptools`), find a way to avoid building the package in the first place, or
make the necessary adjustments to your system for the build to succeed.

## Why does uv build a package?

When generating the cross-platform lockfile, uv needs to determine the dependencies of all packages,
even those only installed on other platforms. uv tries to avoid package builds during resolution. It
uses any wheel if exist for that version, then tries to find static metadata in the source
distribution (mainly pyproject.toml with static `project.version`, `project.dependencies` and
`project.optional-dependencies` or METADATA v2.2+). Only if all of that fails, it builds the
package.

When installing, uv needs to have a wheel for the current platform for each package. If no matching
wheel exists in the index, uv tries to build the source distribution.

You can check which wheels exist for a PyPI project under ‚ÄúDownload Files‚Äù, e.g.
https://pypi.org/project/numpy/2.1.1.md#files. Wheels with `...-py3-none-any.whl` filenames work
everywhere, others have the operating system and platform in the filename. In the linked `numpy`
example, you can see that there are pre-built distributions for Python 3.10 to 3.13 on MacOS, Linux
and Windows.

## Common build failures

The following examples demonstrate common build failures and how to resolve them.

### Command is not found

If the build error mentions a missing command, for example, `gcc`:

&lt;!-- docker run --platform linux/x86_64 -it ghcr.io/astral-sh/uv:python3.10-bookworm-slim /bin/bash -c &quot;uv pip install --system pysha3==1.0.2&quot; --&gt;

```hl_lines=&quot;17&quot;
√ó Failed to build `pysha3==1.0.2`
‚îú‚îÄ‚ñ∂ The build backend returned an error
‚ï∞‚îÄ‚ñ∂ Call to `setuptools.build_meta:__legacy__.build_wheel` failed (exit status: 1)

    [stdout]
    running bdist_wheel
    running build
    running build_py
    creating build/lib.linux-x86_64-cpython-310
    copying sha3.py -&gt; build/lib.linux-x86_64-cpython-310
    running build_ext
    building '_pysha3' extension
    creating build/temp.linux-x86_64-cpython-310/Modules/_sha3
    gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -DPY_WITH_KECCAK=1 -I/root/.cache/uv/builds-v0/.tmp8V4iEk/include -I/usr/local/include/python3.10 -c
    Modules/_sha3/sha3module.c -o build/temp.linux-x86_64-cpython-310/Modules/_sha3/sha3module.o

    [stderr]
    error: command 'gcc' failed: No such file or directory
```

Then, you'll need to install it with your system package manager, e.g., to resolve the error above:

```console
$ apt install gcc
```

!!! tip

    When using the uv-managed Python versions, it's common to need `clang` installed instead of
    `gcc`.

    Many Linux distributions provide a package that includes all the common build dependencies.
    You can address most build requirements by installing it, e.g., for Debian or Ubuntu:

    ```console
    $ apt install build-essential
    ```

### Header or library is missing

If the build error mentions a missing header or library, e.g., a `.h` file, then you'll need to
install it with your system package manager.

For example, installing `pygraphviz` requires Graphviz to be installed:

&lt;!-- docker run --platform linux/x86_64 -it ghcr.io/astral-sh/uv:python3.12-bookworm /bin/bash -c &quot;uv pip install --system 'pygraphviz'&quot; --&gt;

```hl_lines=&quot;18-19&quot;
√ó Failed to build `pygraphviz==1.14`
‚îú‚îÄ‚ñ∂ The build backend returned an error
‚ï∞‚îÄ‚ñ∂ Call to `setuptools.build_meta.build_wheel` failed (exit status: 1)

  [stdout]
  running bdist_wheel
  running build
  running build_py
  ...
  gcc -fno-strict-overflow -Wsign-compare -DNDEBUG -g -O3 -Wall -fPIC -DSWIG_PYTHON_STRICT_BYTE_CHAR -I/root/.cache/uv/builds-v0/.tmpgLYPe0/include -I/usr/local/include/python3.12 -c pygraphviz/graphviz_wrap.c -o
  build/temp.linux-x86_64-cpython-312/pygraphviz/graphviz_wrap.o

  [stderr]
  ...
  pygraphviz/graphviz_wrap.c:9: warning: &quot;SWIG_PYTHON_STRICT_BYTE_CHAR&quot; redefined
      9 | #define SWIG_PYTHON_STRICT_BYTE_CHAR
        |
  &lt;command-line&gt;: note: this is the location of the previous definition
  pygraphviz/graphviz_wrap.c:3023:10: fatal error: graphviz/cgraph.h: No such file or directory
    3023 | #include &quot;graphviz/cgraph.h&quot;
        |          ^~~~~~~~~~~~~~~~~~~
  compilation terminated.
  error: command '/usr/bin/gcc' failed with exit code 1

  hint: This error likely indicates that you need to install a library that provides &quot;graphviz/cgraph.h&quot; for `pygraphviz@1.14`
```

To resolve this error on Debian, you'd install the `libgraphviz-dev` package:

```console
$ apt install libgraphviz-dev
```

Note that installing the `graphviz` package is not sufficient, the development headers need to be
installed.

!!! tip

    To resolve an error where `Python.h` is missing, install the [`python3-dev` package](https://packages.debian.org/bookworm/python3-dev).

### Module is missing or cannot be imported

If the build error mentions a failing import, consider
[disabling build isolation](../../concepts/projects/config.md#build-isolation).

For example, some packages assume that `pip` is available without declaring it as a build
dependency:

&lt;!-- docker run --platform linux/x86_64 -it ghcr.io/astral-sh/uv:python3.12-bookworm-slim /bin/bash -c &quot;uv pip install --system chumpy&quot; --&gt;

```hl_lines=&quot;7&quot;
  √ó Failed to build `chumpy==0.70`
  ‚îú‚îÄ‚ñ∂ The build backend returned an error
  ‚ï∞‚îÄ‚ñ∂ Call to `setuptools.build_meta:__legacy__.build_wheel` failed (exit status: 1)

    [stderr]
    Traceback (most recent call last):
      File &quot;&lt;string&gt;&quot;, line 9, in &lt;module&gt;
    ModuleNotFoundError: No module named 'pip'

    During handling of the above exception, another exception occurred:

    Traceback (most recent call last):
      File &quot;&lt;string&gt;&quot;, line 14, in &lt;module&gt;
      File &quot;/root/.cache/uv/builds-v0/.tmpvvHaxI/lib/python3.12/site-packages/setuptools/build_meta.py&quot;, line 334, in get_requires_for_build_wheel
        return self._get_build_requires(config_settings, requirements=[])
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File &quot;/root/.cache/uv/builds-v0/.tmpvvHaxI/lib/python3.12/site-packages/setuptools/build_meta.py&quot;, line 304, in _get_build_requires
        self.run_setup()
      File &quot;/root/.cache/uv/builds-v0/.tmpvvHaxI/lib/python3.12/site-packages/setuptools/build_meta.py&quot;, line 522, in run_setup
        super().run_setup(setup_script=setup_script)
      File &quot;/root/.cache/uv/builds-v0/.tmpvvHaxI/lib/python3.12/site-packages/setuptools/build_meta.py&quot;, line 320, in run_setup
        exec(code, locals())
      File &quot;&lt;string&gt;&quot;, line 11, in &lt;module&gt;
    ModuleNotFoundError: No module named 'pip'
```

To resolve this error, pre-install the build dependencies then disable build isolation for the
package:

```console
$ uv pip install pip setuptools
$ uv pip install chumpy --no-build-isolation-package chumpy
```

Note you will need to install the missing package, e.g., `pip`, _and_ all the other build
dependencies of the package, e.g, `setuptools`.

### Old version of the package is built

If a package fails to build during resolution and the version that failed to build is older than the
version you want to use, try adding a [constraint](../settings.md#constraint-dependencies) with a
lower bound (e.g., `numpy&gt;=1.17`). Sometimes, due to algorithmic limitations, the uv resolver tries
to find a fitting version using unreasonably old packages, which can be prevented by using lower
bounds.

For example, when resolving the following dependencies on Python 3.10, uv attempts to build an old
version of `apache-beam`.

```title=&quot;requirements.txt&quot;
dill&lt;0.3.9,&gt;=0.2.2
apache-beam&lt;=2.49.0
```

&lt;!-- docker run --platform linux/x86_64 -it ghcr.io/astral-sh/uv:python3.10-bookworm-slim /bin/bash -c &quot;printf 'dill&lt;0.3.9,&gt;=0.2.2\napache-beam&lt;=2.49.0' | uv pip compile -&quot; --&gt;

```hl_lines=&quot;1&quot;
√ó Failed to build `apache-beam==2.0.0`
‚îú‚îÄ‚ñ∂ The build backend returned an error
‚ï∞‚îÄ‚ñ∂ Call to `setuptools.build_meta:__legacy__.build_wheel` failed (exit status: 1)

    [stderr]
    ...
```

Adding a lower bound constraint, e.g., `apache-beam&lt;=2.49.0,&gt;2.30.0`, resolves this build failure as
uv will avoid using an old version of `apache-beam`.

Constraints can also be defined for indirect dependencies using `constraints.txt` files or the
[`constraint-dependencies`](../settings.md#constraint-dependencies) setting.

### Old Version of a build dependency is used

If a package fails to build because `uv` selects an incompatible or outdated version of a build-time
dependency, you can enforce constraints specifically for build dependencies. The
[`build-constraint-dependencies`](../settings.md#build-constraint-dependencies) setting (or an
analogous `build-constraints.txt` file) can be used to ensure that `uv` selects an appropriate
version of a given build requirements.

For example, the issue described in
[#5551](https://github.com/astral-sh/uv/issues/5551#issuecomment-2256055975) could be addressed by
specifying a build constraint that excludes `setuptools` version `72.0.0`:

```toml title=&quot;pyproject.toml&quot;
[tool.uv]
# Prevent setuptools version 72.0.0 from being used as a build dependency.
build-constraint-dependencies = [&quot;setuptools!=72.0.0&quot;]
```

The build constraint will thus ensure that any package requiring `setuptools` during the build
process will avoid using the problematic version, preventing build failures caused by incompatible
build dependencies.

### Package is only needed for an unused platform

If locking fails due to building a package from a platform you do not need to support, consider
[limiting resolution](../../concepts/projects/config.md#limited-resolution-environments) to your
supported platforms.

### Package does not support all Python versions

If you support a large range of Python versions, consider using markers to use older versions for
older Python versions and newer versions for newer Python version. For example, `numpy` only
supports four Python minor version at a time, so to support a wider range of Python versions, e.g.,
Python 3.8 to 3.13, the `numpy` requirement needs to be split:

```
numpy&gt;=1.23; python_version &gt;= &quot;3.10&quot;
numpy&lt;1.23; python_version &lt; &quot;3.10&quot;
```

### Package is only usable on a specific platform

If locking fails due to building a package that is only usable on another platform, you can
[provide dependency metadata manually](../settings.md#dependency-metadata) to skip the build. uv can
not verify this information, so it is important to specify correct metadata when using this
override.
</file>
          <file path="docs/reference/troubleshooting/reproducible-examples.md"># Reproducible examples

## Why reproducible examples are important

A minimal reproducible example (MRE) is essential for fixing bugs. Without an example that can be
used to reproduce the problem, a maintainer cannot debug it or test if it is fixed. If the example
is not minimal, i.e., if it includes lots of content which is not related to the issue, it can take
a maintainer much longer to identify the root cause of the problem.

## How to write a reproducible example

When writing a reproducible example, the goal is to provide all of the context necessary for someone
else to reproduce your example. This includes:

- The platform you're using (e.g., the operating system and architecture)
- Any relevant system state (e.g., explicitly set environment variables)
- The version of uv
- The version of other relevant tools
- The relevant files (the `uv.lock`, `pyproject.toml`, etc.)
- The commands to run

To ensure your reproduction is minimal, remove as many dependencies, settings, and files as
possible. Be sure to test your reproduction before sharing it. We recommend including verbose logs
from your reproduction; they may differ on your machine in a critical way. Using a
[Gist](https://gist.github.com) can be helpful for very long logs.

Below, we'll cover several specific [strategies](#strategies-for-reproducible-examples) for creating
and sharing reproducible examples.

!!! tip

    There's a great guide to the basics of creating MREs on
    [Stack Overflow](https://stackoverflow.com/help/minimal-reproducible-example).

## Strategies for reproducible examples

### Docker image

Writing a Docker image is often the best way to share a reproducible example because it is entirely
self-contained. This means that the state from the reproducer's system does not affect the problem.

!!! note

    Using a Docker image is only feasible if the issue is reproducible on Linux. When using macOS,
    it's prudent to ensure your image is not reproducible on Linux but some bugs _are_ specific
    to the operating system. While using Docker to run Windows containers is feasible, it's not
    commonplace. These sorts of bugs are expected to be reported as a [script](#script) instead.

When writing a Docker MRE with uv, it's best to start with one of
[uv's Docker images](../../guides/integration/docker.md#available-images). When doing so, be sure to
pin to a specific version of uv.

```Dockerfile
FROM ghcr.io/astral-sh/uv:0.5.24-debian-slim
```

While Docker images are isolated from the system, the build will use your system's architecture by
default. When sharing a reproduction, you can explicitly set the platform to ensure a reproducer
gets the expected behavior. uv publishes images for `linux/amd64` (e.g., Intel or AMD) and
`linux/arm64` (e.g., Apple M Series or ARM)

```Dockerfile
FROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim
```

Docker images are best for reproducing issues that can be constructed with commands, e.g.:

```Dockerfile
FROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim

RUN uv init /mre
WORKDIR /mre
RUN uv add pydantic
RUN uv sync
RUN uv run -v python -c &quot;import pydantic&quot;
```

However, you can also write files into the image inline:

```Dockerfile
FROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim

COPY &lt;&lt;EOF /mre/pyproject.toml
[project]
name = &quot;example&quot;
version = &quot;0.1.0&quot;
description = &quot;Add your description here&quot;
readme = &quot;README.md&quot;
requires-python = &quot;&gt;=3.12&quot;
dependencies = [&quot;pydantic&quot;]
EOF

WORKDIR /mre
RUN uv lock
```

If you need to write many files, it's better to create and publish a
[Git repository](#git-repository). You can combine these approaches and include a `Dockerfile` in
the repository.

When sharing a Docker reproduction, it's helpful to include the build logs. You can see more output
from the build steps by disabling caching and the fancy output:

```console
docker build . --progress plain --no-cache
```

### Script

When reporting platform-specific bugs that cannot be reproduced in a [container](#docker-image),
it's best practice to include a script showing the commands that can be used to reproduce the bug,
e.g.:

```bash
uv init
uv add pydantic
uv sync
uv run -v python -c &quot;import pydantic&quot;
```

If your reproduction requires many files, use a [Git repository](#git-repository) to share them.

In addition to the script, include _verbose_ logs (i.e., with the `-v` flag) of the failure and the
complete error message.

Whenever a script relies on external state, be sure to share that information. For example, if you
wrote the script on Windows and it uses a Python version that you installed with `choco` and runs on
PowerShell 6.2, please include that in the report.

### Git repository

When sharing a Git repository reproduction, include a [script](#script) that reproduces the problem
or, even better, a [Dockerfile](#docker-image). The first step of the script should be to clone the
repository and checkout a specific commit:

```console
$ git clone https://github.com/&lt;user&gt;/&lt;project&gt;.git
$ cd &lt;project&gt;
$ git checkout &lt;commit&gt;
$ &lt;commands to produce error&gt;
```

You can quickly create a new repository in the [GitHub UI](https://github.com/new) or with the `gh`
CLI:

```console
$ gh repo create uv-mre-1234 --clone
```

When using a Git repository for a reproduction, please remember to _minimize_ the contents by
excluding files or settings that are not required to reproduce your problem.
</file>
        </dir>
      </dir>
    </dir>
  </files>
</codebase_context>
